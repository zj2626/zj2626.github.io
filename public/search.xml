<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>4.OutOfMemoryError</title>
      <link href="/2021/05/31/20210601001_OutOfMemoryError/"/>
      <url>/2021/05/31/20210601001_OutOfMemoryError/</url>
      
        <content type="html"><![CDATA[<h2 id="1-溢出"><a href="#1-溢出" class="headerlink" title="1. 溢出"></a>1. 溢出</h2><p>虚拟机规范中, 除了程序计数器, 其他部分都可能发生OOM异常</p><h2 id="2-溢出种类"><a href="#2-溢出种类" class="headerlink" title="2.溢出种类"></a>2.溢出种类</h2><h3 id="1-Java堆溢出"><a href="#1-Java堆溢出" class="headerlink" title="1.Java堆溢出"></a>1.Java堆溢出</h3><h3 id="2-虚拟机栈和本地方法栈溢出"><a href="#2-虚拟机栈和本地方法栈溢出" class="headerlink" title="2.虚拟机栈和本地方法栈溢出"></a>2.虚拟机栈和本地方法栈溢出</h3><h3 id="3-方法去和运行时常量池溢出"><a href="#3-方法去和运行时常量池溢出" class="headerlink" title="3.方法去和运行时常量池溢出"></a>3.方法去和运行时常量池溢出</h3><h3 id="4-本机直接内存溢出"><a href="#4-本机直接内存溢出" class="headerlink" title="4.本机直接内存溢出"></a>4.本机直接内存溢出</h3><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入了解java虚拟机 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用多种算法对泰坦尼克号乘客获救原因进行分析</title>
      <link href="/2020/01/15/2018031301/"/>
      <url>/2020/01/15/2018031301/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line">titanic = pandas.read_csv(<span class="string">'titanic_train.csv'</span>)</span><br><span class="line">titanic.head(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据简单统计</span></span><br><span class="line">titanic.describe()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 由表Age列有部分缺失，影响最终模型效果</span></span><br><span class="line"><span class="comment"># 解决方法： 填充中位数 (使用fillna()方法填充缺失值NaN， 使用median()获得中位数/中值)</span></span><br><span class="line">titanic[<span class="string">'Age'</span>] = titanic[<span class="string">'Age'</span>].fillna(titanic[<span class="string">'Age'</span>].median())</span><br><span class="line">titanic.describe()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理原始数据，其中有的是字符量需要映射为数值</span></span><br><span class="line"><span class="keyword">print</span> (titanic[<span class="string">'Sex'</span>].unique())</span><br><span class="line">titanic.loc[titanic[<span class="string">'Sex'</span>] == <span class="string">'male'</span>, <span class="string">'Sex'</span>] = <span class="number">0</span></span><br><span class="line">titanic.loc[titanic[<span class="string">'Sex'</span>] == <span class="string">'female'</span>, <span class="string">'Sex'</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (titanic[<span class="string">'Embarked'</span>].unique())</span><br><span class="line">titanic[<span class="string">'Embarked'</span>] = titanic[<span class="string">'Embarked'</span>].fillna(<span class="string">'S'</span>)<span class="comment"># 缺失值填充，填充数量最多的类别</span></span><br><span class="line">titanic.loc[titanic[<span class="string">'Embarked'</span>] == <span class="string">'S'</span>, <span class="string">'Embarked'</span>] = <span class="number">0</span></span><br><span class="line">titanic.loc[titanic[<span class="string">'Embarked'</span>] == <span class="string">'C'</span>, <span class="string">'Embarked'</span>] = <span class="number">1</span></span><br><span class="line">titanic.loc[titanic[<span class="string">'Embarked'</span>] == <span class="string">'Q'</span>, <span class="string">'Embarked'</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">titanic.head()</span><br></pre></td></tr></table></figure><h3 id="线性回归-步骤"><a href="#线性回归-步骤" class="headerlink" title="线性回归 步骤"></a>线性回归 步骤</h3><ol><li>观察数据，填充缺失值，改变数据形式（数据映射）</li><li>使用交叉验证减少过拟合风险</li><li>使用线性回归算法计算预测值</li><li>确定阈值，计算精度</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 线性回归</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> KFold</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要使用的特征 船仓等级、性别、年龄、兄弟姐妹人数、老人孩子人数、船票价格、上船位置</span></span><br><span class="line">predictors = [<span class="string">'Pclass'</span>, <span class="string">'Sex'</span>, <span class="string">'Age'</span>, <span class="string">'SibSp'</span>, <span class="string">'Parch'</span>, <span class="string">'Fare'</span>, <span class="string">'Embarked'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建线性回归</span></span><br><span class="line">alg = LinearRegression()</span><br><span class="line">kf = KFold(titanic.shape[<span class="number">0</span>], n_folds=<span class="number">3</span>, random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">predictions0 = []</span><br><span class="line"><span class="keyword">for</span> train, test <span class="keyword">in</span> kf:</span><br><span class="line">    <span class="comment"># print (train.shape, test.shape)</span></span><br><span class="line">    train_predictors = titanic.loc[train, predictors]</span><br><span class="line">    train_targets = titanic.loc[train, [<span class="string">'Survived'</span>]]</span><br><span class="line">    <span class="keyword">print</span> (train_predictors.shape, train_targets.shape)</span><br><span class="line">    test_features = titanic.loc[test, predictors]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 训练 拟合数据 使用交叉验证拆分出来的训练集</span></span><br><span class="line">    alg.fit(train_predictors, train_targets)</span><br><span class="line">    <span class="comment"># 验证 使用交叉验证拆分出来的验证集</span></span><br><span class="line">    test_predictions = alg.predict(test_features)</span><br><span class="line">    </span><br><span class="line">    predictions0.append(test_predictions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三组预测值</span></span><br><span class="line"><span class="keyword">print</span> (len(predictions0), <span class="string">'\n\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 设定一个阈值 大于阈值表示获救 小于阈值表示未获救</span></span><br><span class="line">predictions = np.concatenate(predictions0, axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">predictions[predictions &gt;  <span class="number">0.5</span>] = <span class="number">1</span></span><br><span class="line">predictions[predictions &lt;= <span class="number">0.5</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (type(predictions), type(titanic[<span class="string">'Survived'</span>].values))</span><br><span class="line"><span class="keyword">print</span> (predictions.shape,titanic[<span class="string">'Survived'</span>].values.reshape(<span class="number">-1</span>, <span class="number">1</span>).shape)</span><br><span class="line"></span><br><span class="line">accuracy = len(predictions[predictions == titanic[<span class="string">'Survived'</span>].values.reshape(<span class="number">-1</span>, <span class="number">1</span>)]) / len(predictions)</span><br><span class="line"><span class="keyword">print</span> (accuracy)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机森林</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> cross_validation</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"></span><br><span class="line">predictors = [<span class="string">'Pclass'</span>, <span class="string">'Sex'</span>, <span class="string">'Age'</span>, <span class="string">'SibSp'</span>, <span class="string">'Parch'</span>, <span class="string">'Fare'</span>, <span class="string">'Embarked'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造随机森林</span></span><br><span class="line"><span class="comment"># n_estimators：构造的树个数  min_samples_split：最小切分点  min_samples_leaf：叶子节点最小个数</span></span><br><span class="line">alg = RandomForestClassifier(random_state=<span class="number">1</span>, n_estimators=<span class="number">10</span>, min_samples_split=<span class="number">2</span>, min_samples_leaf=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 交叉验证</span></span><br><span class="line">kf = cross_validation.KFold(titanic.shape[<span class="number">0</span>], n_folds=<span class="number">3</span>, random_state=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 准确率</span></span><br><span class="line">scores = cross_validation.cross_val_score(alg, titanic[predictors], titanic[<span class="string">'Survived'</span>], cv=kf)</span><br><span class="line"><span class="comment"># 平均准确率</span></span><br><span class="line"><span class="keyword">print</span> (scores.mean())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机森林调优： 修改参数 </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&gt; RandomForestClassifier参数：</span></span><br><span class="line"><span class="string">1. max_features:随机森林允许单个决策树使用特征的最大数量, 增加max_features一般能提高模型的性能,同时降低算法的速度</span></span><br><span class="line"><span class="string">2. n_estimators:在利用最大投票数或平均值来预测之前，想要建立子树的数量。较多的子树可以让模型有更好的性能，但同时让你的代码变慢</span></span><br><span class="line"><span class="string">3. min_sample_leaf:最小样本叶片大小</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#1 构建随机森林模型(分类器)</span></span><br><span class="line">alg = RandomForestClassifier(random_state=<span class="number">1</span>, n_estimators=<span class="number">50</span>, min_samples_split=<span class="number">4</span>, min_samples_leaf=<span class="number">10</span>)</span><br><span class="line"><span class="comment">#2 构建交叉验证</span></span><br><span class="line">kf = cross_validation.KFold(titanic.shape[<span class="number">0</span>], n_folds=<span class="number">3</span>, random_state=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&gt; cross_validation.cross_val_score参数：</span></span><br><span class="line"><span class="string">1. alg:分类器，可以是任何的分类器，比如支持向量机分类器。alg = svm.SVC(kernel='linear', C=1)</span></span><br><span class="line"><span class="string">2. cv：交叉验证（cross validation）方法，如果cv是一个int数字的话，并且如果提供了raw target参数，那么就代表使用StratifiedKFold分类方式，如果没有提供raw target参数，那么就代表使用KFold分类方式。</span></span><br><span class="line"><span class="string">3. raw data,raw target：验证使用的数据（feature以及label）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4. 返回值：对于每次不同的的划分raw data时，在test data（验证集）上得到的分类的准确率</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#3 进行交叉验证</span></span><br><span class="line">scores = cross_validation.cross_val_score(alg, titanic[predictors], titanic[<span class="string">'Survived'</span>], cv=kf)</span><br><span class="line"><span class="keyword">print</span> (len(scores), <span class="string">'-----'</span>, scores.mean(), <span class="string">'-----'</span>, scores)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机森林调优： 添加特征</span></span><br><span class="line">titanic[<span class="string">'FamilySize'</span>] = titanic[<span class="string">'SibSp'</span>] + titanic[<span class="string">'Parch'</span>]</span><br><span class="line">titanic[<span class="string">'NameLength'</span>] = titanic[<span class="string">'Name'</span>].apply(<span class="keyword">lambda</span> x: len(x))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 特征重要程度</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectKBest,f_classif</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">predictors = [<span class="string">'Pclass'</span>, <span class="string">'Sex'</span>, <span class="string">'Age'</span>, <span class="string">'SibSp'</span>, <span class="string">'Parch'</span>, <span class="string">'Fare'</span>, <span class="string">'Embarked'</span>, <span class="string">'FamilySize'</span>, <span class="string">'NameLength'</span>]</span><br></pre></td></tr></table></figure><h3 id="Univariate-feature-selection：单变量的特征选择"><a href="#Univariate-feature-selection：单变量的特征选择" class="headerlink" title="Univariate feature selection：单变量的特征选择"></a>Univariate feature selection：单变量的特征选择</h3><p>单变量特征选择的原理是分别单独的计算每个变量的某个统计指标，根据该指标来判断哪些指标重要。剔除那些不重要的指标。</p><p>sklearn.feature_selection模块中主要有以下几个方法：</p><blockquote><p>SelectKBest和SelectPercentile比较相似，前者选择排名排在前n个的变量，后者选择排名排在前n%的变量。而他们通过什么指标来给变量排名呢？这需要二外的指定。</p></blockquote><blockquote><p>对于regression问题，可以使用f_regression指标。对于classification问题，可以使用chi2或者f_classif变量。</p></blockquote><p><em>使用的例子：</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_selectionimport SelectPercentile, f_classif</span><br><span class="line">selector =SelectPercentile(f_classif, percentile=<span class="number">10</span>)</span><br></pre></td></tr></table></figure></p><h3 id="Recursive-feature-elimination：循环特征选择"><a href="#Recursive-feature-elimination：循环特征选择" class="headerlink" title="Recursive feature elimination：循环特征选择"></a>Recursive feature elimination：循环特征选择</h3><p>不单独的检验某个变量的价值，而是将其聚集在一起检验。它的基本思想是，对于一个数量为d的feature的集合，他的所有的子集的个数是2的d次方减1（包含空集）。指定一个外部的学习算法，比如SVM之类的。通过该算法计算所有子集的validationerror。选择error最小的那个子集作为所挑选的特征。</p><p>由以下两个方法实现：sklearn.feature_selection.RFE，sklearn.feature_selection.RFECV</p><h3 id="L1-based-featureselection："><a href="#L1-based-featureselection：" class="headerlink" title="L1-based featureselection："></a>L1-based featureselection：</h3><p>该思路的原理是：在linearregression模型中，有的时候会得到sparsesolution。意思是说很多变量前面的系数都等于0或者接近于0。这说明这些变量不重要，那么可以将这些变量去除。</p><h3 id="Tree-based-featureselection：决策树特征选择"><a href="#Tree-based-featureselection：决策树特征选择" class="headerlink" title="Tree-based featureselection：决策树特征选择"></a>Tree-based featureselection：决策树特征选择</h3><p>基于决策树算法做出特征选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">selector = SelectKBest(f_classif, k=<span class="number">5</span>)</span><br><span class="line">selector.fit(titanic[predictors], titanic[<span class="string">'Survived'</span>])</span><br><span class="line"></span><br><span class="line">scores = -np.log10(selector.pvalues_)</span><br><span class="line"><span class="keyword">print</span> (scores)</span><br><span class="line"></span><br><span class="line">plt.bar(range(len(predictors)), scores)</span><br><span class="line">plt.xticks(range(len(predictors)), predictors, rotation=<span class="string">'vertical'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多种算法集成预测</span></span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> GradientBoostingClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个算法集成到一起使用</span></span><br><span class="line">algorithms = [</span><br><span class="line">    [GradientBoostingClassifier(random_state=<span class="number">1</span>, n_estimators=<span class="number">25</span>, max_depth=<span class="number">3</span>),  [<span class="string">'Pclass'</span>, <span class="string">'Sex'</span>, <span class="string">'Age'</span>, <span class="string">'Fare'</span>, <span class="string">'Embarked'</span>, <span class="string">'FamilySize'</span>]],</span><br><span class="line">     [LogisticRegression(random_state=<span class="number">1</span>), [<span class="string">'Pclass'</span>, <span class="string">'Sex'</span>, <span class="string">'Age'</span>, <span class="string">'Fare'</span>, <span class="string">'Embarked'</span>]]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">kf = KFold(titanic.shape[<span class="number">0</span>], n_folds=<span class="number">3</span>, random_state=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">predictions = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个算法分别预测</span></span><br><span class="line"><span class="keyword">for</span> train, test <span class="keyword">in</span> kf:</span><br><span class="line">    train_target = titanic.loc[train, [<span class="string">'Survived'</span>]]</span><br><span class="line">    full_test_predictions = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 循环分类算法，获得不同算法求得的概率</span></span><br><span class="line">    <span class="keyword">for</span> alg, predictors <span class="keyword">in</span> algorithms:</span><br><span class="line">        <span class="comment"># alg：分类算法   predictors：特征</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用训练集 拟合数据</span></span><br><span class="line">        alg.fit(titanic.loc[train, predictors], train_target)</span><br><span class="line">        <span class="comment"># 使用验证集 计算 (这里 直接取预测的概率的第二个值--&gt;[:, 1])</span></span><br><span class="line">        test_predictions = alg.predict_proba(titanic.loc[test, predictors].astype(float))[:, <span class="number">1</span>]</span><br><span class="line">        full_test_predictions.append(test_predictions)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用不同的分类算法之后计算平均概率</span></span><br><span class="line">    test_predictions = (full_test_predictions[<span class="number">0</span>] + full_test_predictions[<span class="number">1</span>]) / <span class="number">2</span></span><br><span class="line">    test_predictions[test_predictions &lt;= <span class="number">0.5</span>] = <span class="number">0</span></span><br><span class="line">    test_predictions[test_predictions &gt;  <span class="number">0.5</span>] = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    predictions.append(test_predictions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得的分类结果</span></span><br><span class="line">predictions = np.concatenate(predictions, axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算精确度</span></span><br><span class="line">accuracy = len(predictions[predictions == titanic[<span class="string">'Survived'</span>]]) / len(predictions)</span><br><span class="line"><span class="keyword">print</span> (accuracy)</span><br></pre></td></tr></table></figure><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于使用sklearn进行数据预处理-归一化/标准化/正则化(转)</title>
      <link href="/2020/01/15/2018031202/"/>
      <url>/2020/01/15/2018031202/</url>
      
        <content type="html"><![CDATA[<h2 id="一、标准化（Z-Score），或者去除均值和方差缩放"><a href="#一、标准化（Z-Score），或者去除均值和方差缩放" class="headerlink" title="一、标准化（Z-Score），或者去除均值和方差缩放"></a>一、标准化（Z-Score），或者去除均值和方差缩放</h2><p>公式为：(X-mean)/std  计算时对每个属性/每列分别进行。</p><p>将数据按期属性（按列进行）减去其均值，并处以其方差。得到的结果是，对于每个属性/每列来说所有数据都聚集在0附近，方差为1。</p><p>实现时，有两种不同的方式：</p><ul><li>使用sklearn.preprocessing.scale()函数，可以直接将给定数据进行标准化。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X = np.array([[ <span class="number">1.</span>, <span class="number">-1.</span>,  <span class="number">2.</span>],</span><br><span class="line"><span class="meta">... </span>              [ <span class="number">2.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</span><br><span class="line"><span class="meta">... </span>              [ <span class="number">0.</span>,  <span class="number">1.</span>, <span class="number">-1.</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X_scaled = preprocessing.scale(X)</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X_scaled                                          </span><br><span class="line">array([[ <span class="number">0.</span>  ..., <span class="number">-1.22</span>...,  <span class="number">1.33</span>...],</span><br><span class="line">       [ <span class="number">1.22</span>...,  <span class="number">0.</span>  ..., <span class="number">-0.26</span>...],</span><br><span class="line">       [<span class="number">-1.22</span>...,  <span class="number">1.22</span>..., <span class="number">-1.06</span>...]])</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt;<span class="comment">#处理后数据的均值和方差</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X_scaled.mean(axis=<span class="number">0</span>)</span><br><span class="line">array([ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>])</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X_scaled.std(axis=<span class="number">0</span>)</span><br><span class="line">array([ <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>])</span><br></pre></td></tr></table></figure><ul><li>使用sklearn.preprocessing.StandardScaler类，使用该类的好处在于可以保存训练集中的参数（均值、方差）直接使用其对象转换测试集数据。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>scaler = preprocessing.StandardScaler().fit(X)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scaler</span><br><span class="line">StandardScaler(copy=<span class="literal">True</span>, with_mean=<span class="literal">True</span>, with_std=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scaler.mean_                                      </span><br><span class="line">array([ <span class="number">1.</span> ...,  <span class="number">0.</span> ...,  <span class="number">0.33</span>...])</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scaler.std_                                       </span><br><span class="line">array([ <span class="number">0.81</span>...,  <span class="number">0.81</span>...,  <span class="number">1.24</span>...])</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scaler.transform(X)                               </span><br><span class="line">array([[ <span class="number">0.</span>  ..., <span class="number">-1.22</span>...,  <span class="number">1.33</span>...],</span><br><span class="line">       [ <span class="number">1.22</span>...,  <span class="number">0.</span>  ..., <span class="number">-0.26</span>...],</span><br><span class="line">       [<span class="number">-1.22</span>...,  <span class="number">1.22</span>..., <span class="number">-1.06</span>...]])</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt;<span class="comment">#可以直接使用训练集对测试集数据进行转换</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scaler.transform([[<span class="number">-1.</span>,  <span class="number">1.</span>, <span class="number">0.</span>]])                </span><br><span class="line">array([[<span class="number">-2.44</span>...,  <span class="number">1.22</span>..., <span class="number">-0.26</span>...]])</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、将属性缩放到一个指定范围"><a href="#二、将属性缩放到一个指定范围" class="headerlink" title="二、将属性缩放到一个指定范围"></a>二、将属性缩放到一个指定范围</h2><p>除了上述介绍的方法之外，另一种常用的方法是将属性缩放到一个指定的最大和最小值（通常是1-0）之间，这可以通过preprocessing.MinMaxScaler类实现。</p><p>使用这种方法的目的包括：</p><ol><li><p>对于方差非常小的属性可以增强其稳定性。</p></li><li><p>维持稀疏矩阵中为0的条目</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>X_train = np.array([[ <span class="number">1.</span>, <span class="number">-1.</span>,  <span class="number">2.</span>],</span><br><span class="line"><span class="meta">... </span>                    [ <span class="number">2.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</span><br><span class="line"><span class="meta">... </span>                    [ <span class="number">0.</span>,  <span class="number">1.</span>, <span class="number">-1.</span>]])</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>min_max_scaler = preprocessing.MinMaxScaler()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X_train_minmax = min_max_scaler.fit_transform(X_train)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X_train_minmax</span><br><span class="line">array([[ <span class="number">0.5</span>       ,  <span class="number">0.</span>        ,  <span class="number">1.</span>        ],</span><br><span class="line">       [ <span class="number">1.</span>        ,  <span class="number">0.5</span>       ,  <span class="number">0.33333333</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">1.</span>        ,  <span class="number">0.</span>        ]])</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#将相同的缩放应用到测试集数据中</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X_test = np.array([[ <span class="number">-3.</span>, <span class="number">-1.</span>,  <span class="number">4.</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X_test_minmax = min_max_scaler.transform(X_test)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X_test_minmax</span><br><span class="line">array([[<span class="number">-1.5</span>       ,  <span class="number">0.</span>        ,  <span class="number">1.66666667</span>]])</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#缩放因子等属性</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>min_max_scaler.scale_                             </span><br><span class="line">array([ <span class="number">0.5</span>       ,  <span class="number">0.5</span>       ,  <span class="number">0.33</span>...])</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>min_max_scaler.min_                               </span><br><span class="line">array([ <span class="number">0.</span>        ,  <span class="number">0.5</span>       ,  <span class="number">0.33</span>...])</span><br></pre></td></tr></table></figure><p>当然，在构造类对象的时候也可以直接指定最大最小值的范围：feature_range=(min, max)，此时应用的公式变为：</p><p>X_std=(X-X.min(axis=0))/(X.max(axis=0)-X.min(axis=0))</p><p>X_scaled=X_std/(max-min)+min</p><h2 id="三、正则化（Normalization）"><a href="#三、正则化（Normalization）" class="headerlink" title="三、正则化（Normalization）"></a>三、正则化（Normalization）</h2><p>正则化的过程是将每个样本缩放到单位范数（每个样本的范数为1），如果后面要使用如二次型（点积）或者其它核方法计算两个样本之间的相似性这个方法会很有用。</p><p>Normalization主要思想是对每个样本计算其p-范数，然后对该样本中每个元素除以该范数，这样处理的结果是使得每个处理后样本的p-范数（l1-norm,l2-norm）等于1。</p><pre><code>p-范数的计算公式：||X||p=(|x1|^p+|x2|^p+...+|xn|^p)^1/p</code></pre><p>该方法主要应用于文本分类和聚类中。例如，对于两个TF-IDF向量的l2-norm进行点积，就可以得到这两个向量的余弦相似性。</p><ol><li>可以使用preprocessing.normalize()函数对指定数据进行转换：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>X = [[ <span class="number">1.</span>, <span class="number">-1.</span>,  <span class="number">2.</span>],</span><br><span class="line"><span class="meta">... </span>     [ <span class="number">2.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</span><br><span class="line"><span class="meta">... </span>     [ <span class="number">0.</span>,  <span class="number">1.</span>, <span class="number">-1.</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X_normalized = preprocessing.normalize(X, norm=<span class="string">'l2'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X_normalized                                      </span><br><span class="line">array([[ <span class="number">0.40</span>..., <span class="number">-0.40</span>...,  <span class="number">0.81</span>...],</span><br><span class="line">       [ <span class="number">1.</span>  ...,  <span class="number">0.</span>  ...,  <span class="number">0.</span>  ...],</span><br><span class="line">       [ <span class="number">0.</span>  ...,  <span class="number">0.70</span>..., <span class="number">-0.70</span>...]])</span><br></pre></td></tr></table></figure><ol start="2"><li>可以使用processing.Normalizer()类实现对训练集和测试集的拟合和转换：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>normalizer = preprocessing.Normalizer().fit(X)  <span class="comment"># fit does nothing</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>normalizer</span><br><span class="line">Normalizer(copy=<span class="literal">True</span>, norm=<span class="string">'l2'</span>)</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>normalizer.transform(X)                            </span><br><span class="line">array([[ <span class="number">0.40</span>..., <span class="number">-0.40</span>...,  <span class="number">0.81</span>...],</span><br><span class="line">       [ <span class="number">1.</span>  ...,  <span class="number">0.</span>  ...,  <span class="number">0.</span>  ...],</span><br><span class="line">       [ <span class="number">0.</span>  ...,  <span class="number">0.70</span>..., <span class="number">-0.70</span>...]])</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>normalizer.transform([[<span class="number">-1.</span>,  <span class="number">1.</span>, <span class="number">0.</span>]])             </span><br><span class="line">array([[<span class="number">-0.70</span>...,  <span class="number">0.70</span>...,  <span class="number">0.</span>  ...]])</span><br></pre></td></tr></table></figure><p><em>补充：</em></p><img src="/2020/01/15/2018031202/091414004623860.png" title="如图 alt:图片说明 extend:?imageView2/2/w/800"><p>转载来自<a href="https://www.cnblogs.com/chaosimple/p/4153167.html" target="_blank" rel="noopener">这里</a></p><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scikit-learn数据预处理fit_transform()与transform()的区别(转)</title>
      <link href="/2020/01/15/2018031201/"/>
      <url>/2020/01/15/2018031201/</url>
      
        <content type="html"><![CDATA[<h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>scikit-learn中fit_transform()与transform()到底有什么区别，能不能混用？</p><a id="more"></a><ul><li>二者的功能都是对数据进行某种统一处理（比如标准化~N(0,1)，将数据缩放(映射)到某个固定区间，归一化，正则化等）</li><li>fit_transform(partData)对部分数据先拟合fit，找到该part的整体指标，如均值、方差、最大值最小值等等（根据具体转换的目的），然后对该partData进行转换transform，从而实现数据的标准化、归一化等等。。</li><li>根据对之前部分fit的整体指标，对剩余的数据（restData）使用同样的均值、方差、最大最小值等指标进行转换transform(restData)，从而保证part、rest处理方式相同。</li><li>必须先用fit_transform(partData)，之后再transform(restData)</li><li>如果直接transform(partData)，程序会报错</li><li>如果fit_transfrom(partData)后，使用fit_transform(restData)而不用transform(restData)，虽然也能归一化，但是两个结果不是在同一个“标准”下的，具有明显差异。</li></ul><h3 id="实验："><a href="#实验：" class="headerlink" title="实验："></a>实验：</h3><p>使用preprocessing.MinMaxScaler()对象对数据进行归一化。原理是：(x-xMin)/(xMax - xMin)，从而将所有数据映射到【0,1】区间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"></span><br><span class="line">data = np.array(np.random.randint(<span class="number">-100</span>,<span class="number">100</span>,<span class="number">24</span>).reshape(<span class="number">6</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">data</span><br><span class="line">Out[<span class="number">55</span>]: </span><br><span class="line">array([[ <span class="number">68</span>, <span class="number">-63</span>, <span class="number">-31</span>, <span class="number">-10</span>],</span><br><span class="line">       [ <span class="number">49</span>, <span class="number">-49</span>,  <span class="number">73</span>,  <span class="number">18</span>],</span><br><span class="line">       [ <span class="number">46</span>,  <span class="number">65</span>,  <span class="number">75</span>, <span class="number">-78</span>],</span><br><span class="line">       [<span class="number">-72</span>,  <span class="number">30</span>,  <span class="number">90</span>, <span class="number">-80</span>],</span><br><span class="line">       [ <span class="number">95</span>, <span class="number">-88</span>,  <span class="number">79</span>, <span class="number">-49</span>],</span><br><span class="line">       [ <span class="number">34</span>, <span class="number">-81</span>,  <span class="number">57</span>,  <span class="number">83</span>]])</span><br><span class="line"></span><br><span class="line">train = data[:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">test = data[<span class="number">4</span>:]</span><br><span class="line"></span><br><span class="line">train</span><br><span class="line">Out[<span class="number">58</span>]: </span><br><span class="line">array([[ <span class="number">68</span>, <span class="number">-63</span>, <span class="number">-31</span>, <span class="number">-10</span>],</span><br><span class="line">       [ <span class="number">49</span>, <span class="number">-49</span>,  <span class="number">73</span>,  <span class="number">18</span>],</span><br><span class="line">       [ <span class="number">46</span>,  <span class="number">65</span>,  <span class="number">75</span>, <span class="number">-78</span>],</span><br><span class="line">       [<span class="number">-72</span>,  <span class="number">30</span>,  <span class="number">90</span>, <span class="number">-80</span>]])</span><br><span class="line"></span><br><span class="line">test</span><br><span class="line">Out[<span class="number">59</span>]: </span><br><span class="line">array([[ <span class="number">95</span>, <span class="number">-88</span>,  <span class="number">79</span>, <span class="number">-49</span>],</span><br><span class="line">       [ <span class="number">34</span>, <span class="number">-81</span>,  <span class="number">57</span>,  <span class="number">83</span>]])</span><br><span class="line"></span><br><span class="line">minmaxTransformer = MinMaxScaler(feature_range=(<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#先对train用fit_transformer(),包括拟合fit找到xMin,xMax,再transform归一化</span></span><br><span class="line">train_transformer = minmaxTransformer.fit_transform(train)</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据train集合的xMin，xMax,对test集合进行归一化transform.</span></span><br><span class="line"><span class="comment">#(如果test中的某个值比之前的xMin还要小，依然用原来的xMin；同理如果test中的某个值比之前的xMax还要大，依然用原来的xMax.</span></span><br><span class="line"><span class="comment">#所以，对test集合用同样的xMin和xMax，**有可能不再映射到【0,1】**)</span></span><br><span class="line">test_transformer = minmaxTransformer.transform(test)</span><br><span class="line"></span><br><span class="line">train_transformer</span><br><span class="line">Out[<span class="number">64</span>]: </span><br><span class="line">array([[ <span class="number">1.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.71428571</span>],</span><br><span class="line">       [ <span class="number">0.86428571</span>,  <span class="number">0.109375</span>  ,  <span class="number">0.85950413</span>,  <span class="number">1.</span>        ],</span><br><span class="line">       [ <span class="number">0.84285714</span>,  <span class="number">1.</span>        ,  <span class="number">0.87603306</span>,  <span class="number">0.02040816</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.7265625</span> ,  <span class="number">1.</span>        ,  <span class="number">0.</span>        ]])</span><br><span class="line"></span><br><span class="line">test_transformer</span><br><span class="line">Out[<span class="number">65</span>]: </span><br><span class="line">array([[ <span class="number">1.19285714</span>, <span class="number">-0.1953125</span> ,  <span class="number">0.90909091</span>,  <span class="number">0.31632653</span>],</span><br><span class="line">       [ <span class="number">0.75714286</span>, <span class="number">-0.140625</span>  ,  <span class="number">0.72727273</span>,  <span class="number">1.66326531</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果少了fit环节，直接transform(partData),则会报错</span></span><br><span class="line"></span><br><span class="line">minmaxTransformer = MinMaxScaler(feature_range=(<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">train_transformer2 = minmaxTransformer.transform(train)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"></span><br><span class="line">  File <span class="string">"&lt;ipython-input-68-a2aeaf2132be&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    train_transformer2 = minmaxTransformer.transform(train)</span><br><span class="line"></span><br><span class="line">  File <span class="string">"D:\Program Files\Anaconda3\lib\site-packages\sklearn\preprocessing\data.py"</span>, line <span class="number">352</span>, <span class="keyword">in</span> transform</span><br><span class="line">    check_is_fitted(self, <span class="string">'scale_'</span>)</span><br><span class="line"></span><br><span class="line">  File <span class="string">"D:\Program Files\Anaconda3\lib\site-packages\sklearn\utils\validation.py"</span>, line <span class="number">690</span>, <span class="keyword">in</span> check_is_fitted</span><br><span class="line">    <span class="keyword">raise</span> _NotFittedError(msg % &#123;<span class="string">'name'</span>: type(estimator).__name__&#125;)</span><br><span class="line"></span><br><span class="line">NotFittedError: This MinMaxScaler instance <span class="keyword">is</span> <span class="keyword">not</span> fitted yet. Call <span class="string">'fit'</span> <span class="keyword">with</span> appropriate arguments before using this method.</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果对test也用fit_transform(),则结果跟之前不一样。对于许多机器学习算法来说，对于train和test的处理应该统一。</span></span><br><span class="line"></span><br><span class="line">test_transformer2 = minmaxTransformer.fit_transform(test)</span><br><span class="line"></span><br><span class="line">test_transformer2</span><br><span class="line">Out[<span class="number">71</span>]: </span><br><span class="line">array([[ <span class="number">1.</span>,  <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">0.</span>],</span><br><span class="line">       [ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">0.</span>,  <span class="number">1.</span>]])</span><br><span class="line"></span><br><span class="line">test_transformer</span><br><span class="line">Out[<span class="number">72</span>]: </span><br><span class="line">array([[ <span class="number">1.19285714</span>, <span class="number">-0.1953125</span> ,  <span class="number">0.90909091</span>,  <span class="number">0.31632653</span>],</span><br><span class="line">       [ <span class="number">0.75714286</span>, <span class="number">-0.140625</span>  ,  <span class="number">0.72727273</span>,  <span class="number">1.66326531</span>]])</span><br></pre></td></tr></table></figure><p>转载来自<a href="http://blog.csdn.net/anecdotegyb/article/details/74857055" target="_blank" rel="noopener">这里</a></p><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建逻辑回归模型实例</title>
      <link href="/2020/01/15/2018030701/"/>
      <url>/2020/01/15/2018030701/</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h1><blockquote><p>逻辑回归是应用非常广泛的一个分类机器学习算法，它将数据拟合到一个logit函数(或者叫做logistic函数)中，从而能够完成对事件发生的概率进行预测。</p></blockquote><h1 id="构建逻辑回归模型步骤："><a href="#构建逻辑回归模型步骤：" class="headerlink" title="构建逻辑回归模型步骤："></a>构建逻辑回归模型步骤：</h1><ul><li>导入数据</li><li>预处理数据</li><li>对不平衡的数据进行下采样（或者过采样）处理</li><li>把处理之后的数据进行切分，切分为训训练集和测试集</li><li>对训练集进行交叉验证，同时寻找最佳的正则化参数以减少过拟合</li><li>使用最佳的正则化参数对处理之后的数据进行训练并预测，观察召回率和精确率</li><li>使用最佳的正则化参数对处理之后的数据进行训练并预测，观察召回率和精确率</li><li>修改阈值以获得更好的召回率和精确率</li></ul><h2 id="1-数据与任务"><a href="#1-数据与任务" class="headerlink" title="1. 数据与任务"></a>1. 数据与任务</h2><h3 id="信用卡欺诈数据"><a href="#信用卡欺诈数据" class="headerlink" title="信用卡欺诈数据"></a>信用卡欺诈数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">"creditcard.csv"</span>)</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><img src="/2020/01/15/2018030701/20180307115819.png" title="如图"><h3 id="要使用逻辑回归对数据进行建模-任务：二分类，-把数据分为有欺诈和无欺诈的两种数据"><a href="#要使用逻辑回归对数据进行建模-任务：二分类，-把数据分为有欺诈和无欺诈的两种数据" class="headerlink" title="要使用逻辑回归对数据进行建模 任务：二分类， 把数据分为有欺诈和无欺诈的两种数据"></a>要使用逻辑回归对数据进行建模 任务：二分类， 把数据分为有欺诈和无欺诈的两种数据</h3><h2 id="2-使用sklearn进行数据预处理"><a href="#2-使用sklearn进行数据预处理" class="headerlink" title="2. 使用sklearn进行数据预处理"></a>2. 使用sklearn进行数据预处理</h2><blockquote><p>公式为：(X-mean)/std  计算时对每个属性/每列分别进行。</p></blockquote><p>Standardization标准化:将特征数据的分布调整成标准正太分布，也叫高斯分布，也就是使得数据的均值维0，方差为1</p><p>标准化的原因在于如果有些特征的方差过大，则会主导目标函数从而使参数估计器无法正确地去学习其他特征。</p><p>标准化的过程为两步：去均值的中心化（均值变为0）；方差的规模化（方差变为1）。</p><p>在sklearn.preprocessing中提供了一个scale的方法，可以实现以上功能。如下面所示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([[<span class="number">1.</span>, <span class="number">-1.</span>, <span class="number">2.</span>],</span><br><span class="line">              [<span class="number">2.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">              [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">-1.</span>]])</span><br><span class="line"><span class="comment"># 将每一列特征标准化为标准正太分布，注意，标准化是针对每一列而言的</span></span><br><span class="line">x_scale = preprocessing.scale(x)</span><br><span class="line">x_scale</span><br></pre></td></tr></table></figure><p>preprocessing这个模块还提供了一个实用类StandarScaler，它可以在训练数据集上做了标准转换操作之后，把相同的转换应用到测试训练集中。<br>可以对训练数据，测试数据应用相同的转换，以后有新的数据进来也可以直接调用，不用再重新把数据放在一起再计算一次了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用fit方法，根据已有的训练数据创建一个标准化的转换器</span></span><br><span class="line">scaler = preprocessing.StandardScaler().fit(x)</span><br><span class="line"></span><br><span class="line">scaler</span><br><span class="line"></span><br><span class="line">StandardScaler(copy=<span class="literal">True</span>, with_mean=<span class="literal">True</span>, with_std=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用上面这个转换器去转换训练数据x,调用transform方法</span></span><br><span class="line">scaler.transform(x)</span><br></pre></td></tr></table></figure><p><em>StandardScaler()中可以传入两个参数：with_mean,with_std.这两个都是布尔型的参数，默认情况下都是true,但也可以自定义成false.即不要均值中心化或者不要方差规模化为1.</em></p><h3 id="1-处理数据-数据下采样"><a href="#1-处理数据-数据下采样" class="headerlink" title="1. 处理数据 数据下采样"></a>1. 处理数据 数据下采样</h3><h4 id="1-1-预处理数据-修改列”Amount”数据分布"><a href="#1-1-预处理数据-修改列”Amount”数据分布" class="headerlink" title="1.1  预处理数据,修改列”Amount”数据分布"></a>1.1  预处理数据,修改列”Amount”数据分布</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入预处理sklearn中预处理模块的标准化模块</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'Amount'</span> <span class="keyword">in</span> data.columns:</span><br><span class="line">    <span class="comment"># 转化特征为新的特征</span></span><br><span class="line">    data[<span class="string">'normAount'</span>] = StandardScaler().fit_transform(data[<span class="string">'Amount'</span>].reshape(<span class="number">-1</span>, <span class="number">1</span>))  <span class="comment"># reshape:改变数组的形状,参数为改变后的行列数 </span></span><br><span class="line"><span class="comment"># fit_transform：对数据进行变换 矩阵旋转：-1表示自动识别 根据另一个矩阵列（行）数确定本行（列）数</span></span><br></pre></td></tr></table></figure><h3 id="1-2-数据处理-去除不需要的特征"><a href="#1-2-数据处理-去除不需要的特征" class="headerlink" title="1.2  数据处理,去除不需要的特征"></a>1.2  数据处理,去除不需要的特征</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 去掉两个没用的特征（列） axis=1表示对每一行去做这个操作，axis=0表示对每一列做相同的这个操作</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'Time'</span>) <span class="keyword">in</span> data.columns:</span><br><span class="line">    data = data.drop([<span class="string">'Time'</span>], axis=<span class="number">1</span>) </span><br><span class="line"><span class="keyword">if</span> (<span class="string">'Amount'</span>) <span class="keyword">in</span> data.columns:</span><br><span class="line">    data = data.drop([<span class="string">'Amount'</span>], axis=<span class="number">1</span>) </span><br><span class="line">print(data.columns, len(data.columns))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.2.1 数据图形化展示(1的数据太少索引看上去没有)</span></span><br><span class="line">count_classes = pd.value_counts(data[<span class="string">'Class'</span>], sort=<span class="literal">True</span>).sort_index() <span class="comment"># 画图显示按某列分类之后的数据数量比例</span></span><br><span class="line">count_classes.plot(kind = <span class="string">'bar'</span>) <span class="comment"># bar：条形图</span></span><br><span class="line">plt.xlabel(<span class="string">"Class"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Frequency"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.2.2 原数据特征和分类</span></span><br><span class="line">X = data.loc[:, data.columns != <span class="string">"Class"</span>]</span><br><span class="line">y = data.loc[:, data.columns == <span class="string">'Class'</span>]</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"SHAPE"</span>, X.shape, y.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Class为0的数量远远大于1的数据，需要使数据个数相近 解决方案： 1.下采样（多的数据抽取部分） 2.过采样（少的数据生成更多）</span></span><br></pre></td></tr></table></figure><img src="/2020/01/15/2018030701/20180307120121.png" title="如图"><h2 id="3-下采样"><a href="#3-下采样" class="headerlink" title="3.下采样"></a>3.下采样</h2><blockquote><p>把数据相对多的减少,可减少为和数据少的数量相同的数量</p></blockquote><h3 id="1-3-区分正常数据和异常数据-通过特征’Class’区分"><a href="#1-3-区分正常数据和异常数据-通过特征’Class’区分" class="headerlink" title="1.3  区分正常数据和异常数据: 通过特征’Class’区分"></a>1.3  区分正常数据和异常数据: 通过特征’Class’区分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.3.1 异常数据-信息</span></span><br><span class="line">number_records = data[data.Class == <span class="number">1</span>]</span><br><span class="line"><span class="comment"># 1.3.2 异常数据个数</span></span><br><span class="line">number_records_fraud = len(number_records)</span><br><span class="line"><span class="comment"># 1.3.3 异常数据索引</span></span><br><span class="line">frand_indices = np.array(number_records.index)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"异常样本索引 有&#123;&#125;个"</span>.format(number_records_fraud), frand_indices[:<span class="number">10</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.3.4 正常数据-索引</span></span><br><span class="line">normal_indices = data[data.Class == <span class="number">0</span>].index</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"正常样本索引 有&#123;&#125;个"</span>.format(len(normal_indices)), normal_indices[<span class="number">-10</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;所有数据 正常异常比 "</span>, len(normal_indices), <span class="string">'\t'</span>, number_records_fraud)</span><br><span class="line">print(<span class="string">"**************"</span>)</span><br></pre></td></tr></table></figure><h3 id="1-4-下采样处理数据-把多的一方数据进行随机减少到与少的一方相同"><a href="#1-4-下采样处理数据-把多的一方数据进行随机减少到与少的一方相同" class="headerlink" title="1.4 下采样处理数据 把多的一方数据进行随机减少到与少的一方相同"></a>1.4 下采样处理数据 把多的一方数据进行随机减少到与少的一方相同</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在所有的正常样本索引normal_indices中随机获取，随机选取number_records_fraud个</span></span><br><span class="line"><span class="comment"># np.random.choice: 可以从一个int数字或1维array里随机选取内容，并将选取结果放入n维array中返回。</span></span><br><span class="line">random_normal_indices = np.random.choice(normal_indices, number_records_fraud, replace=<span class="literal">False</span>)</span><br><span class="line">random_normal_indices = np.array(random_normal_indices)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"'下采样'后有正常样本个数："</span>, len(random_normal_indices))</span><br></pre></td></tr></table></figure><h3 id="1-5-数据索引合并-意思就是把新的正常数据和原来的异常数据进行拼接"><a href="#1-5-数据索引合并-意思就是把新的正常数据和原来的异常数据进行拼接" class="headerlink" title="1.5 数据索引合并 (意思就是把新的正常数据和原来的异常数据进行拼接)"></a>1.5 数据索引合并 (意思就是把新的正常数据和原来的异常数据进行拼接)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">under_sample_indices = np.concatenate([frand_indices, random_normal_indices])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"合并后有样本个数："</span>, len(under_sample_indices))</span><br><span class="line">under_sample_data = data.iloc[under_sample_indices, :]</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"合并后样本："</span>, under_sample_data[:<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;下采样数据 正常异常比 "</span>, len(under_sample_data[under_sample_data == <span class="number">0</span>]), <span class="string">'\t'</span>, len(under_sample_data[under_sample_data == <span class="number">1</span>]))</span><br></pre></td></tr></table></figure><h3 id="1-6-获取合并数据中的feature-特征-和label-分类"><a href="#1-6-获取合并数据中的feature-特征-和label-分类" class="headerlink" title="1.6 获取合并数据中的feature(特征)和label(分类)"></a>1.6 获取合并数据中的feature(特征)和label(分类)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X_undersample = under_sample_data.loc[:, under_sample_data.columns != <span class="string">'Class'</span>]</span><br><span class="line">y_undersample = under_sample_data.loc[:, under_sample_data.columns == <span class="string">'Class'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (X_undersample.shape, y_undersample.shape)</span><br><span class="line"><span class="keyword">print</span> (len(under_sample_data[under_sample_data[<span class="string">"Class"</span>] == <span class="number">1</span>]), len(under_sample_data[under_sample_data[<span class="string">"Class"</span>] == <span class="number">0</span>]))</span><br></pre></td></tr></table></figure><img src="/2020/01/15/2018030701/20180307120308.png" title="如图"><h3 id="2-切分数据为训练和测试"><a href="#2-切分数据为训练和测试" class="headerlink" title="2. 切分数据为训练和测试"></a>2. 切分数据为训练和测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切分原始数据 取数据集中80%的数据作为训练集（建立model） 其他20%的为测试集(测试model)</span></span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (X.shape, y.shape)</span><br><span class="line"><span class="comment">## 2.1.对原始数据进行切分 （最终需要使用原数据集中的测试数据进行测试）</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.3</span>, random_state=<span class="number">0</span>) <span class="comment"># test_size测试集所占比例 random_state切分之前进行乱序</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"1.训练集数据大小"</span>, X_train.shape)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"2.测试集数据大小"</span>, X_test.shape)</span><br><span class="line"><span class="keyword">print</span> (len(X_train) + len(X_test), len(y_train), len(y_test), <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 2.2.对下采样数据进行切分</span></span><br><span class="line">X_train_undersample, X_test_undersample, y_train_undersample, y_test_undersample = train_test_split(X_undersample, y_undersample, test_size=<span class="number">0.2</span>, random_state=<span class="number">0</span>) <span class="comment"># test_size测试集大小 random_state切分之前进行乱序</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"3.训练集数据大小"</span>, X_train_undersample.shape)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"4.测试集数据大小"</span>, X_test_undersample.shape)</span><br><span class="line"><span class="keyword">print</span> (len(X_train_undersample) + len(X_test_undersample), len(y_train_undersample), len(y_test_undersample), <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切分训练集 把训练集平均切分为三分然后进行交叉验证 （三组数据分别进行建模和验证）</span></span><br></pre></td></tr></table></figure><img src="/2020/01/15/2018030701/20180307120401.png" title="如图"><h2 id="评估标准：召回率（recall）"><a href="#评估标准：召回率（recall）" class="headerlink" title="评估标准：召回率（recall）"></a>评估标准：召回率（recall）</h2><p><em>不适用准确率，因为准确率不能正确的得到所求的，是没用的</em></p><h3 id="模型评估表："><a href="#模型评估表：" class="headerlink" title="模型评估表："></a>模型评估表：</h3><table><thead><tr><th></th><th style="text-align:center">相关（Relevant），正类</th><th style="text-align:right">不相关（NonRelevant），负类</th></tr></thead><tbody><tr><td>被检测到（Retrieved）</td><td style="text-align:center">true positives （TP）</td><td style="text-align:right">false positives  （FP）</td></tr><tr><td>未被检测到（Retrieved）</td><td style="text-align:center">false negatives （FN）</td><td style="text-align:right">true negatives （TN）</td></tr></tbody></table><h3 id="一些术语："><a href="#一些术语：" class="headerlink" title="一些术语："></a>一些术语：</h3><ul><li>TP：True Positive，即正确预测出的正样本个数</li><li>FP：False Positive，即错误预测出的正样本个数（本来是负样本，被我们预测成了正样本）</li><li>TN：True Negative，即正确预测出的负样本个数</li><li>FN：False Negative，即错误预测出的负样本个数（本来是正样本，被我们预测成了负样本）</li></ul><h3 id="分类器性能评价指标"><a href="#分类器性能评价指标" class="headerlink" title="分类器性能评价指标"></a>分类器性能评价指标</h3><p>由以上四个指标，可以进一步衍生出其他三个常用的评价分类器性能的指标</p><ul><li>Precision(精确率)：TP÷(TP+FP)TP÷(TP+FP)，分类器预测出的正样本中，真实正样本的比例</li><li>Recall(召回率)：TP÷(TP+FN)TP÷(TP+FN)，在所有真实正样本中，分类器中能找到多少</li><li>Accuracy(准确率)：(TP+TN)÷(TP+NP+TN+FN)(TP+TN)÷(TP+NP+TN+FN)，分类器对整体的判断能力，即正确预测的比例</li></ul><blockquote><p>过拟合： 数据在训练集表现很好 在测试集表现很差</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression  <span class="comment"># 逻辑回归</span></span><br><span class="line"><span class="comment"># 注意这里导入的 不是from sklearn.model_selection import KFold</span></span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> KFold  <span class="comment"># 交叉验证  # cross_val_score</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix, recall_score, classification_report <span class="comment"># 混淆矩阵</span></span><br></pre></td></tr></table></figure><h3 id="3-通过多次循环交叉验证-确定正则化参数-random-state：随机种子数"><a href="#3-通过多次循环交叉验证-确定正则化参数-random-state：随机种子数" class="headerlink" title="3. 通过多次循环交叉验证 确定正则化参数 random_state：随机种子数"></a>3. 通过多次循环交叉验证 确定正则化参数 random_state：随机种子数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printing_Kfold_scores</span><span class="params">(x_train_data, y_train_data)</span>:</span></span><br><span class="line">    <span class="comment"># KFold：切分数据集 （这里切分为5部分） shuffle:是否每次都"洗牌"(Falses时，其效果等同于random_state等于整数，每次划分的结果相同)</span></span><br><span class="line">    fold = KFold(len(y_train_data), <span class="number">5</span>, shuffle=<span class="literal">False</span>) </span><br><span class="line">    <span class="keyword">print</span> (type(fold), len(y_train_data), len(fold)) <span class="comment"># 长度是5</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 正则化惩罚项(正则化参数) 预设了多个惩罚值，具体使用哪个需要尝试 列举了5个</span></span><br><span class="line">    c_param_range = [<span class="number">0.01</span>, <span class="number">0.1</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 新建DataFrame类型的数据用来存放不同正则化之后的结果</span></span><br><span class="line">    results_table = pd.DataFrame(index = range(len(c_param_range)), columns = [<span class="string">'C_parameter'</span>, <span class="string">'Mean recall score'</span>])</span><br><span class="line">    results_table[<span class="string">'C_parameter'</span>] = c_param_range</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先按照正则化参数进行循环以确定最好的参数 然后对每个逻辑回归进行交叉验证以获得最好的逻辑回归函数</span></span><br><span class="line">    <span class="comment"># 循环正则化参数 获取最好的c参数</span></span><br><span class="line">    <span class="keyword">for</span> index, c_param <span class="keyword">in</span> enumerate(c_param_range):</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"C_parameter "</span>, c_param)</span><br><span class="line">        </span><br><span class="line">        recall_accs = []</span><br><span class="line">        <span class="comment"># 循环进行交叉验证 </span></span><br><span class="line">        <span class="comment"># 每次循环次数为数据切分的大小,切分为n块就交叉验证n次,每次都是区其中n-1块为训练集1块为验证集</span></span><br><span class="line">        <span class="comment"># start=1:开始索引为1</span></span><br><span class="line">        <span class="comment"># iteration为索引 indices为划分好的数据:其中有n-1数据大小的训练集以及1数据代销的验证集</span></span><br><span class="line">        <span class="comment"># 循环中集合每次都不一样,所有的数据都会当一次验证集:例如 三个数据[1,2,3],循环使得数据分别为训练和验证每次为:[[1],[2, 3]], [[2],[1, 3]], [[3],[1, 2]]</span></span><br><span class="line">        <span class="keyword">for</span> iteration,  indices <span class="keyword">in</span> enumerate(fold, start=<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 这里并不是用fold直接划分训练集数据, 而是把索引进行1:5的划分, 然后按照索引获取数据中的对应的数据</span></span><br><span class="line">            <span class="keyword">print</span> (iteration, len(indices[<span class="number">0</span>]), len(indices[<span class="number">1</span>]))</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 建立逻辑回归模型</span></span><br><span class="line">            lr = LogisticRegression(C = c_param, penalty = <span class="string">'l1'</span>) <span class="comment"># C:正则化参数; penalty:惩罚项:使用L1正则化(惩罚) ‘l1’ or ‘l2’(默认: ‘l2’)</span></span><br><span class="line">            <span class="comment"># 在调参时如果我们主要的目的只是为了解决过拟合，一般penalty选择L2正则化就够了。</span></span><br><span class="line">            <span class="comment"># 但是如果选择L2正则化发现还是过拟合，即预测效果差的时候，就可以考虑L1正则化。</span></span><br><span class="line">            <span class="comment"># 另外，如果模型的特征非常多，我们希望一些不重要的特征系数归零，从而让模型系数稀疏化的话，也可以使用L1正则化。</span></span><br><span class="line">            <span class="comment"># print ("LR-逻辑回归表达式---", lr)</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 训练 参数一:训练数据特征(feature) 参数二:训练数据分类(label)</span></span><br><span class="line">            lr.fit(x_train_data.iloc[indices[<span class="number">0</span>],:], y_train_data.iloc[indices[<span class="number">0</span>],:].values.ravel())</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 预测</span></span><br><span class="line">            y_pred_undersample = lr.predict(x_train_data.iloc[indices[<span class="number">1</span>], :].values)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 计算召回率 召回率 =提取出的正确信息条数 /样本中的信息条数。通俗地说，就是所有准确的条目有多少被检索出来了。</span></span><br><span class="line">            <span class="comment"># 参数: 1.真实数据集  2.预测数据集</span></span><br><span class="line">            recall_acc = recall_score(y_train_data.iloc[indices[<span class="number">1</span>],:].values, y_pred_undersample)</span><br><span class="line">            recall_accs.append(recall_acc)</span><br><span class="line">            <span class="keyword">print</span> (len(indices), <span class="string">"Iteration "</span>, iteration, <span class="string">": recall score = "</span>, recall_acc)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 求每个惩罚值经过交叉验证之后平均召回率</span></span><br><span class="line">        results_table.loc[index, <span class="string">'Mean recall score'</span>] = np.mean(recall_accs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'\nMean recall score '</span>, np.mean(recall_accs), <span class="string">'\n'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span> (results_table)</span><br><span class="line">    </span><br><span class="line">    best_c = results_table.loc[results_table[<span class="string">'Mean recall score'</span>].idxmax()][<span class="string">'C_parameter'</span>]</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"finally-------best is--------&gt; "</span>, best_c)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> best_c</span><br><span class="line"></span><br><span class="line">best_c = printing_Kfold_scores(X_train_undersample, y_train_undersample)</span><br></pre></td></tr></table></figure><img src="/2020/01/15/2018030701/20180307120616.png" title="如图"><img src="/2020/01/15/2018030701/20180307120702.png" title="如图"><img src="/2020/01/15/2018030701/20180307120717.png" title="如图"><h4 id="ndarray数据格式化-set-printoptions"><a href="#ndarray数据格式化-set-printoptions" class="headerlink" title="ndarray数据格式化: set_printoptions"></a>ndarray数据格式化: set_printoptions</h4><blockquote><p>set_printoptions(precision=None,<br>                 threshold=None,<br>                 edgeitems=None,<br>                 linewidth=None,<br>                 suppress=None,<br>                 nanstr=None,<br>                 infstr=None,<br>                 formatter=None)</p></blockquote><ul><li>precision:输出结果保留精度的位数 (num)</li><li>threshold:array数量的个数在小于threshold的时候不会被折叠 (num)</li><li>edgeitems:在array已经被折叠后，开头和结尾都会显示edgeitems个数 (num)</li><li>formatter:这个很有意思，像python3里面str.format(),就是可以对你的输出进行自定义的格式化 其他的暂时没用到</li></ul><h3 id="4-使用最好的正则化参数-构建逻辑回归模型并进行测试"><a href="#4-使用最好的正则化参数-构建逻辑回归模型并进行测试" class="headerlink" title="4. 使用最好的正则化参数 构建逻辑回归模型并进行测试"></a>4. 使用最好的正则化参数 构建逻辑回归模型并进行测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建逻辑回归模型</span></span><br><span class="line">lr = LogisticRegression(C = best_c, penalty=<span class="string">'l1'</span>)</span><br><span class="line"><span class="comment"># 训练回归模型</span></span><br><span class="line">lr.fit(X_train_undersample, y_train_undersample.values.ravel())</span><br><span class="line"><span class="comment"># 使用模型进行测试</span></span><br><span class="line">y_pred_undersample = lr.predict(X_test_undersample.values)</span><br><span class="line"><span class="comment"># y_pred_undersample为预测(分类)值, y_test_undersample为真实测试集的(分类)值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (type(y_pred_undersample), len(y_pred_undersample), <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印和绘制混淆矩阵</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_confusion_matrix</span><span class="params">(cm, classes, title=<span class="string">'Confussion matrix'</span>, cmap=plt.cm.Blues)</span>:</span></span><br><span class="line">    <span class="comment">#设置显示混淆矩阵</span></span><br><span class="line">    plt.imshow(cm, interpolation=<span class="string">'nearest'</span>, cmap=cmap)</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.colorbar()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置坐标数</span></span><br><span class="line">    tick_marks = np.arange(len(classes))</span><br><span class="line">    plt.xticks(tick_marks, classes, rotation=<span class="number">0</span>)</span><br><span class="line">    plt.yticks(tick_marks, classes)</span><br><span class="line">    </span><br><span class="line">    thresh = cm.max() / <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># itertools.product可进行多层次循环 传入参数个数(n)和索引个数相同 可循环n^2次</span></span><br><span class="line">    <span class="comment"># 设置每个方块中的文字    </span></span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> itertools.product(range(cm.shape[<span class="number">0</span>]), range(cm.shape[<span class="number">1</span>])):</span><br><span class="line">        <span class="comment"># print (j, i, cm[i, j])</span></span><br><span class="line">        <span class="comment"># 因为i表示横坐标的位置, j表示纵坐标的位置 所以需要把i和j交换位置</span></span><br><span class="line">        plt.text(j, i, cm[i, j], horizontalalignment=<span class="string">"center"</span>, color=<span class="string">"white"</span> <span class="keyword">if</span> cm[i, j] &gt; thresh <span class="keyword">else</span> <span class="string">"black"</span>)</span><br><span class="line">    </span><br><span class="line">    plt.tight_layout()</span><br><span class="line">    <span class="comment"># 设置坐标文字</span></span><br><span class="line">    plt.ylabel(<span class="string">"True label"</span>)      <span class="comment"># 真实数据 </span></span><br><span class="line">    plt.xlabel(<span class="string">"Predicted label"</span>) <span class="comment"># 预测数据 1表示正例 0表示负例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画混淆矩阵图 参数: 1.y_true, 2.y_pred</span></span><br><span class="line">cnf_matrix = confusion_matrix(y_test_undersample, y_pred_undersample)</span><br><span class="line">np.set_printoptions(precision=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Recall metric in the testing dataset: "</span>, cnf_matrix[<span class="number">1</span>, <span class="number">1</span>]/(cnf_matrix[<span class="number">1</span>, <span class="number">0</span>] + cnf_matrix[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">class_names = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">plt.figure()</span><br><span class="line">plot_confusion_matrix(cnf_matrix, classes=class_names, title=<span class="string">'Confusion matrix'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由图可见, 召回率为 85 / (85 + 6) = 93.41%</span></span><br><span class="line"><span class="comment">#           精确率为 (85) / (85 + 9) = 90.43%</span></span><br><span class="line"><span class="comment">#           准确率为 (85 + 97) / (85 + 9 + 6 + 97) = 92.39%</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上计算都是基于下采样数据集的,还需要在原数据的测试集上进行测试操作 (与上面同理)</span></span><br></pre></td></tr></table></figure><img src="/2020/01/15/2018030701/20180307120847.png" title="如图"><h3 id="4-使用最好的正则化参数-构建逻辑回归模型并进行测试-使用原始数据的测试集和训练集"><a href="#4-使用最好的正则化参数-构建逻辑回归模型并进行测试-使用原始数据的测试集和训练集" class="headerlink" title="4. 使用最好的正则化参数 构建逻辑回归模型并进行测试 (使用原始数据的测试集和训练集)"></a>4. 使用最好的正则化参数 构建逻辑回归模型并进行测试 (使用原始数据的测试集和训练集)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在原数据的测试集上进行测试操作</span></span><br><span class="line">lr = LogisticRegression(C = best_c, penalty=<span class="string">'l1'</span>)</span><br><span class="line">lr.fit(X_train, y_train.values.ravel())</span><br><span class="line">y_pred = lr.predict(X_test.values)</span><br><span class="line"><span class="comment"># y_pred为预测(分类)值, y_test为真实测试集的(分类)值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cnf_matrix = confusion_matrix(y_test, y_pred)</span><br><span class="line">np.set_printoptions(precision=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Recall metric in the testing dataset: "</span>, cnf_matrix[<span class="number">1</span>, <span class="number">1</span>]/(cnf_matrix[<span class="number">1</span>, <span class="number">0</span>] + cnf_matrix[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">class_names = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">plt.figure()</span><br><span class="line">plot_confusion_matrix(cnf_matrix, classes=class_names, title=<span class="string">'Confusion matrix'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="5-修改阈值以获取最好的逻辑回归模型"><a href="#5-修改阈值以获取最好的逻辑回归模型" class="headerlink" title="5. 修改阈值以获取最好的逻辑回归模型"></a>5. 修改阈值以获取最好的逻辑回归模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 阈值: 默认使用sigma函数默认值:0.5, 意思是当预测概率大于0.5表示True,概率小鱼0.5表示False</span></span><br><span class="line"></span><br><span class="line">lr = LogisticRegression(C = best_c, penalty=<span class="string">'l1'</span>)</span><br><span class="line"><span class="comment"># 训练</span></span><br><span class="line">lr.fit(X_train, y_train.values.ravel())</span><br><span class="line"><span class="comment"># 预测 这里是预测概率值 每个数据的预测包含两个值，对于二分类问题，也就是被判断为0的概率和被判断为1的概率</span></span><br><span class="line">y_pred_undersample_proba = lr.predict_proba(X_test_undersample.values) <span class="comment"># 预测概率值而不是类别值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可能的阈值</span></span><br><span class="line">thresholds = [<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>, <span class="number">0.4</span>, <span class="number">0.5</span>, <span class="number">0.6</span>, <span class="number">0.7</span>, <span class="number">0.8</span>, <span class="number">0.9</span>]</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">10</span>)) <span class="comment"># 画图域</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, i <span class="keyword">in</span> enumerate(thresholds):</span><br><span class="line">    <span class="comment"># 预测概率</span></span><br><span class="line">    y_test_predictions_high_recall = y_pred_undersample_proba[:, <span class="number">1</span>] &gt; i</span><br><span class="line">    </span><br><span class="line">    plt.subplot(<span class="number">3</span>, <span class="number">3</span>, index + <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    cnf_matrix = confusion_matrix(y_test_undersample, y_test_predictions_high_recall)</span><br><span class="line">    np.set_printoptions(precision=<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span> (i, <span class="string">"Recall metric in the testing dataset: "</span>, cnf_matrix[<span class="number">1</span>, <span class="number">1</span>] / (cnf_matrix[<span class="number">1</span>, <span class="number">0</span>] + cnf_matrix[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line">    </span><br><span class="line">    class_names = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    plot_confusion_matrix(cnf_matrix, classes=class_names, title=<span class="string">"Threshold &gt;= %s"</span> %i)</span><br><span class="line">    </span><br><span class="line"><span class="comment">## 随着阈值上升 召回率不断变化 其中本来是1的被误检测为0的越来越多 可见 要选取最合适的阈值以达到召回率最高</span></span><br></pre></td></tr></table></figure><img src="/2020/01/15/2018030701/20180307120937.png" title="如图"><img src="/2020/01/15/2018030701/20180307121001.png" title="如图"><img src="/2020/01/15/2018030701/20180307121022.png" title="如图"><h2 id="过采样"><a href="#过采样" class="headerlink" title="过采样"></a>过采样</h2><blockquote><p>把数据相对少的增加,可增加为和数据多的数量相同的数量 (生成)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> imblearn.over_sampling <span class="keyword">import</span> SMOTE</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">credit_cards = pd.read_csv(<span class="string">"creditcard.csv"</span>)</span><br><span class="line">columns = credit_cards.columns</span><br><span class="line"></span><br><span class="line">features_columns = columns.delete(len(columns) - <span class="number">1</span>) <span class="comment">#删除最后一列数据</span></span><br><span class="line"><span class="keyword">print</span> (features_columns)</span><br><span class="line"></span><br><span class="line">features = credit_cards[features_columns]</span><br><span class="line">labels = credit_cards[<span class="string">'Class'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"原始的数据个数"</span>, (credit_cards[credit_cards[<span class="string">'Class'</span>] == <span class="number">0</span>]).shape, (credit_cards[credit_cards[<span class="string">'Class'</span>] == <span class="number">1</span>]).shape)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">features_train, features_test, labels_train, labels_test = train_test_split(features, labels, test_size=<span class="number">0.2</span>, random_state=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">print</span> (features_train.shape, features_test.shape, labels_train.shape, labels_test.shape)</span><br></pre></td></tr></table></figure><img src="/2020/01/15/2018030701/20180307121128.png" title="如图"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">oversampler = SMOTE(random_state = <span class="number">0</span>) <span class="comment"># SMOTE随机生成数据 生成只能是训练集生成数据, 而测试集不生成</span></span><br><span class="line"><span class="comment"># 只生成训练集数据 使得Class为1和为0的数量相同 返回训练集的特征和分类</span></span><br><span class="line">os_features, os_labels = oversampler.fit_sample(features_train, labels_train)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"可见 的确生成了新的数据,补充了异常的数据 "</span>, len(os_labels[os_labels[:] == <span class="number">1</span>]), len(os_labels[os_labels[:] == <span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> ((os_features).shape, len(os_features[os_features == <span class="number">1</span>]), len(os_features[os_features == <span class="number">0</span>]), </span><br><span class="line">       (os_labels).shape, len(os_labels[os_labels == <span class="number">1</span>]), len(os_labels[os_labels == <span class="number">0</span>]))</span><br></pre></td></tr></table></figure><img src="/2020/01/15/2018030701/20180307121154.png" title="如图"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">os_features = pd.DataFrame(os_features)</span><br><span class="line">os_labels = pd.DataFrame(os_labels)</span><br><span class="line"><span class="comment"># 获取最佳参数</span></span><br><span class="line">best_c = printing_Kfold_scores(os_features, os_labels)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot_confusion_matrix</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">lr = LogisticRegression(C = best_c, penalty=<span class="string">'l1'</span>)</span><br><span class="line"><span class="comment"># 训练 使用生成的数据</span></span><br><span class="line">lr.fit(os_features, os_labels.values.ravel())</span><br><span class="line"><span class="comment"># 使用真实数据测试</span></span><br><span class="line">y_pred = lr.predict(features_test.values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印和绘制混淆矩阵</span></span><br><span class="line">cnf_matrix = confusion_matrix(labels_test, y_pred)</span><br><span class="line">np.set_printoptions(precision=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Recall metric in the testing dataset: "</span>, cnf_matrix[<span class="number">1</span>, <span class="number">1</span>] / (cnf_matrix[<span class="number">1</span>, <span class="number">0</span>] + cnf_matrix[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">class_names = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">plt.figure()</span><br><span class="line">plot_confusion_matrix(cnf_matrix, classes=class_names, title=<span class="string">'Confusion matrix'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 逻辑回归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2020/01/15/20171225_regular/"/>
      <url>/2020/01/15/20171225_regular/</url>
      
        <content type="html"><![CDATA[<h2 id="正则表达式：-waiting。。。"><a href="#正则表达式：-waiting。。。" class="headerlink" title="正则表达式： waiting。。。"></a>正则表达式： waiting。。。</h2><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 正则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> python </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 爬虫实战（4）</title>
      <link href="/2020/01/15/20171222_crawler4/"/>
      <url>/2020/01/15/20171222_crawler4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>多线程</p></blockquote><p><em>待添加 条件变量 condition</em></p><a id="more"></a><h2 id="个人代码："><a href="#个人代码：" class="headerlink" title="个人代码："></a>个人代码：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#生产者消费者</span></span><br><span class="line"><span class="keyword">import</span> threading  <span class="comment"># , _thread ()python2x是thread</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> queue <span class="comment">#python2x是Queue</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">mutex = threading.Lock()  <span class="comment">#等价于_thread.allocate_lock()，也等价于_thread.allocate()</span></span><br><span class="line">myq = queue.Queue(<span class="number">10</span>)</span><br><span class="line">num = range(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> myq, num</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">            time.sleep(<span class="number">0.3</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> myq.full() <span class="keyword">and</span> mutex.acquire():</span><br><span class="line">                info = random.choice(num)</span><br><span class="line">                myq.put(info)</span><br><span class="line">                print(<span class="string">"put in data: "</span>, info, <span class="string">";                                queue size"</span>, myq.qsize())</span><br><span class="line">                mutex.release()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> myq, num</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> myq.empty() <span class="keyword">and</span> mutex.acquire():</span><br><span class="line">                info = myq.get()</span><br><span class="line">                print(<span class="string">"get  out  data: "</span>, info, <span class="string">";                             queue size"</span>, myq.qsize())</span><br><span class="line">                mutex.release()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'main'</span>)</span><br><span class="line">    p = Producer()</span><br><span class="line">    c = Consumer()</span><br><span class="line">    p.start()</span><br><span class="line">    c.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="别人家的代码【滑稽】："><a href="#别人家的代码【滑稽】：" class="headerlink" title="别人家的代码【滑稽】："></a>别人家的代码【滑稽】：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> thread, threading</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> time, random</span><br><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line">share_queue = Queue.Queue()  <span class="comment">#共享队列</span></span><br><span class="line">my_lock = thread.allocate_lock()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span> :</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span> :</span></span><br><span class="line">        products = range(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">global</span> share_queue</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span> :</span><br><span class="line">            num = random.choice(products)</span><br><span class="line">            my_lock.acquire()</span><br><span class="line">            share_queue.put(num)</span><br><span class="line">            <span class="keyword">print</span>  <span class="string">"Produce : "</span>, num</span><br><span class="line">            my_lock.release()</span><br><span class="line">            time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span> :</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span> :</span></span><br><span class="line">        <span class="keyword">global</span> share_queue</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            my_lock.acquire()</span><br><span class="line">            <span class="keyword">if</span> share_queue.empty() : <span class="comment">#这里没有使用信号量机制进行阻塞等待, </span></span><br><span class="line">                <span class="keyword">print</span> <span class="string">"Queue is Empty..."</span>  </span><br><span class="line">                my_lock.release()</span><br><span class="line">                time.sleep(random.random())</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            num = share_queue.get()</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Consumer : "</span>, num</span><br><span class="line">            my_lock.release()</span><br><span class="line">            time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span> :</span></span><br><span class="line">    producer = Producer()</span><br><span class="line">    consumer = Consumer()</span><br><span class="line">    producer.start()</span><br><span class="line">    consumer.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>转载自 链接地址: <a href="http://www.jianshu.com/p/86b8e78c418a" target="_blank" rel="noopener">http://www.jianshu.com/p/86b8e78c418a</a></p></blockquote><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeError, a bytes-like object is required, not &#39;str&#39;</title>
      <link href="/2020/01/15/20171219_python_error/"/>
      <url>/2020/01/15/20171219_python_error/</url>
      
        <content type="html"><![CDATA[<blockquote><p>问题分析: 该问题主要是由于当前操作的字符串是bytes类型的字符串对象，并对该bytes类型的字符串对象进行按照str类型的操作。</p></blockquote><img src="/2020/01/15/20171219_python_error/20171226111345.png" title="问题 alt:问题 extend:?imageView2/2/w/600"><ul><li>解决办法，将s转码成为str类型</li></ul><img src="/2020/01/15/20171219_python_error/20171226111804.png" title="问题 alt:问题 extend:?imageView2/2/w/600"><a id="more"></a><h2 id="str和bytes类型之间的常用转码方式"><a href="#str和bytes类型之间的常用转码方式" class="headerlink" title="str和bytes类型之间的常用转码方式"></a>str和bytes类型之间的常用转码方式</h2><blockquote><p>str to bytes</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'ab bbb'</span></span><br><span class="line"><span class="keyword">print</span> (type(s))</span><br><span class="line"></span><br><span class="line">b = bytes(s, encoding = <span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">print</span> (type(b))</span><br><span class="line"></span><br><span class="line">b2 = s.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">print</span> (type(b2))</span><br><span class="line"></span><br><span class="line">b3 = str.encode(s)</span><br><span class="line"><span class="keyword">print</span> (type(b3))</span><br></pre></td></tr></table></figure><img src="/2020/01/15/20171219_python_error/20171226115104.png" title="问题 alt:问题 extend:?imageView2/2/w/600"><blockquote><p>bytes to str</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="string">b'abbbb'</span></span><br><span class="line"><span class="keyword">print</span> (type(b))</span><br><span class="line"></span><br><span class="line">s = str(b, encoding = <span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">print</span> (type(s))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s2 = b.decode()</span><br><span class="line"><span class="keyword">print</span> (type(s2))</span><br><span class="line"></span><br><span class="line">s3 = b.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">print</span> (type(s3))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s4 = bytes.decode(b)</span><br><span class="line"><span class="keyword">print</span> (type(s4))</span><br></pre></td></tr></table></figure><img src="/2020/01/15/20171219_python_error/20171226115528.png" title="问题 alt:问题 extend:?imageView2/2/w/600"><blockquote><p>转载自 链接地址: <a href="http://blog.csdn.net/bible_reader/article/details/53047550" target="_blank" rel="noopener">http://blog.csdn.net/bible_reader/article/details/53047550</a></p></blockquote><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> BUG解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 转码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 爬虫实战（3）</title>
      <link href="/2020/01/15/20171219_crawler3/"/>
      <url>/2020/01/15/20171219_crawler3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Socket 网络编程</p></blockquote><p>Socket(套接字),是操作系统内核中的一个数据结构，它是网络中的节点进行相互通信的门户。它是网络进程的ID。网络通信，归根到底还是进程间的通信（不同计算机上的进程间通信, 又称进程间通信, IP协议进行的主要是端到端通信）。在网络中，每一个节点（计算机或路由）都有一个网络地址，也就是IP地址。两个进程通信时，首先要确定各自所在的网络节点的网络地址。但是，网络地址只能确定进程所在的计算机，而一台计算机上很可能同时运行着多个进程，所以仅凭网络地址还不能确定到底是和网络中的哪一个进程进行通信，因此套接口中还需要包括其他的信息，也就是端口号（PORT）。在一台计算机中，一个端口号一次只能分配给一个进程，也就是说，在一台计算机中，端口号和进程之间是一一对应关系。</p><p>所以，使用端口号和网络地址的组合可以唯一的确定整个网络中的一个网络进程</p><p>端口号的范围从0~65535，一类是由互联网指派名字和号码公司ICANN负责分配给一些常用的应用程序固定使用的“周知的端口”，其值一般为0~1023, 用户自定义端口号一般大于等于1024</p><p>每一个socket都用一个半相关描述{协议、本地地址、本地端口}来表示；一个完整的套接字则用一个相关描述{协议、本地地址、本地端口、远程地址、远程端口}来表示。socket也有一个类似于打开文件的函数调用，该函数返回一个整型的socket描述符，随后的连接建立、数据传输等操作都是通过socket来实现的</p><a id="more"></a><blockquote><p>原文见： <a href="http://python.jobbole.com/88396/" target="_blank" rel="noopener">http://python.jobbole.com/88396/</a></p></blockquote><h2 id="个人代码："><a href="#个人代码：" class="headerlink" title="个人代码："></a>个人代码：</h2><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务器端</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> socket   <span class="comment">#socket模块</span></span><br><span class="line"> </span><br><span class="line">BUF_SIZE = <span class="number">1024</span>  <span class="comment">#设置缓冲区大小</span></span><br><span class="line">server_addr = (<span class="string">'127.0.0.1'</span>, <span class="number">51230</span>)  <span class="comment">#IP和端口构成表示地址</span></span><br><span class="line"><span class="keyword">try</span> :</span><br><span class="line">    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  <span class="comment">#生成一个新的socket对象</span></span><br><span class="line"><span class="keyword">except</span> socket.error <span class="keyword">as</span> msg :</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Creating Socket Failure. Error Code : "</span> + str(msg[<span class="number">0</span>]) + <span class="string">" Message : "</span> + msg[<span class="number">1</span>])</span><br><span class="line">    sys.exit()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Socket Created!"</span>)</span><br><span class="line">server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)  <span class="comment">#设置地址复用</span></span><br><span class="line"><span class="keyword">try</span> : </span><br><span class="line">    server.bind(server_addr)  <span class="comment">#绑定地址</span></span><br><span class="line"><span class="keyword">except</span> socket.error <span class="keyword">as</span> msg :</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Binding Failure. Error Code : "</span> + str(msg[<span class="number">0</span>]) + <span class="string">" Message : "</span> + msg[<span class="number">1</span>])</span><br><span class="line">    sys.exit()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Socket Bind!"</span>)</span><br><span class="line">server.listen(<span class="number">5</span>)  <span class="comment">#监听, 最大监听数为5</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Socket listening"</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    client, client_addr = server.accept()  <span class="comment">#接收TCP连接, 并返回新的套接字和地址, 阻塞函数</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Connected by'</span>, client_addr)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span> :</span><br><span class="line">        data = client.recv(BUF_SIZE)  <span class="comment">#从客户端接收数据</span></span><br><span class="line">        <span class="keyword">print</span> (str(data, encoding = <span class="string">"utf-8"</span>))</span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">b'exit'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        client.sendall(data)  <span class="comment">#发送数据到客户端</span></span><br><span class="line">server.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#客户端</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">BUF_SIZE = <span class="number">1024</span>  <span class="comment">#设置缓冲区的大小</span></span><br><span class="line">server_addr = (<span class="string">'127.0.0.1'</span>, <span class="number">51230</span>)  <span class="comment">#IP和端口构成表示地址</span></span><br><span class="line"><span class="keyword">try</span> : </span><br><span class="line">    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  <span class="comment">#返回新的socket对象</span></span><br><span class="line"><span class="keyword">except</span> socket.error <span class="keyword">as</span> msg :</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Creating Socket Failure. Error Code : "</span> + str(msg[<span class="number">0</span>]) + <span class="string">" Message : "</span> + msg[<span class="number">1</span>])</span><br><span class="line">    sys.exit()</span><br><span class="line">client.connect(server_addr)  <span class="comment">#要连接的服务器地址</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = input(<span class="string">"Please input some string &gt; "</span>)  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data :</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"input can't empty, Please input again.."</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    client.sendall(bytes(data, encoding = <span class="string">'utf-8'</span>))  <span class="comment">#发送数据到服务器</span></span><br><span class="line">    <span class="comment"># client.sendall(str.encode(data)) </span></span><br><span class="line">    data = client.recv(BUF_SIZE)  <span class="comment">#从服务器端接收数据</span></span><br><span class="line">    <span class="keyword">print</span> (str(data, encoding = <span class="string">"utf-8"</span>))</span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务器端</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket   <span class="comment">#socket模块</span></span><br><span class="line">BUFF_SIZE = <span class="number">1024</span></span><br><span class="line">server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">address = (<span class="string">'127.0.0.1'</span>, <span class="number">12346</span>)</span><br><span class="line">server.bind(address)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"WAIT"</span>)</span><br><span class="line">    data, client_address = server.recvfrom(BUFF_SIZE)</span><br><span class="line">    <span class="keyword">print</span> (str(data, encoding=<span class="string">'utf-8'</span>), <span class="string">'from'</span> ,client_address)</span><br><span class="line">    server.sendto(data, client_address)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#客户端</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket   <span class="comment">#socket模块</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">BUFF_SIZE = <span class="number">1024</span></span><br><span class="line">client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">address = (<span class="string">'127.0.0.1'</span>, <span class="number">12346</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = input(<span class="string">"Please input some "</span>) </span><br><span class="line">    <span class="keyword">if</span> data == <span class="string">'exit'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    client.sendto(bytes(data, encoding=<span class="string">'utf-8'</span>), address)</span><br><span class="line">    data = client.recv(BUFF_SIZE)</span><br><span class="line">    <span class="keyword">print</span> (str(data, encoding=<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><h2 id="别人家的代码【滑稽】："><a href="#别人家的代码【滑稽】：" class="headerlink" title="别人家的代码【滑稽】："></a>别人家的代码【滑稽】：</h2><h3 id="TCP-1"><a href="#TCP-1" class="headerlink" title="TCP"></a>TCP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务器端</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> socket   <span class="comment">#socket模块</span></span><br><span class="line"> </span><br><span class="line">BUF_SIZE = <span class="number">1024</span>  <span class="comment">#设置缓冲区大小</span></span><br><span class="line">server_addr = (<span class="string">'127.0.0.1'</span>, <span class="number">8888</span>)  <span class="comment">#IP和端口构成表示地址</span></span><br><span class="line"><span class="keyword">try</span> :</span><br><span class="line">  server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  <span class="comment">#生成一个新的socket对象</span></span><br><span class="line"><span class="keyword">except</span> socket.error, msg :</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Creating Socket Failure. Error Code : "</span> + str(msg[<span class="number">0</span>]) + <span class="string">" Message : "</span> + msg[<span class="number">1</span>]</span><br><span class="line">    sys.exit()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Socket Created!"</span></span><br><span class="line">server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)  <span class="comment">#设置地址复用</span></span><br><span class="line"><span class="keyword">try</span> : </span><br><span class="line">    server.bind(server_addr)  <span class="comment">#绑定地址</span></span><br><span class="line"><span class="keyword">except</span> socket.error, msg :</span><br><span class="line">  <span class="keyword">print</span> <span class="string">"Binding Failure. Error Code : "</span> + str(msg[<span class="number">0</span>]) + <span class="string">" Message : "</span> + msg[<span class="number">1</span>]</span><br><span class="line">  sys.exit()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Socket Bind!"</span></span><br><span class="line">server.listen(<span class="number">5</span>)  <span class="comment">#监听, 最大监听数为5</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Socket listening"</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    client, client_addr = server.accept()  <span class="comment">#接收TCP连接, 并返回新的套接字和地址, 阻塞函数</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Connected by'</span>, client_addr</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span> :</span><br><span class="line">        data = client.recv(BUF_SIZE)  <span class="comment">#从客户端接收数据</span></span><br><span class="line">        <span class="keyword">print</span> data</span><br><span class="line">        client.sendall(data)  <span class="comment">#发送数据到客户端</span></span><br><span class="line">server.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#客户端</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">BUF_SIZE = <span class="number">1024</span>  <span class="comment">#设置缓冲区的大小</span></span><br><span class="line">server_addr = (<span class="string">'127.0.0.1'</span>, <span class="number">8888</span>)  <span class="comment">#IP和端口构成表示地址</span></span><br><span class="line"><span class="keyword">try</span> : </span><br><span class="line">    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  <span class="comment">#返回新的socket对象</span></span><br><span class="line"><span class="keyword">except</span> socket.error, msg :</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Creating Socket Failure. Error Code : "</span> + str(msg[<span class="number">0</span>]) + <span class="string">" Message : "</span> + msg[<span class="number">1</span>]</span><br><span class="line">    sys.exit()</span><br><span class="line">client.connect(server_addr)  <span class="comment">#要连接的服务器地址</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = raw_input(<span class="string">"Please input some string &gt; "</span>)  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data :</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"input can't empty, Please input again.."</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    client.sendall(data)  <span class="comment">#发送数据到服务器</span></span><br><span class="line">    data = client.recv(BUF_SIZE)  <span class="comment">#从服务器端接收数据</span></span><br><span class="line">    <span class="keyword">print</span> data</span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure><h3 id="UDP-1"><a href="#UDP-1" class="headerlink" title="UDP"></a>UDP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务器端</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">BUF_SIZE = <span class="number">1024</span>  <span class="comment">#设置缓冲区大小</span></span><br><span class="line">server_addr = (<span class="string">'127.0.0.1'</span>, <span class="number">8888</span>)  <span class="comment">#IP和端口构成表示地址</span></span><br><span class="line">server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  <span class="comment">#生成新的套接字对象</span></span><br><span class="line">server.bind(server_addr)  <span class="comment">#套接字绑定IP和端口</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span> :</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"waitting for data"</span></span><br><span class="line">    data, client_addr = server.recvfrom(BUF_SIZE)  <span class="comment">#从客户端接收数据</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Connected by'</span>, client_addr, <span class="string">' Receive Data : '</span>, data</span><br><span class="line">    server.sendto(data, client_addr)  <span class="comment">#发送数据给客户端</span></span><br><span class="line">server.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#客户端</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"> </span><br><span class="line">BUF_SIZE = <span class="number">1024</span>  <span class="comment">#设置缓冲区</span></span><br><span class="line">server_addr = (<span class="string">'127.0.0.1'</span>, <span class="number">8888</span>)  <span class="comment">#IP和端口构成表示地址</span></span><br><span class="line">client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  <span class="comment">#生成新的套接字对象</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span> :</span><br><span class="line">    data = raw_input(<span class="string">'Please Input data &gt; '</span>)</span><br><span class="line">    client.sendto(data, server_addr)  <span class="comment">#向服务器发送数据</span></span><br><span class="line">    data, addr = client.recvfrom(BUF_SIZE)  <span class="comment">#从服务器接收数据</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Data : "</span>, data</span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">s.getpeername()</span><br><span class="line"><span class="comment">#返回连接套接字的远程地址。返回值通常是元组（ipaddr,port）。</span></span><br><span class="line"> </span><br><span class="line">s.getsockname()</span><br><span class="line"><span class="comment">#返回套接字自己的地址。通常是一个元组(ipaddr,port)</span></span><br><span class="line"> </span><br><span class="line">s.setsockopt(level,optname,value)</span><br><span class="line"><span class="comment">#设置给定套接字选项的值。</span></span><br><span class="line"> </span><br><span class="line">s.getsockopt(level,optname[.buflen])</span><br><span class="line"><span class="comment">#返回套接字选项的值。</span></span><br><span class="line"> </span><br><span class="line">s.settimeout(timeout)</span><br><span class="line"><span class="comment">#设置套接字操作的超时期，timeout是一个浮点数，单位是秒。值为None表示没有超时期。一般，超时期应该在刚创建套接字时设置，因为它们可能用于连接的操作（如connect()）</span></span><br><span class="line"> </span><br><span class="line">s.gettimeout()</span><br><span class="line"><span class="comment">#返回当前超时期的值，单位是秒，如果没有设置超时期，则返回None。</span></span><br><span class="line"> </span><br><span class="line">s.fileno()</span><br><span class="line"><span class="comment">#返回套接字的文件描述符。</span></span><br><span class="line"> </span><br><span class="line">s.setblocking(flag)</span><br><span class="line"><span class="comment">#如果flag为0，则将套接字设为非阻塞模式，否则将套接字设为阻塞模式（默认值）。非阻塞模式下，如果调用recv()没有发现任何数据，或send()调用无法立即发送数据，那么将引起socket.error异常。</span></span><br><span class="line"> </span><br><span class="line">s.makefile()</span><br><span class="line"><span class="comment">#创建一个与该套接字相关连的文件</span></span><br></pre></td></tr></table></figure><blockquote><p>转载自 链接地址: <a href="http://python.jobbole.com/88396/" target="_blank" rel="noopener">http://python.jobbole.com/88396/</a></p></blockquote><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 爬虫实战（2）</title>
      <link href="/2020/01/15/20171219_crawler2/"/>
      <url>/2020/01/15/20171219_crawler2/</url>
      
        <content type="html"><![CDATA[<h2 id="目标：-获取上交所和深交所所有股票的名称和交易信息-存储到一个本地文件中"><a href="#目标：-获取上交所和深交所所有股票的名称和交易信息-存储到一个本地文件中" class="headerlink" title="目标： 获取上交所和深交所所有股票的名称和交易信息,存储到一个本地文件中"></a>目标： 获取上交所和深交所所有股票的名称和交易信息,存储到一个本地文件中</h2><blockquote><p>网站选择原则： 股票信息静态存在于html页面中，非js代码生成，没有Robbts协议限制</p></blockquote><blockquote><p>选取方法： 打开网页，查看源代码，搜索网页的股票价格数据是否存在于源代码中</p></blockquote><a id="more"></a><ul><li>下面的百度股市通中，股票的信息完全再html代码中，符合要求（并且发现网址中包含我们需要的关键字:sz代表深交所，而后面的数字就是股票代码了）</li></ul><img src="/2020/01/15/20171219_crawler2/20171226092624.png" title="百度股市通 alt:输出结果 extend:?imageView2/2/w/600"><img src="/2020/01/15/20171219_crawler2/20171226092340.png" title="百度股市通 alt:输出结果 extend:?imageView2/2/w/600"><ul><li>除了单个股票的信息，我们需要所有交所和深交所的股票，访问 <a href="http://quote.eastmoney.com/stocklist.html" target="_blank" rel="noopener">http://quote.eastmoney.com/stocklist.html</a> 查看页面</li></ul><img src="/2020/01/15/20171219_crawler2/20171226093006.png" title="可获得所有的股票代码 alt:股票代码 extend:?imageView2/2/w/600"><ul><li>所有我们只需要先获取所有的股票代码，然后循环访问百度即可获得所有的股票信息</li></ul><blockquote><p>输出结果： </p></blockquote><img src="/2020/01/15/20171219_crawler2/20171226091742.png" title="输出结果 alt:输出结果 extend:?imageView2/2/w/600"><p><strong>大部分讲解都在 Python 爬虫实战（1） 中介绍过了，需要请查看 <a href="http://zj2626.github.io/2017/12/14/20171214_crawler">http://zj2626.github.io/2017/12/14/20171214_crawler</a></strong></p><h3 id="python文件读写"><a href="#python文件读写" class="headerlink" title="python文件读写"></a>python文件读写</h3><ul><li>Python内置了读写文件的函数，用法和C是兼容的。</li></ul><p><em>在磁盘上读写文件的功能都是由操作系统提供的，现代操作系统不允许普通的程序直接操作磁盘，所以，读写文件就是请求操作系统打开一个文件对象（通常称为文件描述符），然后，通过操作系统提供的接口从这个文件对象中读取数据（读文件），或者把数据写入这个文件对象（写文件）。</em></p><blockquote><p>读文件</p></blockquote><ul><li>python内置的open()函数，返回一个文件对象;(参数中 r代表读 w代表写)</li></ul><img src="/2020/01/15/20171219_crawler2/20171226094739.png" title="读文件 alt:读文件 extend:?imageView2/2/w/600"><ul><li>得到文件对象，则可以直接调用f.read()把文件内容读取到内存中来<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.read()</span><br></pre></td></tr></table></figure></li></ul><p>读取时发生的问题：</p><ol><li>如果文件不存在，open()函数就会抛出一个IOError的错误，并且给出错误码和详细的信息告诉你文件不存在</li><li>‘gbk’ codec can’t decode byte 0xaf in position …</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#问题2解决方案两个：</span></span><br><span class="line"><span class="comment"># 1. 打开文件的时候就指定编码的类型</span></span><br><span class="line">    f = open(<span class="string">'E:/Data.txt'</span>, <span class="string">'r'</span>,encoding = <span class="string">'utf-8'</span>)</span><br><span class="line">    f.read()</span><br><span class="line"><span class="comment"># 2. 修改文件编码为utf-8</span></span><br></pre></td></tr></table></figure><ul><li>最后一步是调用close()方法关闭文件。文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.close()</span><br></pre></td></tr></table></figure><ul><li>为了防止中途出现异常而无法关闭文件，使用try finally语句</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'E:/Data.txt'</span>, <span class="string">'r'</span>, encoding = <span class="string">'utf-8'</span>)</span><br><span class="line">    print(f.read())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><ul><li>为了简化代码，python提供了一个更好的更简洁的方法读取文件(和try…finally一样的)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'E:/Data.txt'</span>, <span class="string">'r'</span>, encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br></pre></td></tr></table></figure><ul><li>read()方法一次把所有的文件内容读取进来，如果文件太大就不太好用，所以要反复调用read(size)来一部分一部分的读取，也可以调用readline()一次读取一行，或者调用readlines()一次读取全部并返回list<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'E:/Data.txt'</span>, <span class="string">'r'</span>, encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.readline())</span><br><span class="line">    print(f.readline())</span><br><span class="line">    print(f.readline())</span><br></pre></td></tr></table></figure></li></ul><p><em>如果文件很小，read()一次性读取最方便；如果不能确定文件大小，反复调用read(size)比较保险；如果是配置文件，调用readlines()最方便</em></p><blockquote><p>写文件</p></blockquote><ul><li>第二个参数传入标识符’w’或者’wb’表示写文本文件或写二进制文件; write()函数会把数据替换掉原文件中内容<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'E:/Data.txt'</span>, <span class="string">'w'</span>, encoding = <span class="string">'utf-8'</span>)</span><br><span class="line">    f.write(<span class="string">'ffffffffffffffffffffffff'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure></li></ul><p><em>当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用close()方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用close()的后果是数据可能只写了一部分到磁盘，剩下的丢失了。</em></p><ul><li>同读取一样 系统提供更好的<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'E:/Data.txt'</span>, <span class="string">'w'</span>, encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'kkkkkkkkkkkkkkkk'</span>)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>二进制文件</p></blockquote><ul><li>前面讲的默认都是读取文本文件，并且是UTF-8编码的文本文件。要读取二进制文件，比如图片、视频等等，用’rb’模式打开文件即可</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'D:/20171226101748.png'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.read()</span><br></pre></td></tr></table></figure><h2 id="个人代码："><a href="#个人代码：" class="headerlink" title="个人代码："></a>个人代码：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCodes</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://quote.eastmoney.com/stocklist.html'</span>;</span><br><span class="line">    resp = request.urlopen(url)</span><br><span class="line">    resp_text = resp.read().decode(<span class="string">'gbk'</span>)</span><br><span class="line">    soap = bs(resp_text, <span class="string">'html.parser'</span>)</span><br><span class="line">    list = soap.find_all(<span class="string">'div'</span>, id = <span class="string">'quotesearch'</span>)[<span class="number">0</span>].find_all(<span class="string">'ul'</span>)[<span class="number">0</span>].find_all(<span class="string">'li'</span>)</span><br><span class="line"></span><br><span class="line">    codeList = []</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> list:</span><br><span class="line">        <span class="keyword">try</span>: </span><br><span class="line">            <span class="comment">#eg: sh603183</span></span><br><span class="line">            codeList.append(re.findall(<span class="string">r"[s][hz]\d&#123;6&#125;"</span>, li.find(<span class="string">'a'</span>)[<span class="string">'href'</span>]))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> codeList</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeDict</span><span class="params">(code)</span>:</span></span><br><span class="line">    infoDict = &#123;&#125;</span><br><span class="line">    url = <span class="string">'https://gupiao.baidu.com/stock/'</span>+ code +<span class="string">'.html'</span>;</span><br><span class="line">    resp = request.urlopen(url)</span><br><span class="line">    resp_text = resp.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    soap = bs(resp_text, <span class="string">'html.parser'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        stockInfo = soap.find_all(attrs = &#123;<span class="string">'class'</span>,<span class="string">'stock-bets'</span>&#125;)</span><br><span class="line">        name = soap.find(attrs = &#123;<span class="string">'class'</span>, <span class="string">'bets-name'</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        infoDict[<span class="string">'name'</span>] = name.text.strip()</span><br><span class="line">        keys = soap.find_all(<span class="string">'dt'</span>)</span><br><span class="line">        values = soap.find_all(<span class="string">'dd'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(keys)):</span><br><span class="line">            infoDict[keys[i].text] = values[i].text</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> infoDict</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeFile</span><span class="params">(codeList)</span>:</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> code <span class="keyword">in</span> codeList:</span><br><span class="line">        i = i+<span class="number">1</span></span><br><span class="line">        <span class="comment"># 下面两个判断是因为前45个股票百度并没有信息，所以跳过了，200个以后的数据就不再取了，太多了，科科</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">45</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        infoDict = makeDict(code[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> infoDict <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">print</span> (infoDict)</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'E://Data.txt'</span>, <span class="string">'a'</span>, encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(str(infoDict) + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">codeList = getCodes();</span><br><span class="line">print(<span class="string">"start"</span>)</span><br><span class="line">writeFile(codeList)</span><br></pre></td></tr></table></figure><h2 id="别人家的代码【滑稽】："><a href="#别人家的代码【滑稽】：" class="headerlink" title="别人家的代码【滑稽】："></a>别人家的代码【滑稽】：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStockList</span><span class="params">(lst, stockURL)</span>:</span></span><br><span class="line">    html = getHTMLText(stockURL)</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'html.parser'</span>) </span><br><span class="line">    a = soup.find_all(<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            href = i.attrs[<span class="string">'href'</span>]</span><br><span class="line">            lst.append(re.findall(<span class="string">r"[s][hz]\d&#123;6&#125;"</span>, href)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStockInfo</span><span class="params">(lst, stockURL, fpath)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> stock <span class="keyword">in</span> lst:</span><br><span class="line">        url = stockURL + stock + <span class="string">".html"</span></span><br><span class="line">        html = getHTMLText(url)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> html==<span class="string">""</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            infoDict = &#123;&#125;</span><br><span class="line">            soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">            stockInfo = soup.find(<span class="string">'div'</span>,attrs=&#123;<span class="string">'class'</span>:<span class="string">'stock-bets'</span>&#125;)</span><br><span class="line"> </span><br><span class="line">            name = stockInfo.find_all(attrs=&#123;<span class="string">'class'</span>:<span class="string">'bets-name'</span>&#125;)[<span class="number">0</span>]</span><br><span class="line">            infoDict.update(&#123;<span class="string">'股票名称'</span>: name.text.split()[<span class="number">0</span>]&#125;)</span><br><span class="line">             </span><br><span class="line">            keyList = stockInfo.find_all(<span class="string">'dt'</span>)</span><br><span class="line">            valueList = stockInfo.find_all(<span class="string">'dd'</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(keyList)):</span><br><span class="line">                key = keyList[i].text</span><br><span class="line">                val = valueList[i].text</span><br><span class="line">                infoDict[key] = val</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">with</span> open(fpath, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write( str(infoDict) + <span class="string">'\n'</span> )</span><br><span class="line">                count = count + <span class="number">1</span></span><br><span class="line">                print(<span class="string">"\r当前进度: &#123;:.2f&#125;%"</span>.format(count*<span class="number">100</span>/len(lst)),end=<span class="string">""</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            count = count + <span class="number">1</span></span><br><span class="line">            print(<span class="string">"\r当前进度: &#123;:.2f&#125;%"</span>.format(count*<span class="number">100</span>/len(lst)),end=<span class="string">""</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    stock_list_url = <span class="string">'http://quote.eastmoney.com/stocklist.html'</span></span><br><span class="line">    stock_info_url = <span class="string">'https://gupiao.baidu.com/stock/'</span></span><br><span class="line">    output_file = <span class="string">'D:/BaiduStockInfo.txt'</span></span><br><span class="line">    slist=[]</span><br><span class="line">    getStockList(slist, stock_list_url)</span><br><span class="line">    getStockInfo(slist, stock_info_url, output_file)</span><br><span class="line"> </span><br><span class="line">main()</span><br></pre></td></tr></table></figure><blockquote><p>转载自 链接地址: <a href="http://python.jobbole.com/88350/" target="_blank" rel="noopener">http://python.jobbole.com/88350/</a></p></blockquote><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 爬虫实战（1）</title>
      <link href="/2020/01/15/20171214_crawler/"/>
      <url>/2020/01/15/20171214_crawler/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>在我学习完python的基础知识之后，当然想要练练手，加深一下对python以及其语法的理解，<br>所以听说爬虫特别有成就感，非常有利于学习and娱乐，以及培养学习的兴趣，so就到处百度爬虫的相关文章，网上的确有很多相关的，但我还是决定自己写写,<br><strong>只有自己写下了讲出来才能代表真的学会了这么技术</strong></p><a id="more"></a><ul><li>我也是第一次学python和抓包，是根据网上的各种讲解以及自己的摸索，慢慢学会的，有什么说的不对的，欢迎指正</li><li>刚开始的时候我的使用Anaconda管理包和环境（py3.6），然而后来我在学多线程的时候，就出现了问题：setdaemon(true)一直没效果（设置守护线程后，守护线程本来应该在所有非守护线程执行完就立马结束而不管守护线程是否结束的，but没用，网上各种查也查不到，后来我把代码写到.py文件里直接在cmd里执行该脚本就没问题了）</li><li>使用Anaconda是因为我打算入坑深度学习，所以提前熟悉熟悉这个管理工具，科科</li></ul><h3 id="本章目的：-抓取豆瓣电影网站正在上映列表的评价关键词，并使用词云表示出来"><a href="#本章目的：-抓取豆瓣电影网站正在上映列表的评价关键词，并使用词云表示出来" class="headerlink" title="本章目的： 抓取豆瓣电影网站正在上映列表的评价关键词，并使用词云表示出来"></a>本章目的： 抓取豆瓣电影网站正在上映列表的评价关键词，并使用词云表示出来</h3><ul><li>豆瓣正在上映列表如图</li></ul><img src="/2020/01/15/20171214_crawler/20171222001.png" title="正在上映"><ul><li>豆瓣电影《芳华》短评列表如图</li></ul><img src="/2020/01/15/20171214_crawler/20171222164027.png" title="芳华"><ul><li>最终获得的《芳华》短评词云如图</li></ul><img src="/2020/01/15/20171214_crawler/20171225134154.png" title="芳华"><h2 id="抓取步骤大致分为三步，具体的又分为下面几步："><a href="#抓取步骤大致分为三步，具体的又分为下面几步：" class="headerlink" title="抓取步骤大致分为三步，具体的又分为下面几步："></a>抓取步骤大致分为三步，具体的又分为下面几步：</h2><h3 id="1-访问并获取网页数据并抽取出来有用信息"><a href="#1-访问并获取网页数据并抽取出来有用信息" class="headerlink" title="1.访问并获取网页数据并抽取出来有用信息"></a>1.访问并获取网页数据并抽取出来有用信息</h3><ul><li><h4 id="首先要获取网页数据"><a href="#首先要获取网页数据" class="headerlink" title="首先要获取网页数据"></a>首先要获取网页数据</h4></li></ul><blockquote><p>获取豆瓣正在上映列表的网页数据<br>使用Python的urllib模块: 其提供了一个从指定的URL地址获取网页数据(创建一个表示远程url的类文件对象)，通过该对象可以对其进行分析处理，获取想要的数据</p></blockquote><ul><li>函数原型</li></ul><img src="/2020/01/15/20171214_crawler/20171225094820.png" title="函数原型 alt:函数原型 extend:?imageView2/2/w/600"><ol><li>url: 请求的地址（除了url，其他都可以不填）</li><li>data: 访问url时请求的参数</li><li>timeout: 超时时间</li></ol><ul><li>python2.X写法：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">urltext = urllib.urlopen(url)</span><br></pre></td></tr></table></figure><ul><li>python3.X写法：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request  <span class="comment">#from urllib import request</span></span><br><span class="line">urltext = urllib.request.urlopen(url)</span><br></pre></td></tr></table></figure><ul><li>urlopen()方法返回值类型：</li></ul><p>如果请求的是http或者https地址，则返回http.client.HTTPResponse对象<br>如果请求的是ftp或者Data URL地址(以及requests explicitly handled by legacyURLopener and FancyURLopener classes &lt;-原谅我没看懂)，则返回urllib.response.addinfourl对象</p><ul><li>上面的对象包含多个方法可供我们使用</li></ul><img src="/2020/01/15/20171214_crawler/20171225105358.png" title="来自源码request.py extend:?imageView2/2/w/600"><ol><li>geturl() :返回请求的网页地址</li><li>info()   :返回一个httplib.HTTPMessage对象，表示远程服务器返回的头信息</li><li>getcode():返回HTTP状态码</li><li>read() , readline() , readlines() , fileno() , close() 这些方法的使用方式与文件对象完全一样</li></ol><blockquote><p>实例</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">urltext = urllib.request.urlopen(<span class="string">'https://movie.douban.com/nowplaying/beijing/'</span>)</span><br><span class="line"><span class="keyword">print</span> (urltext)</span><br><span class="line"><span class="keyword">print</span> (urltext.geturl())</span><br><span class="line"><span class="keyword">print</span> (urltext.info())</span><br><span class="line"><span class="keyword">print</span> (urltext.getcode())</span><br></pre></td></tr></table></figure><img src="/2020/01/15/20171214_crawler/20171225111200.png" title="实例 extend:?imageView2/2/w/600"><img src="/2020/01/15/20171214_crawler/20171225113314.png" title="实例 extend:?imageView2/2/w/600"><ul><li><h4 id="其次-分析网页数据，抓取想要的数据"><a href="#其次-分析网页数据，抓取想要的数据" class="headerlink" title="其次,分析网页数据，抓取想要的数据"></a>其次,分析网页数据，抓取想要的数据</h4></li></ul><blockquote><p>找到网页上你要的电影列表的位置，看看有什么标签特点</p></blockquote><img src="/2020/01/15/20171214_crawler/20171225112215.png" title="来自豆瓣 extend:?imageView2/2/w/600"><p>我们发现所有的电影列表都在id为nowplaying的div下面的一个ul下，该ul的class为lists，并且每个电影的li标签的class为list-item<br>该li标签中有许多熟悉，我们发现data-title为电影标题，data-score为电影评分，data-star为打星…,最最重要的是id，每个电影都不同，可推测应该是电影的唯一标识（编号）；<br>我们要通过某一个标识来查询该电影的短评， 通过查看电影主页的网址（<a href="https://movie.douban.com/subject/26862829/" target="_blank" rel="noopener">https://movie.douban.com/subject/26862829/</a> ）可知，这个id就是我们需要的</p><blockquote><p>使用python的BeautifulSoup库进行网页信息的抓取（网页解析库）<br>BeautifulSoup 是一个可以从 HTML 或 XML 文件中提取数据的 Python 库.它能够通过你喜欢的转换器实现惯用的文档导航,查找,修改文档的方式.Beautiful Soup 会帮你节省数小时甚至数天的工作时间.</p></blockquote><ul><li>BeautifulSoup:Beautiful Soup提供一些简单的、python式的函数用来处理导航、搜索、修改分析树等功能。<br>它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码就可以写出一个完整的应用程序。<br>Beautiful Soup自动将输入文档转换为Unicode编码，输出文档转换为utf-8编码。你不需要考虑编码方式，除非文档没有指定一个编码方式，这时，Beautiful Soup就不能自动识别编码方式了。然后，你仅仅需要说明一下原始编码方式就可以了。<br>Beautiful Soup已成为和lxml、html6lib一样出色的python解释器，为用户灵活地提供不同的解析策略或强劲的速度。(from <a href="http://beautifulsoup.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">http://beautifulsoup.readthedocs.io/zh_CN/latest/</a> )</li></ul><ul><li>使用BeautifulSoup解析代码,能够得到一个 BeautifulSoup 的对象,并能按照标准的缩进格式的结构输出</li><li>Beautiful Soup将复杂HTML文档转换成一个复杂的树形结构,每个节点都是Python对象,所有对象可以归纳为4种: Tag, NavigableString, BeautifulSoup, Comment<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Tag: &lt;class &apos;bs4.element.Tag&apos;&gt;标签对象，两个属性：name, attribute (直接调用：tag.name，tag[&apos;class&apos;]), 如果是多值属性，则返回list，也可以赋值为多值属性（假的多值属性返回字符串，如id=&quot;aaa bbb&quot;）</span><br><span class="line">NavigableString: &lt;class &apos;bs4.element.NavigableString&apos;&gt; tag中的字符串对象，即tag.string; tag中包含的字符串不能编辑,但是可以被替换成其它的字符串,用 replace_with() 方法</span><br><span class="line">BeautifulSoup : &lt;class &apos;bs4.BeautifulSoup&apos;&gt;BeautifulSoup对象表示的是一个文档的全部内容.大部分时候,可以把它当作 Tag 对象,它支持 遍历文档树 和 搜索文档树 中描述的大部分的方法; 一个方法：soup.name # [document]</span><br><span class="line">Comment : &lt;class &apos;bs4.element.Comment&apos;&gt;文档的注释部分，Comment 对象是一个特殊类型的 NavigableString 对象</span><br></pre></td></tr></table></figure></li></ul><p>BeautifulSoup对象使用示例：</p><ol><li><p>解析时，可以传入一段字符串或一个文件句柄.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup   <span class="comment">#导入模块</span></span><br><span class="line">soup = BeautifulSoup(open(<span class="string">"index.html"</span>))</span><br><span class="line">soup = BeautifulSoup(<span class="string">"&lt;html&gt;data&lt;/html&gt;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#首先,文档被转换成Unicode,并且HTML的实例都被转换成Unicode编码</span></span><br><span class="line"><span class="comment">#然后,BeautifulSoup选择最合适的解析器来解析这段文档,如果手动指定解析器那么Beautiful Soup会选择指定的解析器来解析文档</span></span><br></pre></td></tr></table></figure></li><li><p>soup.title           # <title>标签对象：<title>北京 - 在线购票&amp;影讯</title></title></p></li><li>soup.title.name      # <title>标签名称：title</title></li><li>soup.title.string    # <title>标签内容：北京 - 在线购票&amp;影讯</title></li><li>soup.p               # 第一个p标签对象：<p class="appintro-title">豆瓣</p></li><li><p>soup.p[‘class’]      # 第一个p标签对象的类属性<br>7.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">原型：find_all( name , attrs , recursive , string , **kwargs ) 搜索当前tag的所有tag子节点,并判断是否符合过滤器的条件</span><br><span class="line">    name:       name 参数可以查找所有名字为 name 的tag,字符串对象会被自动忽略掉.</span><br><span class="line">    attrs:      通过属性选择器查询，有两种写法</span><br><span class="line">                    1. soup.find_all(class_=&apos;value&apos;, id=&apos;value2&apos;)</span><br><span class="line">                    2. soup.find_all(attrs=&#123;&quot;class&quot;: &quot;value&quot;, &quot;id&quot;:&quot;value2&quot;&#125;)</span><br><span class="line">    limit:  限制查询结果个数</span><br><span class="line">    recursive: 调用tag的 find_all() 方法时,Beautiful Soup会检索当前tag的所有子孙节点,如果只想搜索tag的直接子节点,可以使用参数 recursive=False</span><br><span class="line">    string: 通过 string 参数可以搜搜文档中的字符串内容. soup.find_all(&quot;a&quot;, string=&quot;value&quot;) #查询标签中文字包含value的a标签</span><br></pre></td></tr></table></figure></li><li><p>soup.find(‘a’).get(‘href’)   # 找到第一个a标签 并返回其href属性内容 （ find_all() 方法的返回结果是值包含一个元素的列表,而 find() 方法直接返回结果.）</p></li><li>更多用法见BeautifulSoup官网中文文档：<a href="http://beautifulsoup.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">http://beautifulsoup.readthedocs.io/zh_CN/latest/</a></li></ol><ul><li><p>解析网页代码,并编码为utf-8</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">urltext = urllib.request.urlopen(<span class="string">'https://movie.douban.com/nowplaying/beijing/'</span>)</span><br><span class="line">html_data = urltext.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">print</span> (html_data)</span><br></pre></td></tr></table></figure></li><li><p>获取正在上映列表数据 nowplaying_movie_list列表（List）</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">urltext = urllib.request.urlopen(<span class="string">'https://movie.douban.com/nowplaying/beijing/'</span>)</span><br><span class="line">html_data = urltext.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line">soup = bs(html_data, <span class="string">'html.parser'</span>)</span><br><span class="line">nowplaying_movie = soup.find_all(<span class="string">'div'</span>, id = <span class="string">'nowplaying'</span>) <span class="comment"># 先获取id为nowplaying的div</span></span><br><span class="line"><span class="comment"># print (nowplaying_movie) # 只有一条数据，因为id是唯一的</span></span><br><span class="line">nowplaying_movie_list = nowplaying_movie[<span class="number">0</span>].find_all(<span class="string">'li'</span>, class_ = <span class="string">'list-item'</span>)<span class="comment"># 再获取class为list-item的li</span></span><br><span class="line"><span class="keyword">print</span> (nowplaying_movie_list)</span><br></pre></td></tr></table></figure><ul><li>至此已经获得了最内部一层的电影数据， 可以直接获得每个电影的id了</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (nowplaying_movie_list[<span class="number">0</span>][<span class="string">'id'</span>], <span class="string">'\n'</span>) <span class="comment">#获取第一个电影的id数据</span></span><br></pre></td></tr></table></figure><ul><li><p>现在 我们需要获取其中某一个id，通过这个id获取对应电影的短评，然后就可以进行处理了</p></li><li><p>你也可以自由发挥，制作一个查询的功能，通过输入电影名称指定某一个电影进行分析</p></li></ul><h3 id="2-分析网页中有用信息并进行处理"><a href="#2-分析网页中有用信息并进行处理" class="headerlink" title="2.分析网页中有用信息并进行处理"></a>2.分析网页中有用信息并进行处理</h3><ul><li><h4 id="首先按照上面的步骤访问电影首页，抽取短评信息，存放到一个List中"><a href="#首先按照上面的步骤访问电影首页，抽取短评信息，存放到一个List中" class="headerlink" title="首先按照上面的步骤访问电影首页，抽取短评信息，存放到一个List中"></a>首先按照上面的步骤访问电影首页，抽取短评信息，存放到一个List中</h4></li><li><p>首先解析网页代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">requrl = <span class="string">"https://movie.douban.com/subject/"</span> + nowplaying_movie_list[<span class="number">0</span>][<span class="string">'id'</span>] + <span class="string">"/comments?start=0&amp;limit=20"</span></span><br><span class="line">resp = urllib.request.urlopen(requrl)</span><br><span class="line">html_data = resp.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">soup = bs(html_data, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line">title = soup.find(<span class="string">'title'</span>) <span class="comment"># 直接获取title标签</span></span><br><span class="line">print(title.string) <span class="comment">#获取标签中内容</span></span><br><span class="line">comment_div_list = soup.find_all(<span class="string">'div'</span>, class_ = <span class="string">'comment'</span>)</span><br><span class="line"><span class="keyword">print</span> (comment_div_list) <span class="comment">#所有的短片标签列表</span></span><br></pre></td></tr></table></figure></li><li><p>通过下面的源码可知，所有的短评文字都放在class为comment-item的div下的一个p标签中，所有我们要得到所有的p标签并组成一个List</p></li></ul><img src="/2020/01/15/20171214_crawler/20171225120114.png" title="来自豆瓣 extend:?imageView2/2/w/600"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">commentList = []  <span class="comment">#存放所有的短评内容数据 List</span></span><br><span class="line"><span class="keyword">for</span> cm <span class="keyword">in</span> comment_div_list:</span><br><span class="line">    <span class="keyword">if</span> cm.find_all(<span class="string">'p'</span>)[<span class="number">0</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        commentList.append(cm.find_all(<span class="string">'p'</span>)[<span class="number">0</span>].string) <span class="comment">#把短评内容存放在列表中</span></span><br><span class="line"><span class="keyword">print</span> (commentList)</span><br></pre></td></tr></table></figure><ul><li>已得短评List，但是该List中包含大量的单引号（List自带的），换行符等不需要的东西，并且由于我们要做成词云，所有的符号都不要，只要文字</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">None</span> <span class="keyword">in</span> commentList:</span><br><span class="line">        commentList.remove(<span class="literal">None</span>) <span class="comment">#去除NoneType数据</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">comments = <span class="string">''</span>.join(commentList) <span class="comment">#拼接字符串</span></span><br><span class="line">comments = comments.replace(<span class="string">' '</span>,<span class="string">''</span>).replace(<span class="string">"\n"</span>, <span class="string">""</span>).replace(<span class="string">"\t"</span>, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">print</span> (comments)</span><br></pre></td></tr></table></figure><ul><li><p>词云展示的只是关键词，所以去除用户短评中的所有的标点符号（正则表达式）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re       <span class="comment">#正则表达式</span></span><br><span class="line">pattern = re.compile(<span class="string">r'[\u4e00-\u9fa5]+'</span>)  <span class="comment">#去除标点符号(正则表达式)</span></span><br><span class="line">filterdata = re.findall(pattern, comments)</span><br><span class="line">cleaned_comments = <span class="string">''</span>.join(filterdata) <span class="comment"># 把filterdata按照空字符串为间隔连接起来</span></span><br><span class="line"><span class="keyword">print</span> (cleaned_comments)</span><br></pre></td></tr></table></figure></li><li><p>目前所有的评价都没有间隔的展示在这里，我们需要把其中的词语取出来得到所有的关键词</p><blockquote><p>使用jieba分词, 把字符串中的所有的词语分出来，组成一个List</p></blockquote></li></ul><blockquote><p>结巴（jieba）是国人出的一个精品插件，可以对一段中文进行分词，有三种分词模式，可以适应不同需求。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jieba.cut 方法接受三个输入参数: 需要分词的字符串；cut_all 参数用来控制是否采用全模式；HMM 参数用来控制是否使用 HMM 模型</span><br><span class="line">jieba.cut_for_search 方法接受两个参数：需要分词的字符串；是否使用 HMM 模型。该方法适合用于搜索引擎构建倒排索引的分词，粒度比较细</span><br><span class="line">待分词的字符串可以是 unicode 或 UTF-8 字符串、GBK 字符串。注意：不建议直接输入 GBK 字符串，可能无法预料地错误解码成 UTF-8</span><br><span class="line">jieba.cut 以及 jieba.cut_for_search 返回的结构都是一个可迭代的 generator，可以使用 for 循环来获得分词后得到的每一个词语(unicode)，或者用</span><br><span class="line">jieba.lcut 以及 jieba.lcut_for_search 直接返回 list</span><br><span class="line">jieba.Tokenizer(dictionary=DEFAULT_DICT) 新建自定义分词器，可用于同时使用不同词典。jieba.dt 为默认分词器，所有全局分词相关函数都是该分词器的映射。</span><br><span class="line"></span><br><span class="line">也可以添加自定义词典 （from： http://blog.csdn.net/qq_27231343/article/details/51898940 ）</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#代码示例</span></span><br><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(<span class="string">"我来到北京清华大学"</span>, cut_all=<span class="literal">True</span>)</span><br><span class="line">print(<span class="string">"Full Mode: "</span> + <span class="string">"/ "</span>.join(seg_list))  <span class="comment"># 全模式</span></span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(<span class="string">"我来到北京清华大学"</span>, cut_all=<span class="literal">False</span>)</span><br><span class="line">print(<span class="string">"Default Mode: "</span> + <span class="string">"/ "</span>.join(seg_list))  <span class="comment"># 精确模式</span></span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(<span class="string">"他来到了网易杭研大厦"</span>)  <span class="comment"># 默认是精确模式</span></span><br><span class="line">print(<span class="string">"* "</span>.join(seg_list))</span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut_for_search(<span class="string">"小明硕士毕业于中国科学院计算所，后在日本京都大学深造"</span>)  <span class="comment"># 搜索引擎模式</span></span><br><span class="line">print(<span class="string">", "</span>.join(seg_list))</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"><span class="comment"># Full Mode: 我/ 来到/ 北京/ 清华/ 清华大学/ 华大/ 大学</span></span><br><span class="line"><span class="comment"># Default Mode: 我/ 来到/ 北京/ 清华大学</span></span><br><span class="line"><span class="comment"># 他* 来到* 了* 网易* 杭研* 大厦       (此处，“杭研”并没有在词典中，但是也被Viterbi算法识别出来了)</span></span><br><span class="line"><span class="comment"># 小明, 硕士, 毕业, 于, 中国, 科学, 学院, 科学院, 中国科学院, 计算, 计算所, ，, 后, 在, 日本, 京都, 大学, 日本京都大学, 深造</span></span><br></pre></td></tr></table></figure><ul><li><p>使用jieba分割短评，获取返回的分词List</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">segment = jieba.lcut(cleaned_comments)</span><br><span class="line"><span class="keyword">print</span> (segment)</span><br></pre></td></tr></table></figure></li><li><p>数据中有“的”、“是”、“我”、“你”等虚词（停用词），而这些词在任何场景中都是高频时，并且没有实际的含义，所以我们要他们进行清除。</p><blockquote><p>使用pandas</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">words_df = pd.DataFrame(&#123;<span class="string">'segment'</span>:segment&#125;)  <span class="comment">#格式转换 把List转化为Dict</span></span><br><span class="line"><span class="comment"># words_df.head()</span></span><br><span class="line"><span class="comment"># print(words_df)</span></span><br><span class="line"><span class="comment"># print (words_df.segment)</span></span><br><span class="line"><span class="comment">#从网上下载常用停用词文件 stopwords.txt 然后对比去除统计结果中所有的停用词</span></span><br><span class="line">stopwords=pd.read_csv(<span class="string">"E:/stopwords.txt"</span>,index_col=<span class="literal">False</span>,quoting=<span class="number">3</span>,sep=<span class="string">"\t"</span>,names=[<span class="string">'stopword'</span>], encoding=<span class="string">'utf-8'</span>)<span class="comment">#quoting=3全不引用</span></span><br><span class="line"><span class="comment"># print (stopwords.stopword)</span></span><br><span class="line"><span class="comment"># print (words_df.segment.isin(stopwords.stopword))</span></span><br><span class="line">words_df = words_df[~words_df.segment.isin(stopwords.stopword)]  <span class="comment">#stopwords.txt不能有空格</span></span><br><span class="line">words_df.head()</span><br></pre></td></tr></table></figure><p><strong>我的停用词文件： <a href="http://p18j2ow6f.bkt.clouddn.com/static/file/stopwords.txt" target="_blank" rel="noopener">http://p18j2ow6f.bkt.clouddn.com/static/file/stopwords.txt</a></strong></p><ul><li>清洗了关键词以后，我们把剩下的词语进行分类统计，观察每个词语的频率<blockquote><p>使用numpy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy    <span class="comment">#numpy计算包</span></span><br><span class="line">words_stat = words_df.groupby(by=[<span class="string">'segment'</span>])[<span class="string">'segment'</span>].agg(&#123;<span class="string">"计数"</span>:numpy.size&#125;) <span class="comment"># 按照segment分类</span></span><br><span class="line">words_stat = words_stat.reset_index().sort_values(by=[<span class="string">"计数"</span>],ascending=<span class="literal">False</span>)  <span class="comment">#词频按照 计数 由大到小排列</span></span><br><span class="line">words_stat.head()</span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="3-制作为词云"><a href="#3-制作为词云" class="headerlink" title="3.制作为词云"></a>3.制作为词云</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="comment"># %matplotlib inline</span></span><br><span class="line"></span><br><span class="line">matplotlib.rcParams[<span class="string">'figure.figsize'</span>] = (<span class="number">10.0</span>, <span class="number">5.0</span>)</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud <span class="comment">#词云包</span></span><br><span class="line"></span><br><span class="line">wordcloud=WordCloud(font_path=<span class="string">"E:/simhei.ttf"</span>,background_color=<span class="string">"white"</span>,max_font_size=<span class="number">80</span>)  <span class="comment">#指定字体类型、字体大小和字体颜色</span></span><br><span class="line"><span class="comment"># print (wordcloud)</span></span><br><span class="line">word_frequence = &#123;x[<span class="number">0</span>]:x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> words_stat.head(<span class="number">1000</span>).values&#125;</span><br><span class="line"><span class="comment"># print (word_frequence)</span></span><br><span class="line"></span><br><span class="line">wordcloud=wordcloud.fit_words(word_frequence)</span><br><span class="line">matplotlib.pyplot.imshow(wordcloud)</span><br></pre></td></tr></table></figure><p><strong>我的字体文件： <a href="http://p18j2ow6f.bkt.clouddn.com/static/file/simhei.ttf" target="_blank" rel="noopener">http://p18j2ow6f.bkt.clouddn.com/static/file/simhei.ttf</a></strong></p><blockquote><p>最终效果</p></blockquote><img src="/2020/01/15/20171214_crawler/20171225134154.png" title="芳华"><h2 id="遇到403-forbidden以及503-Service-Unavailable问题的解决方法："><a href="#遇到403-forbidden以及503-Service-Unavailable问题的解决方法：" class="headerlink" title="遇到403: forbidden以及503: Service Unavailable问题的解决方法："></a>遇到403: forbidden以及503: Service Unavailable问题的解决方法：</h2><p>这是网站对自动化爬虫的禁止需要用python的模块urllib2模块(对于3.6版本使用 urllib.request)</p><p><em>User-Agent是浏览器特有的属性，通过浏览器查看源代码就可以查看到(其他的属性也可以通过浏览器点击F12中的network窗口发现)</em></p><img src="/2020/01/15/20171214_crawler/20180101164037.png" title="403问题解决"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCodes</span><span class="params">()</span>:</span></span><br><span class="line">    headers=[<span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36"</span>]</span><br><span class="line">    randdom_header=random.choice(headers)</span><br><span class="line"></span><br><span class="line">    url = <span class="string">'http://bj.meituan.com/meishi/c17/'</span>;</span><br><span class="line">    req=request.Request(url)</span><br><span class="line">    req.add_header(<span class="string">"User-Agent"</span>,randdom_header)</span><br><span class="line">    req.add_header(<span class="string">"Host"</span>,<span class="string">"bj.meituan.com"</span>)</span><br><span class="line">    req.add_header(<span class="string">"Referer"</span>,<span class="string">"http://bj.meituan.com/"</span>)</span><br><span class="line">    req.add_header(<span class="string">"GET"</span>,url)</span><br><span class="line">    resp_text=request.urlopen(req).read()</span><br><span class="line"></span><br><span class="line">    soap = bs(resp_text, <span class="string">'html.parser'</span>)</span><br><span class="line">    list = soap.find_all(<span class="string">'ul'</span>, class_ = <span class="string">'list-ul'</span>)[<span class="number">0</span>].find_all(<span class="string">'li'</span>)</span><br><span class="line">    <span class="keyword">print</span> (list)</span><br><span class="line"></span><br><span class="line">    codeList = []</span><br><span class="line">    <span class="keyword">for</span> div <span class="keyword">in</span> list:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = div.find(<span class="string">'div'</span>, class_ = <span class="string">'img '</span>).find(<span class="string">'a'</span>)[<span class="string">'href'</span>]</span><br><span class="line"><span class="comment">#             len = url.index('?')</span></span><br><span class="line">            codeList.append(url) <span class="comment"># url[: len]</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> codeList</span><br></pre></td></tr></table></figure><h2 id="个人完整代码："><a href="#个人完整代码：" class="headerlink" title="个人完整代码："></a>个人完整代码：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request   <span class="comment">#python3.X写法</span></span><br><span class="line"><span class="comment">#import urllib             #python2.X写法</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="keyword">import</span> re       <span class="comment">#正则表达式</span></span><br><span class="line"><span class="keyword">import</span> jieba    <span class="comment">#分词包 中文分词操作 结巴分词</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy    <span class="comment">#numpy计算包</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">python2.X 关于 urllib的用法</span></span><br><span class="line"><span class="string">    import urllib</span></span><br><span class="line"><span class="string">    text = urllib.urlopen(url).read()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">python3.X 关于 urllib的用法</span></span><br><span class="line"><span class="string">    import urllib.request  #from urllib import request</span></span><br><span class="line"><span class="string">    response = urllib.request.urlopen(url)</span></span><br><span class="line"><span class="string">    text = response.read()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getList</span><span class="params">()</span>:</span></span><br><span class="line">    resp = request.urlopen(<span class="string">'https://movie.douban.com/nowplaying/beijing/'</span>)  <span class="comment">#获取url下的影片列表;python2.x下使用urllib.urlopen()</span></span><br><span class="line">    html_data = resp.read().decode(<span class="string">'utf-8'</span>) <span class="comment"># 读取返回的数据(返回页面的html代码)</span></span><br><span class="line">    <span class="comment"># print(html_data)</span></span><br><span class="line"></span><br><span class="line">    soup = bs(html_data, <span class="string">'html.parser'</span>) <span class="comment"># 解析html代码 开始获取其中的数据</span></span><br><span class="line">    nowplaying_movie = soup.find_all(<span class="string">'div'</span>, id = <span class="string">'nowplaying'</span>)  <span class="comment">#获取id为nowplaying的div标签以及内部的代码 (得到的是一个list)</span></span><br><span class="line">    <span class="comment"># print (nowplaying_movie);</span></span><br><span class="line">    nowplaying_movie_list = nowplaying_movie[<span class="number">0</span>].find_all(<span class="string">'li'</span>, class_ = <span class="string">'list-item'</span>) <span class="comment">#获取class是list-item的所有li标签</span></span><br><span class="line">    <span class="comment"># print (nowplaying_movie_list);</span></span><br><span class="line">    <span class="comment"># print (nowplaying_movie_list[0]['id'], '\n');   # 打印第一个影片的id</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""测试代码 开始"""</span></span><br><span class="line">    <span class="comment"># test = nowplaying_movie_list[0].find_all('ul')</span></span><br><span class="line">    <span class="comment"># print (test)</span></span><br><span class="line">    <span class="comment"># test = nowplaying_movie_list[0].find_all('ul')[0].find_all('li')[1]</span></span><br><span class="line">    <span class="comment"># print (test)</span></span><br><span class="line">    <span class="string">"""测试代码 结束"""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nowplaying_movie_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getComments</span><span class="params">(nowplaying_movie_list, num)</span>:</span></span><br><span class="line">    requrl = <span class="string">"https://movie.douban.com/subject/"</span> + nowplaying_movie_list[num][<span class="string">'id'</span>] + <span class="string">"/comments?start=0&amp;limit=20"</span> <span class="comment">#获取url下的影片短评列表</span></span><br><span class="line">    resp = urllib.request.urlopen(requrl)</span><br><span class="line">    html_data = resp.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    soup = bs(html_data, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line">    title = soup.find(<span class="string">'title'</span>)</span><br><span class="line">    print(title.string)</span><br><span class="line"></span><br><span class="line">    comment_div_list = soup.find_all(<span class="string">'div'</span>, class_ = <span class="string">'comment'</span>)</span><br><span class="line">    <span class="comment">#print (comment_div_list)</span></span><br><span class="line">    commentList = []  <span class="comment">#存放所有的短评内容数据</span></span><br><span class="line">    <span class="keyword">for</span> cm <span class="keyword">in</span> comment_div_list:</span><br><span class="line">        <span class="keyword">if</span> cm.find_all(<span class="string">'p'</span>)[<span class="number">0</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            commentList.append(cm.find_all(<span class="string">'p'</span>)[<span class="number">0</span>].string) <span class="comment">#把短评内容存放在列表中</span></span><br><span class="line">    <span class="comment"># print (comments)</span></span><br><span class="line"></span><br><span class="line">    comments = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(len(commentList)):</span><br><span class="line">        comments = comments + (str(commentList[k])).strip()</span><br><span class="line">    <span class="comment">#print (comments)</span></span><br><span class="line">    pattern = re.compile(<span class="string">r'[\u4e00-\u9fa5]+'</span>)  <span class="comment">#去除标点符号(正则表达式)</span></span><br><span class="line">    filterdata = re.findall(pattern, comments)</span><br><span class="line">    cleaned_comments = <span class="string">''</span>.join(filterdata) <span class="comment"># 把filterdata按照空字符串为间隔连接起来</span></span><br><span class="line">    <span class="comment"># print (cleaned_comments)</span></span><br><span class="line"></span><br><span class="line">    segment = jieba.lcut(cleaned_comments) <span class="comment">#list</span></span><br><span class="line">    <span class="comment"># print (segment)</span></span><br><span class="line">    words_df = pd.DataFrame(&#123;<span class="string">'segment'</span>:segment&#125;)  <span class="comment">#格式转换</span></span><br><span class="line">    <span class="comment"># words_df.head()</span></span><br><span class="line">    <span class="comment"># print(words_df)</span></span><br><span class="line">    <span class="comment"># print (words_df.segment)</span></span><br><span class="line">    <span class="comment"># 数据中有“的”、“是”、“我”、“你”等虚词（停用词），而这些词在任何场景中都是高频时，并且没有实际的含义，所以我们要他们进行清除。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#从网上下载常用停用词文件 stopwords.txt 然后对比去除统计结果中所有的停用词</span></span><br><span class="line">    stopwords=pd.read_csv(<span class="string">"E:/stopwords.txt"</span>,index_col=<span class="literal">False</span>,quoting=<span class="number">3</span>,sep=<span class="string">"\t"</span>,names=[<span class="string">'stopword'</span>], encoding=<span class="string">'utf-8'</span>)<span class="comment">#quoting=3全不引用</span></span><br><span class="line">    <span class="comment"># print (stopwords.stopword)</span></span><br><span class="line">    <span class="comment"># print (words_df.segment.isin(stopwords.stopword))</span></span><br><span class="line">    words_df = words_df[~words_df.segment.isin(stopwords.stopword)]  <span class="comment">#stopwords.txt不能有空格</span></span><br><span class="line">    words_df.head()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#进行词频统计</span></span><br><span class="line">    words_stat = words_df.groupby(by=[<span class="string">'segment'</span>])[<span class="string">'segment'</span>].agg(&#123;<span class="string">"计数"</span>:numpy.size&#125;) <span class="comment"># 按照segment分类</span></span><br><span class="line">    words_stat = words_stat.reset_index().sort_values(by=[<span class="string">"计数"</span>],ascending=<span class="literal">False</span>)  <span class="comment">#词频按照 计数 由大到小排列</span></span><br><span class="line">    words_stat.head()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> words_stat</span><br><span class="line"></span><br><span class="line"><span class="comment">#词云展示</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(words_stat)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> matplotlib</span><br><span class="line">    %matplotlib inline</span><br><span class="line"></span><br><span class="line">    matplotlib.rcParams[<span class="string">'figure.figsize'</span>] = (<span class="number">10.0</span>, <span class="number">5.0</span>)</span><br><span class="line">    <span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud <span class="comment">#词云包</span></span><br><span class="line"></span><br><span class="line">    wordcloud=WordCloud(font_path=<span class="string">"E:/simhei.ttf"</span>,background_color=<span class="string">"white"</span>,max_font_size=<span class="number">80</span>)  <span class="comment">#指定字体类型、字体大小和字体颜色</span></span><br><span class="line">    <span class="comment"># print (wordcloud)</span></span><br><span class="line">    word_frequence = &#123;x[<span class="number">0</span>]:x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> words_stat.head(<span class="number">1000</span>).values&#125;</span><br><span class="line">    <span class="comment"># print (word_frequence)</span></span><br><span class="line"></span><br><span class="line">    wordcloud=wordcloud.fit_words(word_frequence)</span><br><span class="line">    matplotlib.pyplot.imshow(wordcloud)</span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span> <span class="comment">#从0开始, 获取豆瓣最新上映电影短评关键信息</span></span><br><span class="line">movie_list = getList()</span><br><span class="line">words_stat = getComments(movie_list, num)</span><br><span class="line">show(words_stat)</span><br></pre></td></tr></table></figure><h2 id="别人家的代码【滑稽】："><a href="#别人家的代码【滑稽】：" class="headerlink" title="别人家的代码【滑稽】："></a>别人家的代码【滑稽】：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">__author__ = <span class="string">'hang'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"><span class="keyword">import</span> jieba    <span class="comment">#分词包</span></span><br><span class="line"><span class="keyword">import</span> numpy    <span class="comment">#numpy计算包</span></span><br><span class="line"><span class="keyword">import</span> codecs   <span class="comment">#codecs提供的open方法来指定打开的文件的语言编码，它会在读取的时候自动转换为内部unicode</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">matplotlib.rcParams[<span class="string">'figure.figsize'</span>] = (<span class="number">10.0</span>, <span class="number">5.0</span>)</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud<span class="comment">#词云包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分析网页函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNowPlayingMovie_list</span><span class="params">()</span>:</span></span><br><span class="line">    resp = request.urlopen(<span class="string">'https://movie.douban.com/nowplaying/hangzhou/'</span>)</span><br><span class="line">    html_data = resp.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    soup = bs(html_data, <span class="string">'html.parser'</span>)</span><br><span class="line">    nowplaying_movie = soup.find_all(<span class="string">'div'</span>, id=<span class="string">'nowplaying'</span>)</span><br><span class="line">    nowplaying_movie_list = nowplaying_movie[<span class="number">0</span>].find_all(<span class="string">'li'</span>, class_=<span class="string">'list-item'</span>)</span><br><span class="line">    nowplaying_list = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> nowplaying_movie_list:</span><br><span class="line">        nowplaying_dict = &#123;&#125;</span><br><span class="line">        nowplaying_dict[<span class="string">'id'</span>] = item[<span class="string">'data-subject'</span>]</span><br><span class="line">        <span class="keyword">for</span> tag_img_item <span class="keyword">in</span> item.find_all(<span class="string">'img'</span>):</span><br><span class="line">            nowplaying_dict[<span class="string">'name'</span>] = tag_img_item[<span class="string">'alt'</span>]</span><br><span class="line">            nowplaying_list.append(nowplaying_dict)</span><br><span class="line">    <span class="keyword">return</span> nowplaying_list</span><br><span class="line"></span><br><span class="line"><span class="comment">#爬取评论函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCommentsById</span><span class="params">(movieId, pageNum)</span>:</span></span><br><span class="line">    eachCommentList = [];</span><br><span class="line">    <span class="keyword">if</span> pageNum&gt;<span class="number">0</span>:</span><br><span class="line">         start = (pageNum<span class="number">-1</span>) * <span class="number">20</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    requrl = <span class="string">'https://movie.douban.com/subject/'</span> + movieId + <span class="string">'/comments'</span> +<span class="string">'?'</span> +<span class="string">'start='</span> + str(start) + <span class="string">'&amp;limit=20'</span></span><br><span class="line">    print(requrl)</span><br><span class="line">    resp = request.urlopen(requrl)</span><br><span class="line">    html_data = resp.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    soup = bs(html_data, <span class="string">'html.parser'</span>)</span><br><span class="line">    comment_div_lits = soup.find_all(<span class="string">'div'</span>, class_=<span class="string">'comment'</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> comment_div_lits:</span><br><span class="line">        <span class="keyword">if</span> item.find_all(<span class="string">'p'</span>)[<span class="number">0</span>].string <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            eachCommentList.append(item.find_all(<span class="string">'p'</span>)[<span class="number">0</span>].string)</span><br><span class="line">    <span class="keyword">return</span> eachCommentList</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#循环获取第一个电影的前10页评论</span></span><br><span class="line">    commentList = []</span><br><span class="line">    NowPlayingMovie_list = getNowPlayingMovie_list()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        num = i + <span class="number">1</span></span><br><span class="line">        commentList_temp = getCommentsById(NowPlayingMovie_list[<span class="number">0</span>][<span class="string">'id'</span>], num)</span><br><span class="line">        commentList.append(commentList_temp)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#将列表中的数据转换为字符串</span></span><br><span class="line">    comments = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(len(commentList)):</span><br><span class="line">        comments = comments + (str(commentList[k])).strip()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#使用正则表达式去除标点符号</span></span><br><span class="line">    pattern = re.compile(<span class="string">r'[\u4e00-\u9fa5]+'</span>)</span><br><span class="line">    filterdata = re.findall(pattern, comments)</span><br><span class="line">    cleaned_comments = <span class="string">''</span>.join(filterdata)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#使用结巴分词进行中文分词</span></span><br><span class="line">    segment = jieba.lcut(cleaned_comments)</span><br><span class="line">    words_df=pd.DataFrame(&#123;<span class="string">'segment'</span>:segment&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#去掉停用词</span></span><br><span class="line">    stopwords=pd.read_csv(<span class="string">"stopwords.txt"</span>,index_col=<span class="literal">False</span>,quoting=<span class="number">3</span>,sep=<span class="string">"\t"</span>,names=[<span class="string">'stopword'</span>], encoding=<span class="string">'utf-8'</span>)<span class="comment">#quoting=3全不引用</span></span><br><span class="line">    words_df=words_df[~words_df.segment.isin(stopwords.stopword)]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#统计词频</span></span><br><span class="line">    words_stat=words_df.groupby(by=[<span class="string">'segment'</span>])[<span class="string">'segment'</span>].agg(&#123;<span class="string">"计数"</span>:numpy.size&#125;)</span><br><span class="line">    words_stat=words_stat.reset_index().sort_values(by=[<span class="string">"计数"</span>],ascending=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#用词云进行显示</span></span><br><span class="line">    wordcloud=WordCloud(font_path=<span class="string">"simhei.ttf"</span>,background_color=<span class="string">"white"</span>,max_font_size=<span class="number">80</span>)</span><br><span class="line">    word_frequence = &#123;x[<span class="number">0</span>]:x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> words_stat.head(<span class="number">1000</span>).values&#125;</span><br><span class="line"></span><br><span class="line">    word_frequence_list = []</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> word_frequence:</span><br><span class="line">        temp = (key,word_frequence[key])</span><br><span class="line">        word_frequence_list.append(temp)</span><br><span class="line"></span><br><span class="line">    wordcloud=wordcloud.fit_words(word_frequence_list)</span><br><span class="line">    plt.imshow(wordcloud)</span><br><span class="line"></span><br><span class="line"><span class="comment">#主函数</span></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><blockquote><p>转载自 链接地址: <a href="http://python.jobbole.com/88325/" target="_blank" rel="noopener">http://python.jobbole.com/88325/</a></p></blockquote><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.com" target="_blank" rel="noopener">http://zj2626.com</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VM options配置</title>
      <link href="/2020/01/15/20170924_VM-options%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/01/15/20170924_VM-options%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转载自 链接地址: <a href="http://www.cnblogs.com/mingforyou/archive/2012/03/03/2378143.html" target="_blank" rel="noopener">http://www.cnblogs.com/mingforyou/archive/2012/03/03/2378143.html</a><br>转载自 链接地址: <a href="http://unixboy.iteye.com/blog/174173/" target="_blank" rel="noopener">http://unixboy.iteye.com/blog/174173/</a></p></blockquote><a id="more"></a><h1 id="文章一"><a href="#文章一" class="headerlink" title="文章一"></a>文章一</h1><p>Eclipse崩溃，错误提示：<br>MyEclipse has detected that less than 5% of the 64MB of Perm<br>Gen (Non-heap memory) space remains. It is strongly recommended<br>that you exit and restart MyEclipse with new virtual machine memory<br>paramters to increase this memory.   Failure to do so can result in<br>data loss. The recommended Eclipse memory parameters are:<br>eclipse.exe -vmargs -Xms128M -Xmx512M -XX:PermSize=64M -XX:MaxPermSize=128M</p><p>1.参数的含义<br>-vmargs -Xms128M -Xmx512M -XX:PermSize=64M -XX:MaxPermSize=128M<br>-vmargs 说明后面是VM的参数，所以后面的其实都是JVM的参数了<br>-Xms128m JVM初始分配的堆内存<br>-Xmx512m JVM最大允许分配的堆内存，按需分配<br>-XX:PermSize=64M JVM初始分配的非堆内存<br>-XX:MaxPermSize=128M JVM最大允许分配的非堆内存，按需分配</p><p>我们首先了解一下JVM内存管理的机制，然后再解释每个参数代表的含义。</p><h2 id="堆-Heap-和非堆-Non-heap-内存"><a href="#堆-Heap-和非堆-Non-heap-内存" class="headerlink" title="堆(Heap)和非堆(Non-heap)内存"></a>堆(Heap)和非堆(Non-heap)内存</h2><p> 按照官方的说法：“Java 虚拟机具有一个堆，堆是运行时数据区域，所有类实例和数组的内存均从此处分配。堆是在 Java 虚拟机启动时创建的。”“在JVM中堆之外的内存称为非堆内存(Non-heap memory)”。<br> 可以看出JVM主要管理两种类型的内存：堆和非堆。简单来说堆就是Java代码可及的内存，是留给开发人员使用的；非堆就是JVM留给自己用的，<br> 所以方法区、JVM内部处理或优化所需的内存(如JIT编译后的代码缓存)、每个类结构(如运行时常数池、字段和方法数据)以及方法和构造方法的代码都在非堆内存中。 </p><h3 id="堆内存分配"><a href="#堆内存分配" class="headerlink" title="堆内存分配"></a>堆内存分配</h3><p> JVM初始分配的堆内存由-Xms指定，默认是物理内存的1/64；JVM最大分配的堆内存由-Xmx指定，默认是物理内存的1/4。默认空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制；<br> 空余堆内存大于70%时，JVM会减少堆直到-Xms的最小限制。因此服务器一般设置-Xms、-Xmx 相等以避免在每次GC 后调整堆的大小。<br> 说明：如果-Xmx 不指定或者指定偏小，应用可能会导致java.lang.OutOfMemory错误，此错误来自JVM，不是Throwable的，无法用try…catch捕捉。 </p><h3 id="非堆内存分配"><a href="#非堆内存分配" class="headerlink" title="非堆内存分配"></a>非堆内存分配</h3><p> JVM使用-XX:PermSize设置非堆内存初始值，默认是物理内存的1/64；由XX:MaxPermSize设置最大非堆内存的大小，默认是物理内存的1/4。（还有一说：MaxPermSize缺省值和-server -client选项相关，<br> -server选项下默认MaxPermSize为64m，-client选项下默认MaxPermSize为32m。这个我没有实验。）<br> 上面错误信息中的PermGen space的全称是Permanent Generation space，是指内存的永久保存区域。还没有弄明白PermGen space是属于非堆内存，还是就是非堆内存，但至少是属于了。<br>XX:MaxPermSize设置过小会导致java.lang.OutOfMemoryError: PermGen space 就是内存益出。<br>说说为什么会内存益出：<br>（1）这一部分内存用于存放Class和Meta的信息，Class在被 Load的时候被放入PermGen space区域，它和存放Instance的Heap区域不同。<br>（2）GC(Garbage Collection)不会在主程序运行期对PermGen space进行清理，所以如果你的APP会LOAD很多CLASS 的话,就很可能出现PermGen space错误。<br>  这种错误常见在web服务器对JSP进行pre compile的时候。  </p><h2 id="JVM内存限制-最大值"><a href="#JVM内存限制-最大值" class="headerlink" title="JVM内存限制(最大值)"></a>JVM内存限制(最大值)</h2><p> 首先JVM内存限制于实际的最大物理内存，假设物理内存无限大的话，JVM内存的最大值跟操作系统有很大的关系。简单的说就32位处理器虽然可控内存空间有4GB,但是具体的操作系统会给一个限制，<br> 这个限制一般是2GB-3GB（一般来说Windows系统下为1.5G-2G，Linux系统下为2G-3G），而64bit以上的处理器就不会有限制了。</p><ol start="2"><li><p>为什么有的机器我将-Xmx和-XX:MaxPermSize都设置为512M之后Eclipse可以启动，而有些机器无法启动？<br>通过上面对JVM内存管理的介绍我们已经了解到JVM内存包含两种：堆内存和非堆内存，另外JVM最大内存首先取决于实际的物理内存和操作系统。所以说设置VM参数导致程序无法启动主要有以下几种原因：<br>1) 参数中-Xms的值大于-Xmx，或者-XX:PermSize的值大于-XX:MaxPermSize；<br>2) -Xmx的值和-XX:MaxPermSize的总和超过了JVM内存的最大限制，比如当前操作系统最大内存限制，或者实际的物理内存等等。说到实际物理内存这里需要说明一点的是，<br>如果你的内存是1024MB，但实际系统中用到的并不可能是1024MB，因为有一部分被硬件占用了。</p></li><li><p>为何将上面的参数写入到eclipse.ini文件Eclipse没有执行对应的设置？<br>那为什么同样的参数在快捷方式或者命令行中有效而在eclipse.ini文件中是无效的呢？这是因为我们没有遵守eclipse.ini文件的设置规则：<br>参数形如“项 值”这种形式，中间有空格的需要换行书写，如果值中有空格的需要用双引号包括起来。比如我们使用-vm C:/Java/jre1.6.0/bin/javaw.exe参数设置虚拟机，<br>在eclipse.ini文件中要写成这样：</p></li></ol><p>-vm<br>C:/Java/jre1.6.0/bin/javaw.exe<br>-vmargs<br>-Xms128M<br>-Xmx512M<br>-XX:PermSize=64M<br>-XX:MaxPermSize=128M </p><p>实际运行的结果可以通过Eclipse中“Help”-“About Eclipse SDK”窗口里面的“Configuration Details”按钮进行查看。<br>另外需要说明的是，Eclipse压缩包中自带的eclipse.ini文件内容是这样的：<br>-showsplash<br>org.eclipse.platform<br>–launcher.XXMaxPermSize<br>256m<br>-vmargs<br>-Xms40m<br>-Xmx256m<br>其中–launcher.XXMaxPermSize（注意最前面是两个连接线）跟-XX:MaxPermSize参数的含义基本是一样的，我觉得唯一的区别就是前者是eclipse.exe启动的时候设置的参数，<br>而后者是eclipse所使用的JVM中的参数。其实二者设置一个就可以了，所以这里可以把–launcher.XXMaxPermSize和下一行使用#注释掉。</p><ol start="4"><li>其他的启动参数。 如果你有一个双核的CPU，也许可以尝试这个参数:<br>-XX:+UseParallelGC<br>让GC可以更快的执行。（只是JDK 5里对GC新增加的参数）</li></ol><p>补充：<br>　　如果你的WEB APP下都用了大量的第三方jar，其大小超过了服务器jvm默认的大小，那么就会产生内存益出问题了。<br>解决方法： 设置MaxPermSize大小<br>可以在myelipse里选中相应的服务器比如tomcat5，展开里面的JDK子项页面，来增加服务器启动的JVM参数设置：</p><p>-Xms128m<br>-Xmx256m<br>-XX:PermSize=128M<br>-XX:MaxNewSize=256m<br>-XX:MaxPermSize=256m</p><p>或者手动设置MaxPermSize大小,比如tomcat，<br>修改TOMCAT_HOME/bin/catalina.bat，在echo “Using CATALINA_BASE: $CATALINA_BASE”上面加入以下行：<br>JAVA_OPTS=”-server -XX:PermSize=64M -XX:MaxPermSize=128m</p><p>建议：将相同的第三方jar文件移置到tomcat/shared/lib目录下，这样可以减少jar 文档重复占用内存</p><h1 id="文章二"><a href="#文章二" class="headerlink" title="文章二"></a>文章二</h1><h2 id="1-堆大小设置"><a href="#1-堆大小设置" class="headerlink" title="1.堆大小设置"></a>1.堆大小设置</h2><p>JVM 中最大堆大小有三方面限制：相关操作系统的数据模型（32-bt还是64-bit）限制；系统的可用虚拟内存限制；系统的可用物理内存限制。32位系统下，一般限制在1.5G~2G；64为操作系统对内存无限制。我在Windows Server 2003 系统，3.5G物理内存，JDK5.0下测试，最大可设置为1478m。</p><h3 id="典型设置："><a href="#典型设置：" class="headerlink" title="典型设置："></a>典型设置：</h3><ul><li>java -Xmx3550m -Xms3550m -Xmn2g -Xss128k</li></ul><p>-Xmx3550m：设置JVM最大可用内存为3550M。<br>-Xms3550m：设置JVM初始内存为3550m。此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。<br>-Xmn2g：设置年轻代大小为2G。整个JVM内存大小=年轻代大小 + 年老代大小 + 持久代大小。持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。<br>-Xss128k：设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1M，以前每个线程堆栈大小为256K。更具应用的线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。</p><ul><li>java -Xmx3550m -Xms3550m -Xss128k -XX:NewRatio=4 -XX:SurvivorRatio=4 -XX:MaxPermSize=16m -XX:MaxTenuringThreshold=0</li></ul><p>-XX:NewRatio=4:设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1/5<br>-XX:SurvivorRatio=4：设置年轻代中Eden区与Survivor区的大小比值。设置为4，则两个Survivor区与一个Eden区的比值为2:4，一个Survivor区占整个年轻代的1/6<br>-XX:MaxPermSize=16m:设置持久代大小为16m。<br>-XX:MaxTenuringThreshold=0：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。</p><h2 id="2-回收器选择"><a href="#2-回收器选择" class="headerlink" title="2.回收器选择"></a>2.回收器选择</h2><p>JVM给了三种选择：串行收集器、并行收集器、并发收集器，但是串行收集器只适用于小数据量的情况，所以这里的选择主要针对并行收集器和并发收集器。默认情况下，JDK5.0以前都是使用串行收集器，如果想使用其他收集器需要在启动时加入相应参数。JDK5.0以后，JVM会根据当前系统配置进行判断。</p><h3 id="吞吐量优先的并行收集器"><a href="#吞吐量优先的并行收集器" class="headerlink" title="吞吐量优先的并行收集器"></a>吞吐量优先的并行收集器</h3><p>如上文所述，并行收集器主要以到达一定的吞吐量为目标，适用于科学技术和后台处理等。</p><blockquote><p>典型配置：</p></blockquote><ul><li><p>java -Xmx3800m -Xms3800m -Xmn2g -Xss128k -XX:+UseParallelGC -XX:ParallelGCThreads=20<br>-XX:+UseParallelGC：选择垃圾收集器为并行收集器。此配置仅对年轻代有效。即上述配置下，年轻代使用并发收集，而年老代仍旧使用串行收集。<br>-XX:ParallelGCThreads=20：配置并行收集器的线程数，即：同时多少个线程一起进行垃圾回收。此值最好配置与处理器数目相等。</p></li><li><p>java -Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:+UseParallelGC -XX:ParallelGCThreads=20 -XX:+UseParallelOldGC<br>-XX:+UseParallelOldGC：配置年老代垃圾收集方式为并行收集。JDK6.0支持对年老代并行收集。</p></li><li><p>java -Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:+UseParallelGC  -XX:MaxGCPauseMillis=100<br>-XX:MaxGCPauseMillis=100:设置每次年轻代垃圾回收的最长时间，如果无法满足此时间，JVM会自动调整年轻代大小，以满足此值。</p></li><li><p>java -Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:+UseParallelGC  -XX:MaxGCPauseMillis=100 -XX:+UseAdaptiveSizePolicy<br>-XX:+UseAdaptiveSizePolicy：设置此选项后，并行收集器会自动选择年轻代区大小和相应的Survivor区比例，以达到目标系统规定的最低相应时间或者收集频率等，此值建议使用并行收集器时，一直打开。</p></li></ul><h3 id="响应时间优先的并发收集器"><a href="#响应时间优先的并发收集器" class="headerlink" title="响应时间优先的并发收集器"></a>响应时间优先的并发收集器</h3><p>如上文所述，并发收集器主要是保证系统的响应时间，减少垃圾收集时的停顿时间。适用于应用服务器、电信领域等。</p><blockquote><p>典型配置：</p></blockquote><ul><li>java -Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:ParallelGCThreads=20 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC<br>-XX:+UseConcMarkSweepGC：设置年老代为并发收集。测试中配置这个以后，-XX:NewRatio=4的配置失效了，原因不明。所以，此时年轻代大小最好用-Xmn设置。<br>-XX:+UseParNewGC:设置年轻代为并行收集。可与CMS收集同时使用。JDK5.0以上，JVM会根据系统配置自行设置，所以无需再设置此值。</li><li>java -Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:+UseConcMarkSweepGC -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection<br>-XX:CMSFullGCsBeforeCompaction：由于并发收集器不对内存空间进行压缩、整理，所以运行一段时间以后会产生“碎片”，使得运行效率降低。此值设置运行多少次GC以后对内存空间进行压缩、整理。<br>-XX:+UseCMSCompactAtFullCollection：打开对年老代的压缩。可能会影响性能，但是可以消除碎片</li></ul><blockquote><p>辅助信息</p></blockquote><p>JVM提供了大量命令行参数，打印信息，供调试使用。主要有以下一些：</p><ul><li>-XX:+PrintGC<br>输出形式：[GC 118250K-&gt;113543K(130112K), 0.0094143 secs]<pre><code>[Full GC 121376K-&gt;10414K(130112K), 0.0650971 secs]</code></pre></li><li>-XX:+PrintGCDetails<br>输出形式：[GC [DefNew: 8614K-&gt;781K(9088K), 0.0123035 secs] 118250K-&gt;113543K(130112K), 0.0124633 secs]<pre><code>[GC [DefNew: 8614K-&gt;8614K(9088K), 0.0000665 secs][Tenured: 112761K-&gt;10414K(121024K), 0.0433488 secs] 121376K-&gt;10414K(130112K), 0.0436268 secs]</code></pre></li><li>-XX:+PrintGCTimeStamps -XX:+PrintGC：PrintGCTimeStamps可与上面两个混合使用<br>输出形式：11.851: [GC 98328K-&gt;93620K(130112K), 0.0082960 secs]</li><li>-XX:+PrintGCApplicationConcurrentTime:打印每次垃圾回收前，程序未中断的执行时间。可与上面混合使用<br>输出形式：Application time: 0.5291524 seconds</li><li>-XX:+PrintGCApplicationStoppedTime：打印垃圾回收期间程序暂停的时间。可与上面混合使用<br>输出形式：Total time for which application threads were stopped: 0.0468229 seconds</li><li>-XX:PrintHeapAtGC:打印GC前后的详细堆栈信息</li></ul><p>输出形式：</p><pre><code>34.702: [GC {Heap before gc invocations=7: def new generation   total 55296K, used 52568K [0x1ebd0000, 0x227d0000, 0x227d0000)eden space 49152K,  99% used [0x1ebd0000, 0x21bce430, 0x21bd0000)from space 6144K,  55% used [0x221d0000, 0x22527e10, 0x227d0000)  to   space 6144K,   0% used [0x21bd0000, 0x21bd0000, 0x221d0000) tenured generation   total 69632K, used 2696K [0x227d0000, 0x26bd0000, 0x26bd0000)the space 69632K,   3% used [0x227d0000, 0x22a720f8, 0x22a72200, 0x26bd0000) compacting perm gen  total 8192K, used 2898K [0x26bd0000, 0x273d0000, 0x2abd0000)   the space 8192K,  35% used [0x26bd0000, 0x26ea4ba8, 0x26ea4c00, 0x273d0000)    ro space 8192K,  66% used [0x2abd0000, 0x2b12bcc0, 0x2b12be00, 0x2b3d0000)    rw space 12288K,  46% used [0x2b3d0000, 0x2b972060, 0x2b972200, 0x2bfd0000)34.735: [DefNew: 52568K-&gt;3433K(55296K), 0.0072126 secs] 55264K-&gt;6615K(124928K)Heap after gc invocations=8: def new generation   total 55296K, used 3433K [0x1ebd0000, 0x227d0000, 0x227d0000)eden space 49152K,   0% used [0x1ebd0000, 0x1ebd0000, 0x21bd0000)  from space 6144K,  55% used [0x21bd0000, 0x21f2a5e8, 0x221d0000)  to   space 6144K,   0% used [0x221d0000, 0x221d0000, 0x227d0000) tenured generation   total 69632K, used 3182K [0x227d0000, 0x26bd0000, 0x26bd0000)the space 69632K,   4% used [0x227d0000, 0x22aeb958, 0x22aeba00, 0x26bd0000) compacting perm gen  total 8192K, used 2898K [0x26bd0000, 0x273d0000, 0x2abd0000)   the space 8192K,  35% used [0x26bd0000, 0x26ea4ba8, 0x26ea4c00, 0x273d0000)    ro space 8192K,  66% used [0x2abd0000, 0x2b12bcc0, 0x2b12be00, 0x2b3d0000)    rw space 12288K,  46% used [0x2b3d0000, 0x2b972060, 0x2b972200, 0x2bfd0000)}, 0.0757599 secs]</code></pre><ul><li>-Xloggc:filename:与上面几个配合使用，把相关日志信息记录到文件以便分析。</li></ul><blockquote><p>常见配置汇总</p></blockquote><p>1.堆设置</p><ul><li>-Xms:初始堆大小</li><li>-Xmx:最大堆大小</li><li>-XX:NewSize=n:设置年轻代大小</li><li>-XX:NewRatio=n:设置年轻代和年老代的比值。如:为3，表示年轻代与年老代比值为1：3，年轻代占整个年轻代年老代和的1/4</li><li>-XX:SurvivorRatio=n:年轻代中Eden区与两个Survivor区的比值。注意Survivor区有两个。如：3，表示Eden：Survivor=3：2，一个Survivor区占整个年轻代的1/5</li><li>-XX:MaxPermSize=n:设置持久代大小</li></ul><p>2.收集器设置</p><ul><li>-XX:+UseSerialGC:设置串行收集器</li><li>-XX:+UseParallelGC:设置并行收集器</li><li>-XX:+UseParalledlOldGC:设置并行年老代收集器</li><li>-XX:+UseConcMarkSweepGC:设置并发收集器</li></ul><p>3.垃圾回收统计信息</p><ul><li>-XX:+PrintGC</li><li>-XX:+PrintGCDetails</li><li>-XX:+PrintGCTimeStamps</li><li>-Xloggc:filename</li></ul><p>4.并行收集器设置</p><ul><li>-XX:ParallelGCThreads=n:设置并行收集器收集时使用的CPU数。并行收集线程数。</li><li>-XX:MaxGCPauseMillis=n:设置并行收集最大暂停时间</li><li>-XX:GCTimeRatio=n:设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)</li></ul><p>5.并发收集器设置</p><ul><li>-XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况。</li><li>-XX:ParallelGCThreads=n:设置并发收集器年轻代收集方式为并行收集时，使用的CPU数。并行收集线程数。</li></ul><h2 id="调优总结"><a href="#调优总结" class="headerlink" title="调优总结"></a>调优总结</h2><p>1.年轻代大小选择</p><ul><li>响应时间优先的应用：尽可能设大，直到接近系统的最低响应时间限制（根据实际情况选择）。在此种情况下，年轻代收集发生的频率也是最小的。同时，减少到达年老代的对象。</li><li>吞吐量优先的应用：尽可能的设置大，可能到达Gbit的程度。因为对响应时间没有要求，垃圾收集可以并行进行，一般适合8CPU以上的应用。</li></ul><p>2.年老代大小选择</p><ul><li><p>响应时间优先的应用：年老代使用并发收集器，所以其大小需要小心设置，一般要考虑并发会话率和会话持续时间等一些参数。如果堆设置小了，可以会造成内存碎片、高回收频率以及应用暂停而使用传统的标记清除方式；如果堆大了，则需要较长的收集时间。最优化的方案，一般需要参考以下数据获得：</p><pre><code>并发垃圾收集信息持久代并发收集次数传统GC信息花在年轻代和年老代回收上的时间比例</code></pre></li></ul><p>减少年轻代和年老代花费的时间，一般会提高应用的效率</p><ul><li>吞吐量优先的应用：一般吞吐量优先的应用都有一个很大的年轻代和一个较小的年老代。原因是，这样可以尽可能回收掉大部分短期对象，减少中期的对象，而年老代尽存放长期存活对象。</li></ul><p>3.较小堆引起的碎片问题<br>因为年老代的并发收集器使用标记、清除算法，所以不会对堆进行压缩。当收集器回收时，他会把相邻的空间进行合并，这样可以分配给较大的对象。但是，当堆空间较小时，运行一段时间以后，就会出现“碎片”，如果并发收集器找不到足够的空间，那么并发收集器将会停止，然后使用传统的标记、清除方式进行回收。如果出现“碎片”，可能需要进行如下配置：</p><ul><li>-XX:+UseCMSCompactAtFullCollection：使用并发收集器时，开启对年老代的压缩。</li><li>-XX:CMSFullGCsBeforeCompaction=0：上面配置开启的情况下，这里设置多少次Full GC后，对年老代进行压缩</li></ul><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入了解java虚拟机 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minor GC、Major GC和Full GC之间的区别</title>
      <link href="/2020/01/15/20170924_GC%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/01/15/20170924_GC%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转载链接地址: <a href="http://www.importnew.com/15820.html" target="_blank" rel="noopener">http://www.importnew.com/15820.html</a></p></blockquote><a id="more"></a><p>在 Plumbr 从事 GC 暂停检测相关功能的工作时，我被迫用自己的方式，通过大量文章、书籍和演讲来介绍我所做的工作。在整个过程中，经常对 Minor、Major、和 Full GC 事件的使用感到困惑。这也是我写这篇博客的原因，我希望能清楚地解释这其中的一些疑惑。</p><p>文章要求读者熟悉 JVM 内置的通用垃圾回收原则。堆内存划分为 Eden、Survivor 和 Tenured/Old 空间，代假设和其他不同的 GC 算法超出了本文讨论的范围。</p><img src="/2020/01/15/20170924_GC之间的区别/fd0c0db33776f042f62e5386131e487c.jpg" title="图"><h2 id="Minor-GC"><a href="#Minor-GC" class="headerlink" title="Minor GC"></a>Minor GC</h2><p>从年轻代空间（包括 Eden 和 Survivor 区域）回收内存被称为 Minor GC。这一定义既清晰又易于理解。但是，当发生Minor GC事件的时候，有一些有趣的地方需要注意到：</p><p>当 JVM 无法为一个新的对象分配空间时会触发 Minor GC，比如当 Eden 区满了。所以分配率越高，越频繁执行 Minor GC。<br>内存池被填满的时候，其中的内容全部会被复制，指针会从0开始跟踪空闲内存。Eden 和 Survivor 区进行了标记和复制操作，取代了经典的标记、扫描、压缩、清理操作。所以 Eden 和 Survivor 区不存在内存碎片。写指针总是停留在所使用内存池的顶部。<br>执行 Minor GC 操作时，不会影响到永久代。从永久代到年轻代的引用被当成 GC roots，从年轻代到永久代的引用在标记阶段被直接忽略掉。<br>质疑常规的认知，所有的 Minor GC 都会触发“全世界的暂停（stop-the-world）”，停止应用程序的线程。对于大部分应用程序，停顿导致的延迟都是可以忽略不计的。其中的真相就 是，大部分 Eden 区中的对象都能被认为是垃圾，永远也不会被复制到 Survivor 区或者老年代空间。如果正好相反，Eden 区大部分新生对象不符合 GC 条件，Minor GC 执行时暂停的时间将会长很多。<br>所以 Minor GC 的情况就相当清楚了——每次 Minor GC 会清理年轻代的内存。</p><h2 id="Major-GC-vs-Full-GC"><a href="#Major-GC-vs-Full-GC" class="headerlink" title="Major GC vs Full GC"></a>Major GC vs Full GC</h2><p>大家应该注意到，目前，这些术语无论是在 JVM 规范还是在垃圾收集研究论文中都没有正式的定义。但是我们一看就知道这些在我们已经知道的基础之上做出的定义是正确的，Minor GC 清理年轻带内存应该被设计得简单：</p><p>Major GC 是清理老年代。<br>Full GC 是清理整个堆空间—包括年轻代和老年代。<br>很不幸，实际上它还有点复杂且令人困惑。首先，许多 Major GC 是由 Minor GC 触发的，所以很多情况下将这两种 GC 分离是不太可能的。另一方面，许多现代垃圾收集机制会清理部分永久代空间，所以使用“cleaning”一词只是部分正确。</p><p>这使得我们不用去关心到底是叫 Major GC 还是 Full GC，大家应该关注当前的 GC 是否停止了所有应用程序的线程，还是能够并发的处理而不用停掉应用程序的线程。</p><p>这种混乱甚至内置到 JVM 标准工具。下面一个例子很好的解释了我的意思。让我们比较两个不同的工具 Concurrent Mark 和 Sweep collector (-XX:+UseConcMarkSweepGC)在 JVM 中运行时输出的跟踪记录。</p><hr><blockquote><p>第一次尝试通过 jstat 输出：</p></blockquote><p>my-precious: me$ jstat -gc -t 4235 1s</p><p>Time S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT<br> 5.7 34048.0 34048.0  0.0   34048.0 272640.0 194699.7 1756416.0   181419.9  18304.0 17865.1 2688.0 2497.6      3    0.275   0      0.000    0.275<br> 6.7 34048.0 34048.0 34048.0  0.0   272640.0 247555.4 1756416.0   263447.9  18816.0 18123.3 2688.0 2523.1      4    0.359   0      0.000    0.359<br> 7.7 34048.0 34048.0  0.0   34048.0 272640.0 257729.3 1756416.0   345109.8  19072.0 18396.6 2688.0 2550.3      5    0.451   0      0.000    0.451<br> 8.7 34048.0 34048.0 34048.0 34048.0 272640.0 272640.0 1756416.0  444982.5  19456.0 18681.3 2816.0 2575.8      7    0.550   0      0.000    0.550<br> 9.7 34048.0 34048.0 34046.7  0.0   272640.0 16777.0  1756416.0   587906.3  20096.0 19235.1 2944.0 2631.8      8    0.720   0      0.000    0.720<br>10.7 34048.0 34048.0  0.0   34046.2 272640.0 80171.6  1756416.0   664913.4  20352.0 19495.9 2944.0 2657.4      9    0.810   0      0.000    0.810<br>11.7 34048.0 34048.0 34048.0  0.0   272640.0 129480.8 1756416.0   745100.2  20608.0 19704.5 2944.0 2678.4     10    0.896   0      0.000    0.896<br>12.7 34048.0 34048.0  0.0   34046.6 272640.0 164070.7 1756416.0   822073.7  20992.0 19937.1 3072.0 2702.8     11    0.978   0      0.000    0.978<br>13.7 34048.0 34048.0 34048.0  0.0   272640.0 211949.9 1756416.0   897364.4  21248.0 20179.6 3072.0 2728.1     12    1.087   1      0.004    1.091<br>14.7 34048.0 34048.0  0.0   34047.1 272640.0 245801.5 1756416.0   597362.6  21504.0 20390.6 3072.0 2750.3     13    1.183   2      0.050    1.233<br>15.7 34048.0 34048.0  0.0   34048.0 272640.0 21474.1  1756416.0   757347.0  22012.0 20792.0 3200.0 2791.0     15    1.336   2      0.050    1.386<br>16.7 34048.0 34048.0 34047.0  0.0   272640.0 48378.0  1756416.0   838594.4  22268.0 21003.5 3200.0 2813.2     16    1.433   2      0.050    1.484</p><blockquote><p>这个片段是 JVM 启动后第17秒提取的。基于该信息，我们可以得出这样的结果，运行了12次 Minor GC、2次 Full GC，时间总跨度为50毫秒。通过 jconsole 或者 jvisualvm 这样的基于GUI的工具你能得到同样的结果。</p></blockquote><p>java -XX:+PrintGCDetails -XX:+UseConcMarkSweepGC eu.plumbr.demo.GarbageProducer</p><p>3.157: [GC (Allocation Failure) 3.157: [ParNew: 272640K-&gt;34048K(306688K), 0.0844702 secs] 272640K-&gt;69574K(2063104K), 0.0845560 secs] [Times: user=0.23 sys=0.03, real=0.09 secs]<br>4.092: [GC (Allocation Failure) 4.092: [ParNew: 306688K-&gt;34048K(306688K), 0.1013723 secs] 342214K-&gt;136584K(2063104K), 0.1014307 secs] [Times: user=0.25 sys=0.05, real=0.10 secs]<br>… cut for brevity …<br>11.292: [GC (Allocation Failure) 11.292: [ParNew: 306686K-&gt;34048K(306688K), 0.0857219 secs] 971599K-&gt;779148K(2063104K), 0.0857875 secs] [Times: user=0.26 sys=0.04, real=0.09 secs]<br>12.140: [GC (Allocation Failure) 12.140: [ParNew: 306688K-&gt;34046K(306688K), 0.0821774 secs] 1051788K-&gt;856120K(2063104K), 0.0822400 secs] [Times: user=0.25 sys=0.03, real=0.08 secs]<br>12.989: [GC (Allocation Failure) 12.989: [ParNew: 306686K-&gt;34048K(306688K), 0.1086667 secs] 1128760K-&gt;931412K(2063104K), 0.1087416 secs] [Times: user=0.24 sys=0.04, real=0.11 secs]<br>13.098: [GC (CMS Initial Mark) [1 CMS-initial-mark: 897364K(1756416K)] 936667K(2063104K), 0.0041705 secs] [Times: user=0.02 sys=0.00, real=0.00 secs]<br>13.102: [CMS-concurrent-mark-start]<br>13.341: [CMS-concurrent-mark: 0.238/0.238 secs] [Times: user=0.36 sys=0.01, real=0.24 secs]<br>13.341: [CMS-concurrent-preclean-start]<br>13.350: [CMS-concurrent-preclean: 0.009/0.009 secs] [Times: user=0.03 sys=0.00, real=0.01 secs]<br>13.350: [CMS-concurrent-abortable-preclean-start]<br>13.878: [GC (Allocation Failure) 13.878: [ParNew: 306688K-&gt;34047K(306688K), 0.0960456 secs] 1204052K-&gt;1010638K(2063104K), 0.0961542 secs] [Times: user=0.29 sys=0.04, real=0.09 secs]<br>14.366: [CMS-concurrent-abortable-preclean: 0.917/1.016 secs] [Times: user=2.22 sys=0.07, real=1.01 secs]<br>14.366: [GC (CMS Final Remark) [YG occupancy: 182593 K (306688 K)]14.366: [Rescan (parallel) , 0.0291598 secs]14.395: [weak refs processing, 0.0000232 secs]14.395: [class unloading, 0.0117661 secs]14.407: [scrub symbol table, 0.0015323 secs]14.409: [scrub string table, 0.0003221 secs][1 CMS-remark: 976591K(1756416K)] 1159184K(2063104K), 0.0462010 secs] [Times: user=0.14 sys=0.00, real=0.05 secs]<br>14.412: [CMS-concurrent-sweep-start]<br>14.633: [CMS-concurrent-sweep: 0.221/0.221 secs] [Times: user=0.37 sys=0.00, real=0.22 secs]<br>14.633: [CMS-concurrent-reset-start]<br>14.636: [CMS-concurrent-reset: 0.002/0.002 secs] [Times: user=0.00 sys=0.00, real=0.00</p><hr><blockquote><p>在点头同意这个结论之前，让我们看看来自同一个 JVM 启动收集的垃圾收集日志的输出。显然- XX ： + PrintGCDetails 告诉我们一个不同且更详细的故事：</p></blockquote><p>基于这些信息，我们可以看到12次 Minor GC 后开始有些和上面不一样了。没有运行两次 Full GC，这不同的地方在于单个 GC 在永久代中不同阶段运行了两次：</p><ul><li>最初的标记阶段，用了0.0041705秒也就是4ms左右。这个阶段会暂停“全世界（ stop-the-world）”的事件，停止所有应用程序的线程，然后开始标记。</li><li>并行执行标记和清洗阶段。这些都是和应用程序线程并行的。</li><li>最后 Remark 阶段，花费了0.0462010秒约46ms。这个阶段会再次暂停所有的事件。</li><li>并行执行清理操作。正如其名，此阶段也是并行的，不会停止其他线程。</li></ul><p>所以，正如我们从垃圾回收日志中所看到的那样，实际上只是执行了 Major GC 去清理老年代空间而已，而不是执行了两次 Full GC。</p><p>如果你是后期做决 定的话，那么由 jstat 提供的数据会引导你做出正确的决策。它正确列出的两个暂停所有事件的情况，导致所有线程停止了共计50ms。但是如果你试图优化吞吐量，你会被误导的。清 单只列出了回收初始标记和最终 Remark 阶段，jstat的输出看不到那些并发完成的工作。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>考虑到这种情况，最好避免以 Minor、Major、Full GC 这种方式来思考问题。而应该监控应用延迟或者吞吐量，然后将 GC 事件和结果联系起来。</p><p>随着这些 GC 事件的发生，你需要额外的关注某些信息，GC 事件是强制所有应用程序线程停止了还是并行的处理了部分事件。</p><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入了解java虚拟机 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM的年轻代以及GC回收细节</title>
      <link href="/2020/01/15/20170924_JVM%E7%9A%84%E5%B9%B4%E8%BD%BB%E4%BB%A3%E4%BB%A5%E5%8F%8AGC%E5%9B%9E%E6%94%B6%E7%BB%86%E8%8A%82/"/>
      <url>/2020/01/15/20170924_JVM%E7%9A%84%E5%B9%B4%E8%BD%BB%E4%BB%A3%E4%BB%A5%E5%8F%8AGC%E5%9B%9E%E6%94%B6%E7%BB%86%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转载自并发编程网 链接地址: <a href="http://ifeve.com/jvm-yong-generation/" target="_blank" rel="noopener">http://ifeve.com/jvm-yong-generation/</a></p></blockquote><a id="more"></a><h2 id="为什么会有年轻代"><a href="#为什么会有年轻代" class="headerlink" title="为什么会有年轻代"></a>为什么会有年轻代</h2><p>我们先来屡屡，为什么需要把堆分代？不分代不能完成他所做的事情么？其实不分代完全可以，分代的唯一理由就是优化GC性能。你先想想，如果没有分代，那我们所有的对象都在一块，GC的时候我们要找到哪些对象没用，这样就会对堆的所有区域进行扫描。而我们的很多对象都是朝生夕死的，如果分代的话，我们把新创建的对象放到某一地方，当GC的时候先把这块存“朝生夕死”对象的区域进行回收，这样就会腾出很大的空间出来。</p><h2 id="年轻代中的GC"><a href="#年轻代中的GC" class="headerlink" title="年轻代中的GC"></a>年轻代中的GC</h2><p>HotSpot JVM把年轻代分为了三部分：1个Eden区和2个Survivor区（分别叫from和to）。默认比例为8：1,为啥默认会是这个比例，接下来我们会聊到。一般情况下，新创建的对象都会被分配到Eden区(一些大对象特殊处理),这些对象经过第一次Minor GC后，如果仍然存活，将会被移到Survivor区。对象在Survivor区中每熬过一次Minor GC，年龄就会增加1岁，当它的年龄增加到一定程度时，就会被移动到年老代中。</p><p>因为年轻代中的对象基本都是朝生夕死的(80%以上)，所以在年轻代的垃圾回收算法使用的是复制算法，复制算法的基本思想就是将内存分为两块，每次只用其中一块，当这一块内存用完，就将还活着的对象复制到另外一块上面。复制算法不会产生内存碎片。</p><p>在GC开始的时候，对象只会存在于Eden区和名为“From”的Survivor区，Survivor区“To”是空的。紧接着进行GC，Eden区中所有存活的对象都会被复制到“To”，而在“From”区中，仍存活的对象会根据他们的年龄值来决定去向。年龄达到一定值(年龄阈值，可以通过-XX:MaxTenuringThreshold来设置)的对象会被移动到年老代中，没有达到阈值的对象会被复制到“To”区域。经过这次GC后，Eden区和From区已经被清空。这个时候，“From”和“To”会交换他们的角色，也就是新的“To”就是上次GC前的“From”，新的“From”就是上次GC前的“To”。不管怎样，都会保证名为To的Survivor区域是空的。Minor GC会一直重复这样的过程，直到“To”区被填满，“To”区被填满之后，会将所有对象移动到年老代中。</p><img src="/2020/01/15/20170924_JVM的年轻代以及GC回收细节/young_gc.png" title="图"><h2 id="一个对象的这一辈子"><a href="#一个对象的这一辈子" class="headerlink" title="一个对象的这一辈子"></a>一个对象的这一辈子</h2><p>我是一个普通的java对象，我出生在Eden区，在Eden区我还看到和我长的很像的小兄弟，我们在Eden区中玩了挺长时间。有一天Eden区中的人实在是太多了，我就被迫去了Survivor区的“From”区，自从去了Survivor区，我就开始漂了，有时候在Survivor的“From”区，有时候在Survivor的“To”区，居无定所。直到我18岁的时候，爸爸说我成人了，该去社会上闯闯了。于是我就去了年老代那边，年老代里，人很多，并且年龄都挺大的，我在这里也认识了很多人。在年老代里，我生活了20年(每次GC加一岁)，然后被回收。</p><h2 id="有关年轻代的JVM参数"><a href="#有关年轻代的JVM参数" class="headerlink" title="有关年轻代的JVM参数"></a>有关年轻代的JVM参数</h2><p>1)-XX:NewSize和-XX:MaxNewSize</p><p>用于设置年轻代的大小，建议设为整个堆大小的1/3或者1/4,两个值设为一样大。</p><p>2)-XX:SurvivorRatio</p><p>用于设置Eden和其中一个Survivor的比值，这个值也比较重要。</p><p>3)-XX:+PrintTenuringDistribution</p><p>这个参数用于显示每次Minor GC时Survivor区中各个年龄段的对象的大小。</p><p>4).-XX:InitialTenuringThreshol和-XX:MaxTenuringThreshold</p><p>用于设置晋升到老年代的对象年龄的最小值和最大值，每个对象在坚持过一次Minor GC之后，年龄就加1。</p><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入了解java虚拟机 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM运行原理</title>
      <link href="/2020/01/15/20170924_JVM%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/"/>
      <url>/2020/01/15/20170924_JVM%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>1、动态编译（dynamic compilation）指的是“在运行时进行编译”；与之相对的是事前编译（ahead-of-time compilation，简称AOT），也叫静态编译（static compilation）。</p><p>2、JIT编译（just-in-time compilation）狭义来说是当某段代码即将第一次被执行时进行编译，因而叫“即时编译”。JIT编译是动态编译的一种特例。JIT编译一词后来被泛化，时常与动态编译等价；但要注意广义与狭义的JIT编译所指的区别。</p><p>3、自适应动态编译（adaptive dynamic compilation）也是一种动态编译，但它通常执行的时机比JIT编译迟，先让程序“以某种式”先运行起来，收集一些信息之后再做动态编译。这样的编译可以更加优化。</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="JVM运行原理"><a href="#JVM运行原理" class="headerlink" title="JVM运行原理"></a>JVM运行原理</h3><img src="/2020/01/15/20170924_JVM运行原理/20160812104144969.jpg" title="图"><p>在部分商用虚拟机中（如HotSpot），Java程序最初是通过解释器（Interpreter）进行解释执行的，当虚拟机发现某个方法或代码块的运行特别频繁时，就会把这些代码认定为“热点代码”。为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各种层次的优化，完成这个任务的编译器称为即时编译器（Just In Time Compiler，下文统称JIT编译器）。<br>即时编译器并不是虚拟机必须的部分，Java虚拟机规范并没有规定Java虚拟机内必须要有即时编译器存在，更没有限定或指导即时编译器应该如何去实现。但是，即时编译器编译性能的好坏、代码优化程度的高低却是衡量一款商用虚拟机优秀与否的最关键的指标之一，它也是虚拟机中最核心且最能体现虚拟机技术水平的部分。</p><p>由于Java虚拟机规范并没有具体的约束规则去限制即使编译器应该如何实现，所以这部分功能完全是与虚拟机具体实现相关的内容，如无特殊说明，我们提到的编译器、即时编译器都是指Hotspot虚拟机内的即时编译器，虚拟机也是特指HotSpot虚拟机。</p><h3 id="为什么HotSpot虚拟机要使用解释器与编译器并存的架构？"><a href="#为什么HotSpot虚拟机要使用解释器与编译器并存的架构？" class="headerlink" title="为什么HotSpot虚拟机要使用解释器与编译器并存的架构？"></a>为什么HotSpot虚拟机要使用解释器与编译器并存的架构？</h3><p>尽管并不是所有的Java虚拟机都采用解释器与编译器并存的架构，但许多主流的商用虚拟机（如HotSpot），都同时包含解释器和编译器。解释器与编译器两者各有优势：当程序需要迅速启动和执行的时候，解释器可以首先发挥作用，省去编译的时间，立即执行。在程序运行后，随着时间的推移，编译器逐渐发挥作用，把越来越多的代码编译成本地代码之后，可以获取更高的执行效率。当程序运行环境中内存资源限制较大（如部分嵌入式系统中），可以使用解释器执行节约内存，反之可以使用编译执行来提升效率。此外，如果编译后出现“罕见陷阱”，可以通过逆优化退回到解释执行。</p><img src="/2020/01/15/20170924_JVM运行原理/20160812102841736.png" title="图"><h3 id="编译的时间开销"><a href="#编译的时间开销" class="headerlink" title="编译的时间开销"></a>编译的时间开销</h3><p>解释器的执行，抽象的看是这样的：<br>输入的代码 -&gt; [ 解释器 解释执行 ] -&gt; 执行结果<br>而要JIT编译然后再执行的话，抽象的看则是：<br>输入的代码 -&gt; [ 编译器 编译 ] -&gt; 编译后的代码 -&gt; [ 执行 ] -&gt; 执行结果<br>说JIT比解释快，其实说的是“执行编译后的代码”比“解释器解释执行”要快，并不是说“编译”这个动作比“解释”这个动作快。<br>JIT编译再怎么快，至少也比解释执行一次略慢一些，而要得到最后的执行结果还得再经过一个“执行编译后的代码”的过程。<br>所以，对“只执行一次”的代码而言，解释执行其实总是比JIT编译执行要快。</p><p>怎么算是“只执行一次的代码”呢？粗略说，下面两个条件同时满足时就是严格的“只执行一次”<br>1、只被调用一次，例如类的构造器（class initializer，<clinit>()）<br>2、没有循环</clinit></p><p><strong>对只执行一次的代码做JIT编译再执行，可以说是得不偿失。</strong><br><strong>对只执行少量次数的代码，JIT编译带来的执行速度的提升也未必能抵消掉最初编译带来的开销。</strong><br><strong>只有对频繁执行的代码，JIT编译才能保证有正面的收益。</strong></p><h3 id="编译的空间开销"><a href="#编译的空间开销" class="headerlink" title="编译的空间开销"></a>编译的空间开销</h3><p>对一般的Java方法而言，编译后代码的大小相对于字节码的大小，膨胀比达到10x是很正常的。同上面说的时间开销一样，这里的空间开销也是，只有对执行频繁的代码才值得编译，如果把所有代码都编译则会显著增加代码所占空间，导致“代码爆炸”。<br>这也就解释了为什么有些JVM会选择不总是做JIT编译，而是选择用解释器+JIT编译器的混合执行引擎。</p><h3 id="为何HotSpot虚拟机要实现两个不同的即时编译器？"><a href="#为何HotSpot虚拟机要实现两个不同的即时编译器？" class="headerlink" title="为何HotSpot虚拟机要实现两个不同的即时编译器？"></a>为何HotSpot虚拟机要实现两个不同的即时编译器？</h3><p>HotSpot虚拟机中内置了两个即时编译器：Client Complier和Server Complier，简称为C1、C2编译器，分别用在客户端和服务端。目前主流的HotSpot虚拟机中默认是采用解释器与其中一个编译器直接配合的方式工作。程序使用哪个编译器，取决于虚拟机运行的模式。HotSpot虚拟机会根据自身版本与宿主机器的硬件性能自动选择运行模式，用户也可以使用“-client”或“-server”参数去强制指定虚拟机运行在Client模式或Server模式。<br><strong>用Client Complier获取更高的编译速度，用Server Complier 来获取更好的编译质量</strong>;为什么提供多个即时编译器与为什么提供多个垃圾收集器类似，都是为了适应不同的应用场景。</p><h3 id="哪些程序代码会被编译为本地代码？如何编译为本地代码？"><a href="#哪些程序代码会被编译为本地代码？如何编译为本地代码？" class="headerlink" title="哪些程序代码会被编译为本地代码？如何编译为本地代码？"></a>哪些程序代码会被编译为本地代码？如何编译为本地代码？</h3><p>程序中的代码只有是热点代码时，才会编译为本地代码，那么什么是热点代码呢？<br>运行过程中会被即时编译器编译的“热点代码”有两类：<br>1、被多次调用的方法。<br>2、被多次执行的循环体。<br>两种情况，编译器都是以整个方法作为编译对象。 这种编译方法因为编译发生在方法执行过程之中，因此形象的称之为栈上替换（On Stack Replacement，OSR），即方法栈帧还在栈上，方法就被替换了</p><h3 id="如何判断方法或一段代码或是不是热点代码呢？"><a href="#如何判断方法或一段代码或是不是热点代码呢？" class="headerlink" title="如何判断方法或一段代码或是不是热点代码呢？"></a>如何判断方法或一段代码或是不是热点代码呢？</h3><p>要知道方法或一段代码是不是热点代码，是不是需要触发即时编译，需要进行Hot Spot Detection（热点探测）。<br>目前主要的热点探测方式有以下两种：</p><ul><li>基于采样的热点探测</li></ul><p>采用这种方法的虚拟机会周期性地检查各个线程的栈顶，如果发现某些方法经常出现在栈顶，那这个方法就是“热点方法”。这种探测方法的好处是实现简单高效，还可以很容易地获取方法调用关系（将调用堆栈展开即可），缺点是很难精确地确认一个方法的热度，容易因为受到线程阻塞或别的外界因素的影响而扰乱热点探测。</p><ul><li>基于计数器的热点探测</li></ul><p>采用这种方法的虚拟机会为每个方法（甚至是代码块）建立计数器，统计方法的执行次数，如果执行次数超过一定的阀值，就认为它是“热点方法”。这种统计方法实现复杂一些，需要为每个方法建立并维护计数器，而且不能直接获取到方法的调用关系，但是它的统计结果相对更加精确严谨。</p><h3 id="HotSpot虚拟机中使用的是哪钟热点检测方式呢？"><a href="#HotSpot虚拟机中使用的是哪钟热点检测方式呢？" class="headerlink" title="HotSpot虚拟机中使用的是哪钟热点检测方式呢？"></a>HotSpot虚拟机中使用的是哪钟热点检测方式呢？</h3><p>在HotSpot虚拟机中使用的是第二种——基于计数器的热点探测方法，因此它为每个方法准备了两个计数器：方法调用计数器和回边计数器。在确定虚拟机运行参数的前提下，这两个计数器都有一个确定的阈值，当计数器超过阈值溢出了，就会触发JIT编译。</p><blockquote><p>方法调用计数器</p></blockquote><img src="/2020/01/15/20170924_JVM运行原理/20160812101630575.png" title="图"><pre><code>顾名思义，这个计数器用于统计方法被调用的次数。当一个方法被调用时，会先检查该方法是否存在被JIT编译过的版本，如果存在，则优先使用编译后的本地代码来执行。如果不存在已被编译过的版本，则将此方法的调用计数器值加1，然后判断方法调用计数器与回边计数器值之和是否超过方法调用计数器的阈值。如果超过阈值，那么将会向即时编译器提交一个该方法的代码编译请求。如果不做任何设置，执行引擎并不会同步等待编译请求完成，而是继续进行解释器按照解释方式执行字节码，直到提交的请求被编译器编译完成。当编译工作完成之后，这个方法的调用入口地址就会系统自动改写成新的，下一次调用该方法时就会使用已编译的版本。</code></pre><blockquote><p>回边计数器</p></blockquote><img src="/2020/01/15/20170924_JVM运行原理/20160812102239062.png" title="图"><pre><code>它的作用就是统计一个方法中循环体代码执行的次数，在字节码中遇到控制流向后跳转的指令称为“回边”。</code></pre><h3 id="如何编译为本地代码？"><a href="#如何编译为本地代码？" class="headerlink" title="如何编译为本地代码？"></a>如何编译为本地代码？</h3><p>Server Compiler和Client Compiler两个编译器的编译过程是不一样的。<br>对Client Compiler来说，它是一个简单快速的编译器，主要关注点在于局部优化，而放弃许多耗时较长的全局优化手段。<br>而Server Compiler则是专门面向服务器端的，并为服务端的性能配置特别调整过的编译器，是一个充分优化过的高级编译器。</p><p>参考:<br>《深入理解Java虚拟机》<br><a href="http://blog.csdn.net/u010412719/article/details/47008717" target="_blank" rel="noopener">http://blog.csdn.net/u010412719/article/details/47008717</a><br><a href="https://zhuanlan.zhihu.com/p/19977592" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/19977592</a><br><a href="http://www.zhihu.com/question/37389356/answer/73820511" target="_blank" rel="noopener">http://www.zhihu.com/question/37389356/answer/73820511</a></p><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入了解java虚拟机 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图</title>
      <link href="/2020/01/15/20170922_map/"/>
      <url>/2020/01/15/20170922_map/</url>
      
        <content type="html"><![CDATA[<blockquote><p>##图: 图是由顶点集（VertexSet）和边集（EdgeSet）组成，针对图G，顶点集和边集分别记为V(G)和E(G)。依据图的边集是否为有向，可把图分为有向图和无向图，根据图是否有权重，可以分为有权图和无权图。</p></blockquote><p><strong>线性表中的元素是“一对一”的关系，树中的元素是“一对多”的关系，而图结构中的元素则是“多对多”的关系</strong></p><pre><code>顶点(Vertex)、弧(Arc)、弧头(初始点)、弧尾(终结点)、边(Edge)、有向图(Directed graph)、无向图(Undigraph)、完全图(Completed grapg)、有向完全图、稀疏图(Sparse graph)、稠密图(Dense graph)、权(weigh)、网(network)、无向网、有向网、子图(Subgraph)、邻接点(Adjacent)、度(Degree)、入度(Indegree)、出度(Outdegree)、路径(path)、回路(环)、简单路径、简单回路（简单环）、连通、连通图(Connected graph)、连通分量(Connected Component)、强连通图、强连通分量(有向图中的极大强连通子图)、生成树、极小连通子图、有向树。</code></pre><a id="more"></a><blockquote><p>##图的存储: </p></blockquote><ol><li>邻接矩阵:用一个二维数组表示图中顶点和顶点,边的关系;形成的矩阵中可以自定义边的权值表示, 例如:0表示没有边, 其他大于0的数n表示两个顶点有边且权值为n</li></ol><p>　　<img src="/2020/01/15/20170922_map/map.png" title="图"></p><p>　　<img src="/2020/01/15/20170922_map/map2.png" title="图"></p><ol start="2"><li>邻接表</li></ol><pre><code>接矩阵与邻接表相比，它会造成空间的一定损失，它需要为每个顶点都分配n个边的空间，其实有很多边都是不存在边，但是邻接表的实现就不一样，它只关心存在的边，不关心不存在的边。</code></pre><p>　　<img src="/2020/01/15/20170922_map/map3.png" title="图"></p><blockquote><p>##图的遍历:</p></blockquote><p>1.广度优先</p><pre><code>1.从isTrav数组中选择一个未被访问的邻接点,标记为已访问2.依次访问Vi的所有未被访问的邻接点,并标记为已被访问3.从邻接点出发进行广度优先遍历,直到图中所有和Vi有路径相通的顶点都被访问4.重复1-3的步骤直到所有的顶点都被访问</code></pre><p>2.深度优先</p><pre><code>1.从isTrav数组中选择一个未被访问的邻接点Vi,标记为已访问2.从Vi邻接点出发进行深度优先遍历3.重复2步骤,直到所有的和Vi有路径相通的顶点都被访问过4.重复1-3操作,直到所有顶点都被访问过</code></pre><blockquote><p>##代码演示</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//邻接矩阵</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">        </span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> VERTEX_MAX 26</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> MAXVALUE 32767                  <span class="comment">//表示当权值为MAXVALUE时,两个顶点没有相连</span></span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="keyword">char</span> Vertex[VERTEX_MAX];            <span class="comment">//保存顶点信息（序号或字母）</span></span><br><span class="line">            <span class="keyword">int</span> Edges[VERTEX_MAX][VERTEX_MAX];  <span class="comment">//保存边的权</span></span><br><span class="line">            <span class="keyword">int</span> isTrav[VERTEX_MAX];             <span class="comment">//遍历标志</span></span><br><span class="line">            <span class="keyword">int</span> VertexNum;                      <span class="comment">//顶点数量</span></span><br><span class="line">            <span class="keyword">int</span> EdgeNum;                        <span class="comment">//边数量</span></span><br><span class="line">            <span class="keyword">int</span> GraphType;                      <span class="comment">//图的类型(0无向图 1有向图)</span></span><br><span class="line">        &#125; MatrixGraph;                          <span class="comment">//定义邻接矩阵图结构</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">CreateMatrixGraph</span><span class="params">(MatrixGraph *G)</span></span>; <span class="comment">//创建邻接矩阵图</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">OutMatrix</span><span class="params">(MatrixGraph *G)</span></span>;         <span class="comment">//输出邻接矩阵</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">CreateMatrixGraph</span><span class="params">(MatrixGraph *G)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i, j, k, weight;</span><br><span class="line">            <span class="keyword">char</span> start, <span class="built_in">end</span>;                    <span class="comment">//边的起始顶点</span></span><br><span class="line">        </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"输入各顶点的信息：\n"</span>);       <span class="comment">//输入顶点</span></span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;VertexNum; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                fflush(<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"第%d个顶点信息："</span>, i+<span class="number">1</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;(G-&gt;Vertex[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"输入构成各边的两个顶点以及权值：\n"</span>);</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;G-&gt;EdgeNum; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"第%d条边："</span>, k+<span class="number">1</span>);</span><br><span class="line">                fflush(<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%c %c %d"</span>, &amp;start, &amp;<span class="built_in">end</span>, &amp;weight);</span><br><span class="line">                <span class="keyword">for</span>(i=<span class="number">0</span>; start!=G-&gt;Vertex[i]; i++);     <span class="comment">//查找已有的顶点中是否包含当前的"起始顶点"</span></span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>; <span class="built_in">end</span>!=G-&gt;Vertex[j]; j++);       <span class="comment">//同上</span></span><br><span class="line">        </span><br><span class="line">                <span class="comment">// printf("%d %d", i, j);</span></span><br><span class="line">                G-&gt;Edges[i][j] = weight;               <span class="comment">//对应位置保存权值，表示有一条边</span></span><br><span class="line">                <span class="keyword">if</span>(G-&gt;GraphType == <span class="number">0</span>)                   <span class="comment">//判断是不是无向图</span></span><br><span class="line">                &#123;</span><br><span class="line">                    G-&gt;Edges[j][i] = weight;            <span class="comment">//在对角位置保存权值</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">OutMatrix</span><span class="params">(MatrixGraph *G)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i, j;</span><br><span class="line">        </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;G-&gt;VertexNum; j++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\t%c"</span>, G-&gt;Vertex[j]);           <span class="comment">//输出顶点信息</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;VertexNum; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%c"</span>, G-&gt;Vertex[i]);</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;G-&gt;VertexNum; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(G-&gt;Edges[i][j] &gt;= MAXVALUE) <span class="comment">//如果权值为最大值</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"\t #"</span>);                 <span class="comment">//输出无穷大符号</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"\t%d"</span>, G-&gt;Edges[i][j]); <span class="comment">//输出边的权值</span></span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            MatrixGraph G;</span><br><span class="line">            <span class="keyword">int</span> i, j;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"输入生成图的类型 （0无向图 1有向图）"</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;G.GraphType);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"输入图的顶点数量和边数量"</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;G.VertexNum, &amp;G.EdgeNum);       <span class="comment">//输入图顶点数和边数</span></span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G.VertexNum; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;G.VertexNum; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    G.Edges[i][j] = MAXVALUE;               <span class="comment">//初始化元素值为最大值</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            CreateMatrixGraph(&amp;G);</span><br><span class="line">        </span><br><span class="line">            OutMatrix(&amp;G);</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><hr><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//邻接表</span></span><br><span class="line">           <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">           <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">           </span><br><span class="line">           <span class="meta">#<span class="meta-keyword">define</span> VERTEX_MAX 26</span></span><br><span class="line">           </span><br><span class="line">           <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">edgeNode</span></span></span><br><span class="line"><span class="class">           &#123;</span></span><br><span class="line">               <span class="keyword">int</span> Vertex;             <span class="comment">//顶点信息</span></span><br><span class="line">               <span class="keyword">int</span> weight;             <span class="comment">//权值</span></span><br><span class="line">               <span class="class"><span class="keyword">struct</span> <span class="title">edgeNode</span> *<span class="title">next</span>;</span>  <span class="comment">//下一个顶点地址指针</span></span><br><span class="line">           &#125;EdgeNode;                  <span class="comment">//边的结构</span></span><br><span class="line">           </span><br><span class="line">           <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">           &#123;</span></span><br><span class="line">               EdgeNode* AdjList[VERTEX_MAX];  <span class="comment">//顶点指针</span></span><br><span class="line">               <span class="keyword">int</span> VextexNum, EdgeNum;         <span class="comment">//顶点数量,边数量</span></span><br><span class="line">               <span class="keyword">int</span> GraphType;                  <span class="comment">//图的类型(0无向图 1有向图)</span></span><br><span class="line">           &#125;ListGraph;                         <span class="comment">//图的结构</span></span><br><span class="line">           </span><br><span class="line">           <span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span><span class="params">(ListGraph *G)</span></span>;</span><br><span class="line">           <span class="function"><span class="keyword">void</span> <span class="title">OutList</span><span class="params">(ListGraph *G)</span></span>;</span><br><span class="line">           </span><br><span class="line">           <span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span><span class="params">(ListGraph *G)</span></span></span><br><span class="line"><span class="function">           </span>&#123;</span><br><span class="line">               <span class="keyword">int</span> i, weight;</span><br><span class="line">               <span class="keyword">int</span> start, <span class="built_in">end</span>;</span><br><span class="line">               EdgeNode *s;</span><br><span class="line">               <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;=G-&gt;VextexNum; i++)      <span class="comment">//初始化</span></span><br><span class="line">                   G-&gt;AdjList[i] = <span class="literal">NULL</span>;</span><br><span class="line">           </span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">"输入构成各边的两个顶点以及权值：\n"</span>);</span><br><span class="line">           </span><br><span class="line">               <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;EdgeNum; i++)</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="built_in">printf</span>(<span class="string">"第%d条边 开始顶点 结束顶点 权值"</span>, i+<span class="number">1</span>);</span><br><span class="line">                   fflush(<span class="built_in">stdin</span>);</span><br><span class="line">                   <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;start, &amp;<span class="built_in">end</span>, &amp;weight);</span><br><span class="line">                   s = (EdgeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">                   s-&gt;next = G-&gt;AdjList[start];</span><br><span class="line">                   s-&gt;Vertex = <span class="built_in">end</span>;</span><br><span class="line">                   s-&gt;weight = weight;</span><br><span class="line">                   G-&gt;AdjList[start] = s;<span class="comment">//把生成的边信息赋值给图</span></span><br><span class="line">           </span><br><span class="line">                   <span class="keyword">if</span>(G-&gt;GraphType == <span class="number">0</span>) <span class="comment">//判断是不是有向图</span></span><br><span class="line">                   &#123;</span><br><span class="line">                       s = (EdgeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">                       s-&gt;next = G-&gt;AdjList[<span class="built_in">end</span>];</span><br><span class="line">                       s-&gt;Vertex = start;</span><br><span class="line">                       s-&gt;weight = weight;</span><br><span class="line">                       G-&gt;AdjList[<span class="built_in">end</span>] = s;<span class="comment">//把生成的边信息赋值给图</span></span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           <span class="function"><span class="keyword">void</span> <span class="title">OutList</span><span class="params">(ListGraph *G)</span></span></span><br><span class="line"><span class="function">           </span>&#123;</span><br><span class="line">               <span class="keyword">int</span> i;</span><br><span class="line">               EdgeNode *s;</span><br><span class="line">               <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;=G-&gt;VextexNum; i++)</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="built_in">printf</span>(<span class="string">"顶点%d"</span>, i);</span><br><span class="line">                   s = G-&gt;AdjList[i];</span><br><span class="line">                   <span class="keyword">while</span>(s)</span><br><span class="line">                   &#123;</span><br><span class="line">                       <span class="built_in">printf</span>(<span class="string">"-&gt;%d(%d)"</span>, s-&gt;Vertex, s-&gt;weight);</span><br><span class="line">                       s = s-&gt;next;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">           </span>&#123;</span><br><span class="line">               ListGraph G;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">"输入生成图的类型 （0无向图 1有向图）"</span>);</span><br><span class="line">               <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;G.GraphType);</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">"输入图的顶点数量和边数量"</span>);</span><br><span class="line">               <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;G.VextexNum, &amp;G.EdgeNum);</span><br><span class="line">           </span><br><span class="line">               CreateGraph(&amp;G);</span><br><span class="line">               OutList(&amp;G);</span><br><span class="line">           </span><br><span class="line">               <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><hr><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//深度优先和广度优先</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"AdjMatrixGraph.h"</span></span></span><br><span class="line">        </span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> QUEUE_MAXSIZE 30    <span class="comment">//队列的最大容量</span></span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="keyword">int</span> Data[QUEUE_MAXSIZE];<span class="comment">//数据域</span></span><br><span class="line">            <span class="keyword">int</span> head;               <span class="comment">//队头指针</span></span><br><span class="line">            <span class="keyword">int</span> tail;               <span class="comment">//队尾指针</span></span><br><span class="line">        &#125;SeqQueue;                  <span class="comment">//队列结构</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//队列操作函数</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">QueueInit</span><span class="params">(SeqQueue *q)</span></span>;        <span class="comment">//初始化一个队列</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">QueueIsEmpty</span><span class="params">(SeqQueue q)</span></span>;       <span class="comment">//判断队列是否为空</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">QueueIn</span><span class="params">(SeqQueue *q, <span class="keyword">int</span> n)</span></span>;    <span class="comment">//入队</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">QueueOut</span><span class="params">(SeqQueue *q, <span class="keyword">int</span> *ch)</span></span>; <span class="comment">//出队</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//图操作函数</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">DFSTraverse</span><span class="params">(MatrixGraph *G)</span></span>;   <span class="comment">//深度优先遍历</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">BFSTraverse</span><span class="params">(MatrixGraph *G)</span></span>;   <span class="comment">//广度优先遍历</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">DFSM</span><span class="params">(MatrixGraph *G, <span class="keyword">int</span> i)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">BFSM</span><span class="params">(MatrixGraph *G, <span class="keyword">int</span> i)</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">QueueInit</span><span class="params">(SeqQueue *q)</span></span>&#123;</span><br><span class="line">            q-&gt;head = q-&gt;tail = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">QueueIsEmpty</span><span class="params">(SeqQueue q)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> q.head = q.tail;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">QueueIn</span><span class="params">(SeqQueue *q, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>((q-&gt;tail + <span class="number">1</span>) % q-&gt;head != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q-&gt;Data[q-&gt;tail] = n;</span><br><span class="line">                q-&gt;tail = (q-&gt;tail + <span class="number">1</span>) % QUEUE_MAXSIZE;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">QueueOut</span><span class="params">(SeqQueue *q, <span class="keyword">int</span> *ch)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(q-&gt;head != q-&gt;tail)</span><br><span class="line">            &#123;</span><br><span class="line">                *ch = q-&gt;Data[q-&gt;head];</span><br><span class="line">                q-&gt;head = (q-&gt;head + <span class="number">1</span>) % QUEUE_MAXSIZE;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">DFSTraverse</span><span class="params">(MatrixGraph *G)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;VertexNum; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                G-&gt;isTrav[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"深度优先遍历"</span>);</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;VertexNum; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!G-&gt;isTrav[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    DFSM(G, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">BFSTraverse</span><span class="params">(MatrixGraph *G)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;VertexNum; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                G-&gt;isTrav[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"广度优先遍历"</span>);</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;VertexNum; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!G-&gt;isTrav[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    BFSM(G, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">DFSM</span><span class="params">(MatrixGraph *G, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            G-&gt;isTrav[i] = i;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-&gt;%c"</span>, G-&gt;Vertex[i]);</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;G-&gt;VertexNum; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(G-&gt;Edges[i][j] != MAXVALUE &amp;&amp; !G-&gt;isTrav[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    DFSM(G, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">BFSM</span><span class="params">(MatrixGraph *G, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i, j;</span><br><span class="line">            SeqQueue Q;</span><br><span class="line">            QueueInit(&amp;Q);</span><br><span class="line">        </span><br><span class="line">            G-&gt;isTrav[k] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-&gt;%c"</span>, G-&gt;Vertex[k]);</span><br><span class="line">        </span><br><span class="line">            QueueIn(&amp;Q, k);</span><br><span class="line">            <span class="keyword">while</span>(!QueueIsEmpty(Q))</span><br><span class="line">            &#123;</span><br><span class="line">                QueueOut(&amp;Q, &amp;i);</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;G-&gt;VertexNum; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(G-&gt;Edges[i][j] != MAXVALUE &amp;&amp; !G-&gt;isTrav[j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"-&gt;%c"</span>, G-&gt;Vertex[j]);</span><br><span class="line">                        G-&gt;isTrav[j] = <span class="number">1</span>;</span><br><span class="line">                        QueueIn(&amp;Q, j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            MatrixGraph G;</span><br><span class="line">            <span class="keyword">int</span> i, j;</span><br><span class="line">            <span class="keyword">char</span> select;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"输入生成图的类型: (0:无向图, 1:有向图)"</span>);</span><br><span class="line">                fflush(<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;G.GraphType);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"输入图的顶点数量和边数量"</span>);</span><br><span class="line">                fflush(<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;G.VertexNum, &amp;G.EdgeNum);</span><br><span class="line">                <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G.VertexNum; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;G.VertexNum; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        G.Edges[i][j] = MAXVALUE;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">                CreateMatrixGraph(&amp;G);</span><br><span class="line">        </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"邻接矩阵数据:\n"</span>);</span><br><span class="line">                OutMatrix(&amp;G);</span><br><span class="line">                DFSTraverse(&amp;G);</span><br><span class="line">                BFSTraverse(&amp;G);</span><br><span class="line">        </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"两种遍历结束"</span>);</span><br><span class="line">                fflush(<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;select);</span><br><span class="line">            &#125;<span class="keyword">while</span>(select!= <span class="string">'N'</span> &amp;&amp; select != <span class="string">'\n'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络协议记录</title>
      <link href="/2020/01/15/20170918_protocol/"/>
      <url>/2020/01/15/20170918_protocol/</url>
      
        <content type="html"><![CDATA[<p>　　<img src="/2020/01/15/20170918_protocol/11185081040.jpg" title="ISO七层模型与对应协议"></p><p>　　<img src="/2020/01/15/20170918_protocol/11187081041.jpg" title="ISO七层模型与对应协议"></p><a id="more"></a>  <blockquote><p>ISO: (International Organization for Standards) 国际标准化组织</p></blockquote><blockquote><p>OSI(参考模型): (Open Systems Interconnection) 开放式通信系统互联网参考模型：把通信功能划分为7个分层</p></blockquote><blockquote><p>OSI协议: OSI协议以OSI参考模型为基础界定了每个阶层的协议和每个阶层之间接口相关的标准；遵循OSI协议的的产品为OSI产品；</p></blockquote><blockquote><p>MAC地址: (Media Access Control)介质访问控制；也叫物理地址、硬件地址；</p></blockquote><blockquote><p>Unicast: 单播；Broadcast: 广播；Multicast: 多播；Anycast: 任播</p></blockquote><blockquote><p>网卡: NIC(Network Interface Card)，使计算机联网的设备</p></blockquote><blockquote><p>中继器: (Repeater) ，物理层上延长网络的设备(处于第一层)</p></blockquote><pre><code>由电缆传过来的电信号或光信号经由中继器的波形调整和放大再传给另一个电缆</code></pre><blockquote><p>网桥: (Bridge) 也叫2层交换机，从数据链路层上延长网络的设备(处于第二层)，根据MAC地址进行处理</p></blockquote><pre><code>能识别数据帧，并把数据帧临时存储于内存，并重新生成信号作为新的帧转发给相连的另一个网段地址自学机制 地址过滤功能</code></pre><blockquote><p>路由器: (Router) 也叫3层交换机，通过网络层转发分组数据的设备(处于第三层)，根据IP地址处理</p></blockquote><blockquote><p>4~7层交换机：处理传输层以上各层网络传输的设备</p></blockquote><blockquote><p>网关: (Gateway) 转换协议的设备，协议转换，数据转发(从传输层到应用层的数据转换、转发)</p></blockquote><blockquote><p>FCS: (Frame Check Sequence) 帧检验序列，(网桥)校验数据是否正确的送达目的地</p></blockquote><blockquote><p>CRC: (Cyclic Redundancy Check) 循环冗余校验码，CRC循环冗余码校验FCS帧检验序列</p></blockquote><blockquote><p>ATM: (Asynchronous Transfer Mode) 异步传输</p></blockquote><blockquote><p>网络协议族: (Internet Protocol Suite) 组成网际协议的一组协议</p></blockquote><blockquote><p>IETF: (The Internet Engineering Task Force) 国际互联网工程任务组，一个公开性质的大型民间国际团体</p></blockquote><blockquote><p>RFC: (Request For Comment) 记录TCP/IP协议及其实现和运用信息</p></blockquote><blockquote><p>互联网: (The Internet) </p></blockquote><blockquote><p>NOC: (Network Operation Center) 网络操作中心，互联网中每个网络由NOC相连 </p></blockquote><blockquote><p>IX: (Internet Exchange) 网络交换中心，连接异构网络(不同运营商导致)需要IX支持</p></blockquote><blockquote><p>ISP: (Internet Service Provider) 互联网服务提供商</p></blockquote><blockquote><p>IP: (Internet Protocol)跨越网络传送数据包(分组交换)</p></blockquote><blockquote><p>ICMP: (Internet Control Message Protocol) Internet控制报文协议，</p></blockquote><pre><code>当IP数据包发送途中发生异常无法达到目的地址，需要给发送端发送一个异常的通知(可以诊断网络健康状况)</code></pre><blockquote><p>ARP: (Address Resolution Protocol)从分组数据包的IP地址中解析出物理地址(MAC地址)的一种协议</p></blockquote><blockquote><p>TCP: (Transmission Control Protocol)  传输控制协议，面向有连接，传输层协议，</p></blockquote><blockquote><p>UDP: (User Datagram Protocol) 用户数据报协议，面向无连接，传输层协议，</p></blockquote><blockquote><p>WWW: (World Wide Web) </p></blockquote><blockquote><p>HTTP: (HyperText Transfer Protocol) 超文本传输协议 </p></blockquote><blockquote><p>SMTP: (Simple Mail Transfer Protocol)  </p></blockquote><blockquote><p>MIME: () (表示层协议)</p></blockquote><blockquote><p>FTP: (File Transfer Protocol) 文件传输协议</p></blockquote><blockquote><p>TELNET: 网络远程登陆协议 </p></blockquote><blockquote><p>SSH: (Secure Shell)   </p></blockquote><blockquote><p>SNMP: (Simple Network Management Protocol) 简单网络管理协议 (应用层协议)</p></blockquote><pre><code>在TCP/IP中进行网络管理， 采用SNMP管理的主机、网桥、路由器称为SNMP代理(Agent)，进行管理的那一段叫做管理器(Manager)Agent和Manager用到该协议在SNMP代理端，保存网络接口的信息、通信数据量、异常数据量等信息可以及时检查网络拥堵情况</code></pre><blockquote><p>MIB: () (表示层协议)</p></blockquote><blockquote><p>CSMA: (Carrier Sense Multiple Access) 载波侦听多路访问，争夺获取数据传输的权力</p></blockquote><blockquote><p>CSMA/CD: 相对于CSMA，要求每个站提前检测冲突，发生冲突，则尽早释放信道</p></blockquote><blockquote><p>FDDI: (Fiber Distributed Data Interface) 光纤分布式数据接口</p></blockquote><blockquote><p>BPDU: (Bridge Protocol Data Unit) 生成树方式中，每个网桥必须在每1-10秒内小胡交换BPDU包，用来判断哪些端口使用哪些不使用，以便消除环路</p></blockquote><blockquote><p>RSTP: (Rapid Spanning Tree Protocol) 能将发生环路时的恢复时间缩短到几秒之内 </p></blockquote><blockquote><p>无线PAN: (Personal Area Network) 通信距离10米左右，应用：蓝牙</p></blockquote><blockquote><p>无线LAN: (Local Area Network) 通信距离100米左右，应用：Wi-Fi</p></blockquote><blockquote><p>无线MAN: (Metropolitan Area Network) 通信距离1km-100km，应用：WiMAX</p></blockquote><blockquote><p>无线RAN: (Regional Area Network) 通信距离200k-700km</p></blockquote><blockquote><p>无线WAN: (Wide Area Network) 应用3G,LTE,4G等</p></blockquote><blockquote><p>PPP: (Point to Point Protocol) 点对点协议，相当于2层的数据链路层</p></blockquote><pre><code>ppp协议的主要功能中主要包括两个协议：    1.LCP：(Link Control Protocol)，不依赖上层，        通过两次握手进行用户名密码验证，明文传输密码，不安全        主要负责建立和断开连接，设置最大接受单元（MRU，Maximum Receive Unit），        设置验证协议[PAP(Password Authentication Protocol) 或 CHAP(Challenge Handshake Authentication Protocol)]，        设置进行通信质量监控与否    2.NCP: (Network Control Protocol)，         依赖上层，如果上层是IP，则此时NCP也叫IPCP        使用一次性密码OTP(One Time Password)， 安全，防止窃听        IPCP主要IP地址设置以及是否进行TCP/IP首部压缩等设置    ppp协议连接时，需要进行用户名密码验证</code></pre><blockquote><p>PPPoE: (PPP over Ethernet) 互联网接入服务商在以太网上提供PPP功能，可以提供计费功能</p></blockquote><blockquote><p>ADSL: (Asymmetric Digital Subscriber Line) 非对称数字用户环路</p></blockquote><blockquote><p>FTTH: (Fiber To The Home) 光纤到户</p></blockquote><blockquote><p>VPN: (Virtual Private Network) 虚拟专用网络</p></blockquote><blockquote><p>MTU: (Maximum Transmission Unit)  最大传输单元</p></blockquote><blockquote><p>CIDR: (Classless Inter-Domain Routing) 无类型域间选路</p></blockquote><blockquote><p>CIDR: (Border Gateway Protocol) 边界网关协议</p></blockquote><blockquote><p>VLSM: (Variable Length Subnet Mask) 可变长子网掩码</p></blockquote><blockquote><p>ICANN: (Internet Corporation for Assigned Names and Numbers) 互联网名称与数字地址分配机构</p></blockquote><blockquote><p>NAT: (Network Address Translation) 网络地址转换</p></blockquote><hr><hr><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 定义 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>待完成</title>
      <link href="/2020/01/15/20170911_syc/"/>
      <url>/2020/01/15/20170911_syc/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/XHJT/p/3897440.html" target="_blank" rel="noopener">http://www.cnblogs.com/XHJT/p/3897440.html</a></p><p><a href="http://blog.csdn.net/suifeng3051/article/details/52611233" target="_blank" rel="noopener">http://blog.csdn.net/suifeng3051/article/details/52611233</a></p><a id="more"></a>        <blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>待完成</title>
      <link href="/2020/01/15/20170911_list_clone/"/>
      <url>/2020/01/15/20170911_list_clone/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/lyajs/p/5779021.html" target="_blank" rel="noopener">http://www.cnblogs.com/lyajs/p/5779021.html</a></p><a id="more"></a>        <pre><code>package collection;import org.junit.Test;import java.util.ArrayList;import java.util.ArrayList;/** * Created by zj on 2017/9/11. */public class Link {    @Test    public void test() {        ArrayList&lt;Student&gt; list = new ArrayList&lt;&gt;();        //添加两个元素        Student stJack = new Student(&quot;Jack&quot;, &quot;AAAA&quot;);        Student stTom = new Student(&quot;Tom&quot;, &quot;BBBBB&quot;);        list.add(stJack);        list.add(stTom);        //克隆        ArrayList&lt;Student&gt; listCopy = new ArrayList&lt;&gt;();        /*list.forEach(li -&gt; {            listCopy.add(li);        });*/        listCopy = (ArrayList&lt;Student&gt;) list.clone();        listCopy.get(1).setId(&quot;FFFFFFFFFFF&quot;);        System.out.println(list);        System.out.println(list.get(1).hashCode());        System.out.println(listCopy);        System.out.println(listCopy.get(1).hashCode());        /*ArrayList&lt;String&gt; ArrayList = new ArrayList&lt;&gt;();        ArrayList.add(&quot;A&quot;);        ArrayList.add(&quot;B&quot;);        ArrayList.add(&quot;C&quot;);        ArrayList.add(&quot;D&quot;);        ArrayList.add(&quot;E&quot;);        System.out.println(ArrayList.clone());        ArrayList.forEach(li -&gt; {            System.out.println(li);        });*/    }}package collection;import java.util.HashSet;import java.util.Set;/** * Created by zj on 2017/9/10. */public class Student {    private String id;    private String name;    private Set courses;    public Student() {    }    public Student(String id, String name) {        this.id = id;        this.name = name;        this.courses = new HashSet();    }    public Student(String id, String name, Set courses) {        this.id = id;        this.name = name;        this.courses = courses;    }    @Override    public String toString() {        return &quot;Student{&quot; +                &quot;id=&apos;&quot; + id + &apos;\&apos;&apos; +                &quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +                &quot;, courses=&quot; + courses +                &apos;}&apos;;    }    @Override    protected Object clone() throws CloneNotSupportedException {        return new Student(this.id, this.name);    }    public String getId() {        return id;    }    public void setId(String id) {        this.id = id;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public Set getCourses() {        return courses;    }    public void setCourses(Set courses) {        this.courses = courses;    }}public static void main(String[] args) {        Map&lt;String, Student&gt; map = new HashMap&lt;String, Student&gt;();        map.put(&quot;a&quot;, new Student(&quot;A&quot;, &quot;FFF&quot;));        map.put(&quot;b&quot;, new Student(&quot;B&quot;, &quot;AAA&quot;));        map.put(&quot;d&quot;, new Student(&quot;D&quot;, &quot;KKK&quot;));        map.put(&quot;c&quot;, new Student(&quot;C&quot;, &quot;KKK&quot;));        List&lt;Map.Entry&lt;String, Student&gt;&gt; list =                new ArrayList&lt;&gt;(map.entrySet());        Collections.sort(list, new Comparator&lt;Map.Entry&lt;String, Student&gt;&gt;() {            @Override            public int compare(Map.Entry&lt;String, Student&gt; o1, Map.Entry&lt;String, Student&gt; o2) {                return o1.getValue().compareTo(o2.getValue());            }        });        for (Map.Entry&lt;String, Student&gt; mapping : list) {            System.out.println(mapping.getKey() + &quot;:&quot; + mapping.getValue());        }    }</code></pre><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈夫曼(霍夫曼)树以及哈夫曼编码</title>
      <link href="/2020/01/15/20170908_hfms/"/>
      <url>/2020/01/15/20170908_hfms/</url>
      
        <content type="html"><![CDATA[<blockquote><p>哈夫曼树：又称最优二叉树，是一种带权路径长度最短的二叉树；<br>哈夫曼编码：哈夫曼树的一个应用，如JPEG中就应用；</p></blockquote><pre><code>所谓树的带权路径长度，就是树中所有的叶结点的权值乘上其到根结点的路径长度（若根结点为0层，叶结点到根结点的路径长度为叶结点的层数）。树的带权路径长度记为WPL = (W1*L1+W2*L2+W3*L3+...+Wn*Ln)，N个权值Wi(i=1,2,...n)构成一棵有N个叶结点的二叉树，相应的叶结点的路径长度为Li(i=1,2,...n)。可以证明哈夫曼树的WPL是最小的。一般权值用来表示频率大小，频率越大则权值越高</code></pre><a id="more"></a>        <blockquote><p>参考博客1： <a href="http://www.cnblogs.com/junyuhuang/p/4127095.html" target="_blank" rel="noopener">http://www.cnblogs.com/junyuhuang/p/4127095.html</a></p></blockquote><blockquote><p>参考博客2： <a href="http://www.cnblogs.com/Jezze/archive/2011/12/23/2299884.html" target="_blank" rel="noopener">http://www.cnblogs.com/Jezze/archive/2011/12/23/2299884.html</a></p></blockquote><blockquote><p>####哈弗曼编码原理(转载)</p></blockquote><pre><code>    　　哈夫曼编码使用一种特别的方法为信号源中的每个符号设定二进制码。出现频率更大的符号将获得更短的比特，出现频率更小的符号将被分配更长的比特，以此来提高数据压缩率，提高传输效率。具体编码步骤主要为，    　　1、统计：    　　在开始编码时，通常都需要对信号源，也就是本文的一段文字，进行处理，计算出每个符号出现的频率，得到信号源的基本情况。接下来就是对统计信息进行处理了    　　    　　2、构造优先对列：    　　把得到的符号添加到优先队列中，此优先队列的进出逻辑是频率低的先出，因此在设计优先队列时需要如此设计，如果不熟悉优先队列，请阅读相关书籍，在此不做过多概述。得到包含所有字符的优先队列后，就是处理优先队列中的数据了。    　　3、构造哈夫曼树：    　　哈夫曼树是带权值得二叉树，我们使用的哈夫曼树的权值自然就是符号的频率了，我们构建哈夫曼树是自底向上的，先构建叶子节点，然后逐步向上，最终完成整颗树。先把队列中的一个符号出列，也就是最小频率的符号，，然后再出列一个符号。这两个符号将作为哈夫曼树的节点，而且这两个节点将作为新节点，也就是它们父节点，的左右孩子节点。新节点的频率，即权值，为孩子节点的和。把这个新节点添加到队列中(队列会重新根据权值排序)。重复上面的步骤，两个符号出列，构造新的父节点，入列……直到队列最后只剩下一个节点，这个节点也就是哈夫曼树的根节点了。    　　    　　4、为哈弗曼树编码：    　　哈夫曼树的来自信号源的符号都是叶子节点，需要知道下。树的根节点分配比特0，左子树分配0，右字数分配1。然后就可以得到符号的码值了。</code></pre><blockquote><p>####哈夫曼编码步骤 </p></blockquote><p>1.首先构建一个元素为哈夫曼树结点的数组用于存储哈夫曼树（线性）；</p><pre><code>哈夫曼树数据结构包括元素数据、权值、父结点位置（数组下标）、两个子结点位置typedef struct{    int weight;    int parent;    int lchild;    int rchild;    int value;} HNodeType</code></pre><p>2.初始化数组，设置树元素的默认属性；然后输入要编码的数据及其权值，存储到数组前几位，这几个即为哈夫曼树的叶子结点；</p><pre><code>哈夫曼树中有效的数据仅仅是叶子结点，而非叶子结点是为了构建哈夫曼树而加入的</code></pre><p>3.开始构建哈夫曼树：找出整个数组中有数据且权值最低的两个作为新构造的二叉树的左右子树，新二叉树的根结点的权值为其左右子树的根结点的权值之和；<br>    然后把新构建的根结点存放到数中空位置，然后继续从整个数组中寻找。。。直到有效元素全部读取。</p><p>4.编码,树的根节点分配比特0，左子树分配0，右字数分配1;</p><p>5.解码,思路就是 把要解码的字符串像学中学方程一样代入到哈夫曼树中，按照左子树分配0，右字数分配1的原则，一个一个遍历出来</p><hr><hr><pre><code>示例(转载)：　　假如我有A,B,C,D,E五个字符，出现的频率（即权值）分别为5,4,3,2,1,那么我们第一步先取两个最小权值作为左右子树构造一个新树，即取1，2构成新树，其结点为1+2=3，如图：</code></pre><p>　　<img src="/2020/01/15/20170908_hfms/201112231832078695.png" title="哈夫曼树"></p><pre><code>　  虚线为新生成的结点，第二步再把新生成的权值为3的结点放到剩下的集合中，所以集合变成{5,4,3,3}，再根据第二步，取最小的两个权值构成新树，如图：</code></pre><p>　　<img src="/2020/01/15/20170908_hfms/201112231832087092.png" title="哈夫曼树"></p><pre><code>再依次建立哈夫曼树，如下图：</code></pre><p>　　<img src="/2020/01/15/20170908_hfms/201112231832084301.jpg" title="哈夫曼树"></p><pre><code>其中各个权值替换对应的字符即为下图：</code></pre><p>　　<img src="/2020/01/15/20170908_hfms/201112231832086286.jpg" title="哈夫曼树"></p><pre><code>如下图也可以加深大家的理解：</code></pre><p>　　<img src="/2020/01/15/20170908_hfms/272122409653995.gif" title="哈夫曼树"></p><hr><hr><blockquote><p>代码实例</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> * Name:   哈夫曼编码源代码。</span></span><br><span class="line"><span class="comment"> * Date:   2011.04.16</span></span><br><span class="line"><span class="comment"> * Author: Jeffrey Hill+Jezze(解码部分)</span></span><br><span class="line"><span class="comment"> * 在 Win-TC 下测试通过</span></span><br><span class="line"><span class="comment"> * 实现过程：着先通过 HuffmanTree() 函数构造哈夫曼树，然后在主函数 main()中</span></span><br><span class="line"><span class="comment"> *           自底向上开始(也就是从数组序号为零的结点开始)向上层层判断，若在</span></span><br><span class="line"><span class="comment"> *           父结点左侧，则置码为 0,若在右侧,则置码为 1。最后输出生成的编码。</span></span><br><span class="line"><span class="comment"> *------------------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结点个数 = 叶子结点个数 * 2 - 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXBIT      100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVALUE  10000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLEAF     30</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXNODE    MAXLEAF*2 -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">bit</span>[MAXBIT];    <span class="comment">//结点的编码</span></span><br><span class="line">    <span class="keyword">int</span> start;          <span class="comment">//结点编码的起始位，有效位置，如当start=2， 则该结点的编码从bit[2]开始</span></span><br><span class="line">&#125; HCodeType;        <span class="comment">/* 编码结构体 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="keyword">int</span> parent;</span><br><span class="line">    <span class="keyword">int</span> lchild;</span><br><span class="line">    <span class="keyword">int</span> rchild;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">&#125; HNodeType;        <span class="comment">/* 结点结构体 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 构造一颗哈夫曼树 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HuffmanTree</span><span class="params">(HNodeType HuffNode[MAXNODE],  <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*  i、j： 循环变量，</span></span><br><span class="line"><span class="comment">        m1、m2：构造哈夫曼树不同过程中两个最小权值结点的权值，</span></span><br><span class="line"><span class="comment">        x1、x2：构造哈夫曼树不同过程中两个最小权值结点在数组中的序号。*/</span></span><br><span class="line">    <span class="keyword">int</span> i, j, m1, m2, x1, x2;</span><br><span class="line">    <span class="comment">/* 初始化存放哈夫曼树数组 HuffNode[] 中的结点 */</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        HuffNode[i].weight = <span class="number">0</span>;<span class="comment">//权值</span></span><br><span class="line">        HuffNode[i].parent = <span class="number">-1</span>;<span class="comment">//父结点位置初始化为-1，表示没有父结点，到时候要通过该属性进行判断，排除掉已加入到树的元素</span></span><br><span class="line">        HuffNode[i].lchild = <span class="number">-1</span>;<span class="comment">//初始化左子树根节点位置</span></span><br><span class="line">        HuffNode[i].rchild = <span class="number">-1</span>;<span class="comment">//初始化右子树根节点位置</span></span><br><span class="line">        HuffNode[i].value = i;  <span class="comment">//实际值，可根据情况替换为字母</span></span><br><span class="line">    &#125; <span class="comment">/* end for */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 用户输入 n 个叶子结点的权值 */</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入第 %d 个元素的权值: \n"</span>, i);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;HuffNode[i].weight);</span><br><span class="line">    &#125; <span class="comment">/* end for */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 循环构造 Huffman 树 */</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)      <span class="comment">// 循环叶子结点的个数，一次循环要形成一个“新”的二叉树</span></span><br><span class="line">    &#123;</span><br><span class="line">        m1 = m2 = MAXVALUE;         <span class="comment">//m1、m2中存放两个无父结点且结点权值最小的两个结点</span></span><br><span class="line">        x1 = x2 = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//找出所有结点中权值最小、无父结点的两个结点，并合并之为一颗二叉树</span></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n + i; j++)  <span class="comment">//循环数组中元素个数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//要找到当前数组中所有的元素中最小的两位，处理之后又把结果存到数组中所以要(n+i)</span></span><br><span class="line">            <span class="keyword">if</span>(HuffNode[j].weight &lt; m1 &amp;&amp; HuffNode[j].parent == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//当前的权值更小，把当前元素赋值给m1，把原来m1的赋值给m2</span></span><br><span class="line">                m2 = m1;</span><br><span class="line">                x2 = x1;</span><br><span class="line">                m1 = HuffNode[j].weight;</span><br><span class="line">                x1 = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(HuffNode[j].weight &lt; m2 &amp;&amp; HuffNode[j].parent == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//当前的权值大于m1但是小于m2，把其赋值给m2</span></span><br><span class="line">                m2 = HuffNode[j].weight;</span><br><span class="line">                x2 = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="comment">/* end for */</span></span><br><span class="line">        <span class="comment">/* 最终，m1每次存放最小权值，m2存放次小的 */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 设置 找到的两个子结点 x1、x2 的父结点信息 */</span></span><br><span class="line">        <span class="comment">/* 父结点存放到数组的下标为(n + i)的位置 */</span></span><br><span class="line">        HuffNode[x1].parent  = n + i;</span><br><span class="line">        HuffNode[x2].parent  = n + i;</span><br><span class="line">        <span class="comment">/* 设置 父结点的属性 */</span></span><br><span class="line">        HuffNode[n + i].weight = HuffNode[x1].weight + HuffNode[x2].weight;</span><br><span class="line">        HuffNode[n + i].lchild = x1;</span><br><span class="line">        HuffNode[n + i].rchild = x2;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"第 %d 次循环的两个结果的权值为: %d, %d\n"</span>, i + <span class="number">1</span>, HuffNode[x1].weight, HuffNode[x2].weight); <span class="comment">/* 用于测试 */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125; <span class="comment">/* end for */</span></span><br><span class="line">    <span class="comment">/*  for(i=0;i&lt;n+2;i++)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            printf(" Parents:%d,lchild:%d,rchild:%d,value:%d,weight:%d\n",HuffNode[i].parent,HuffNode[i].lchild,HuffNode[i].rchild,HuffNode[i].value,HuffNode[i].weight);</span></span><br><span class="line"><span class="comment">        &#125;*/</span><span class="comment">//测试</span></span><br><span class="line">&#125; <span class="comment">/* end HuffmanTree */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decodeing</span><span class="params">(<span class="keyword">char</span> <span class="built_in">string</span>[], HNodeType Buf[], <span class="keyword">int</span> Num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//tmp：循环中临时存放哈夫曼树数组的元素下标，从大到小</span></span><br><span class="line">    <span class="keyword">int</span> i, tmp = <span class="number">0</span>, code[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">2</span> * Num - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> *nump;</span><br><span class="line">    <span class="keyword">char</span> num[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(<span class="built_in">string</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">string</span>[i] == <span class="string">'0'</span>)</span><br><span class="line">            num[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            num[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    nump = &amp;num[<span class="number">0</span>];<span class="comment">//nump指向要解码的字符数组的第一个元素的地址</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" 解码结果为： "</span>);</span><br><span class="line">    <span class="keyword">while</span>(nump &lt; (&amp;num[len]))<span class="comment">//循环遍历要解码的字符数组（即输入的解码前字符串），直到最后一个数组元素</span></span><br><span class="line">    &#123;</span><br><span class="line">        tmp = m - <span class="number">1</span>;<span class="comment">//每次循环设置初始元素下标，设置为 哈夫曼树数组 的最后一个有效数据元素的下标（树的根节点）</span></span><br><span class="line">        <span class="keyword">while</span>((Buf[tmp].lchild != <span class="number">-1</span>) &amp;&amp; (Buf[tmp].rchild != <span class="number">-1</span>))<span class="comment">//循环判断该元素有没有子结点，直到没有子结点，则说明遍历到叶子结点，则说明找到一个解码的结果</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(*nump == <span class="number">0</span>)  <span class="comment">//判断要解码的字符数组的当前元素是否为0 0表示左结点 1表示有结点</span></span><br><span class="line">            &#123;</span><br><span class="line">                tmp = Buf[tmp].lchild ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                tmp = Buf[tmp].rchild;</span><br><span class="line">            &#125;</span><br><span class="line">            nump++;                     <span class="comment">//数组元素是字符，每个元素只占一个字节，所以++也就是地址加一，指向数组下一个元素</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" %d"</span>, nump, &amp;num[<span class="built_in">strlen</span>(<span class="built_in">string</span>)], Buf[tmp].value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    HNodeType HuffNode[MAXNODE];            <span class="comment">/* 定义一个结点结构体数组 */</span></span><br><span class="line">    HCodeType HuffCode[MAXLEAF],  cd;       <span class="comment">/* 定义一个编码结构体数组， 同时定义一个临时变量来存放求解编码时的信息(即cd.bit存放当前结点的编码的倒序，cd.start存放结点编码开始位置) */</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        i、j： 循环变量，</span></span><br><span class="line"><span class="comment">        c 循环体中当前的结点在数组中的下标</span></span><br><span class="line"><span class="comment">        p 当前结点的父结点在数组中的下标</span></span><br><span class="line"><span class="comment">        n 有效数据的个数（叶子结点的个数）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> i, j, c, p, n;</span><br><span class="line">    <span class="keyword">char</span> pp[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input n:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    HuffmanTree(HuffNode, n);<span class="comment">//生成哈夫曼树</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*对哈夫曼树进行编码*/</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//循环所有的有效数据，一个一个进行编码 (0 ~ n-1)</span></span><br><span class="line">    &#123;</span><br><span class="line">        cd.start = n - <span class="number">1</span>;       <span class="comment">//</span></span><br><span class="line">        c = i;                  <span class="comment">//c 当前结点在数组中的下标 整体上来说可以表示循环在“树”中走过的结点下标</span></span><br><span class="line">        p = HuffNode[c].parent; <span class="comment">//p 当前结点的父结点在数组中的下标</span></span><br><span class="line">        <span class="keyword">while</span>(p != <span class="number">-1</span>)    <span class="comment">/* 判断父结点存在 */</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(HuffNode[p].lchild == c) <span class="comment">//判断当前结点是不是父结点的左子树根节点 如果是的话就 赋值0</span></span><br><span class="line">                cd.<span class="built_in">bit</span>[cd.start] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span>                        <span class="comment">//如果不是的话就 赋值1 &gt;&gt;&gt;&gt; 因为“左子树分配0，右字数分配1”</span></span><br><span class="line">                cd.<span class="built_in">bit</span>[cd.start] = <span class="number">1</span>;</span><br><span class="line">            cd.start--;        <span class="comment">/* 求编码的低一位 */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 设置下一循环条件 */</span></span><br><span class="line">            c = p;                  <span class="comment">//设置c为父结点的下标 准备进行下次while循环，则那时候的“当前的结点”就会变成现在结点的父结点</span></span><br><span class="line">            p = HuffNode[c].parent; <span class="comment">//同理</span></span><br><span class="line"></span><br><span class="line">        &#125;<span class="comment">/* end while */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 保存 求出的每个叶结点的哈夫曼编码和编码的起始位 */</span></span><br><span class="line">        <span class="keyword">for</span>(j = cd.start + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            HuffCode[i].<span class="built_in">bit</span>[j] = cd.<span class="built_in">bit</span>[j];</span><br><span class="line">        &#125;</span><br><span class="line">        HuffCode[i].start = cd.start + <span class="number">1</span>;   <span class="comment">//编码的起始位</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="comment">/* end for */</span></span><br><span class="line">    <span class="comment">/*对哈夫曼树进行编码结束*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印已保存好的所有存在编码的哈夫曼编码 */</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"第%d位置的树结点的编码为：: "</span>, i);</span><br><span class="line">        <span class="keyword">for</span>(j = HuffCode[i].start; j &lt; n; j++)<span class="comment">//从有效位置开始输出该结点的编码</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, HuffCode[i].<span class="built_in">bit</span>[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" 结点的属性bit数组中有效的编码开始位置为:bit[%d]\n"</span>, HuffCode[i].start);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 打印结束 */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Decoding?Please Enter code:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;pp);</span><br><span class="line">    decodeing(pp, HuffNode, n);</span><br><span class="line">    getch();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线索二叉树</title>
      <link href="/2020/01/15/20170906_xsecs/"/>
      <url>/2020/01/15/20170906_xsecs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>线索二叉树：二叉树存储结构完全依靠链表，而二叉树的链表表示的关系是父结点和子结点（子树）的关系，<br>            而无法直接获得前驱-后继的关系，即，当要求某个结点的前驱结点or后继结点比较麻烦；<br>            为了在不增加指针的情况下直接快速找到前驱/后继结点，可以使用 线索二叉树 来实现；</p></blockquote><a id="more"></a><blockquote><p>由于遍历方法不同时，产生的元素顺序不同，则每个元素的前驱/后继结点也不一定相同，<br>        所以线索二叉树就由此分为先序线索二叉树，中序线索二叉树和后序线索二叉树；</p></blockquote><img src="/2020/01/15/20170906_xsecs/tree005.png" title="中序线索二叉树"><pre><code>上图为 中序线索二叉树，由上图二叉树结构可知，其中序遍历结果为 B F D A C G E H 其中 B、D、F、C等元素拥有空的指针域；这些空的指针域可以用来存放前驱或者后继结点的地址，这种指针称为线索（Thread）；而为了与存放子树（子树）的指针区分开来，增加了两个标志lflag，rflag表示左/右指针是哪种指针；由此可得 线索二叉树 结构为：</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> DATA;          <span class="comment">//定义树结点的元素类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span>&#123;</span><br><span class="line">    SubTree,</span><br><span class="line">    Thread</span><br><span class="line">&#125;NodeFlag;                  <span class="comment">//定义枚举类型NodeFlag，包含SubTree（表示子树）和Thread（表示线索），分别为 0，1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ChainTree</span>&#123;</span>   <span class="comment">//定义二叉树结点类型</span></span><br><span class="line">    DATA data;              <span class="comment">//结点数据</span></span><br><span class="line">    NodeFlag lflag;         <span class="comment">//左标志：用来表示左指针是子树指针还是线索指针</span></span><br><span class="line">    NodeFlag rflag;         <span class="comment">//右标志：用来表示右指针是子树指针还是线索指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ChainTree</span> *<span class="title">left</span>;</span> <span class="comment">//左子树结点指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ChainTree</span> *<span class="title">right</span>;</span><span class="comment">//右子树结点指针</span></span><br><span class="line">&#125;ChainBinTree;</span><br></pre></td></tr></table></figure><h3 id="线索二叉树实例代码"><a href="#线索二叉树实例代码" class="headerlink" title="线索二叉树实例代码"></a>线索二叉树实例代码</h3><p><em>本实例是在二叉树代码的基础上增加和修改的 这里只展示新增和修改的部分， 原来的代码见: <a href="http://zj2626.github.io/2017/08/27/20170827_ecs/">http://zj2626.github.io/2017/08/27/20170827_ecs/</a></em></p><blockquote><h4 id="BinTree-h"><a href="#BinTree-h" class="headerlink" title="BinTree.h"></a>BinTree.h</h4></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        修改结构体为：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> DATA;          <span class="comment">//定义树结点的元素类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span>&#123;</span><br><span class="line">    SubTree,</span><br><span class="line">    Thread</span><br><span class="line">&#125;NodeFlag;                  <span class="comment">//定义枚举类型NodeFlag，包含SubTree（表示子树）和Thread（表示线索），分别为 0，1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ChainTree</span>&#123;</span>   <span class="comment">//定义二叉树结点类型</span></span><br><span class="line">    DATA data;              <span class="comment">//结点数据</span></span><br><span class="line">    NodeFlag lflag;         <span class="comment">//左标志：用来表示左指针是子树指针还是线索指针</span></span><br><span class="line">    NodeFlag rflag;         <span class="comment">//右标志：用来表示右指针是子树指针还是线索指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ChainTree</span> *<span class="title">left</span>;</span> <span class="comment">//左子树结点指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ChainTree</span> *<span class="title">right</span>;</span><span class="comment">//右子树结点指针</span></span><br><span class="line">&#125;ChainBinTree;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        增加的函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树按中序线索化*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BinTreeThreading_LDR</span><span class="params">(ChainBinTree *bt)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*中序线索二叉树 找到后继结点*/</span></span><br><span class="line"><span class="function">ChainBinTree *<span class="title">BinTreeNext_LDR</span><span class="params">(ChainBinTree *bt)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*中序线索二叉树遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ThreadBinTree_LDR</span><span class="params">(ChainBinTree *bt, <span class="keyword">void</span> (*oper)(ChainBinTree *p))</span></span>;</span><br></pre></td></tr></table></figure><blockquote><h4 id="BinTree-c"><a href="#BinTree-c" class="headerlink" title="BinTree.c"></a>BinTree.c</h4></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        增加的函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">/********************************线索二叉树***************************/</span></span><br><span class="line"></span><br><span class="line">ChainBinTree *Previous = <span class="literal">NULL</span>;<span class="comment">//保存前驱结点指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉树按中序线索化*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BinTreeThreading_LDR</span><span class="params">(ChainBinTree *bt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt)&#123;<span class="comment">//判断结点非空</span></span><br><span class="line">        <span class="comment">//左子树操作</span></span><br><span class="line">        BinTreeThreading_LDR(bt-&gt;left);             <span class="comment">//递归调用，线索化左子树</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//当前结点操作</span></span><br><span class="line">        bt-&gt;lflag = (bt-&gt;left) ? SubTree : Thread;  <span class="comment">//设置左指针域标志</span></span><br><span class="line">        bt-&gt;rflag = (bt-&gt;right) ? SubTree : Thread; <span class="comment">//设置右指针域标志</span></span><br><span class="line">        <span class="keyword">if</span>(Previous)&#123;                               <span class="comment">//判断前驱结点是否存在（就第一个没有前驱）</span></span><br><span class="line">            <span class="keyword">if</span>(Previous-&gt;rflag == Thread)           <span class="comment">//判断起前驱结点的右标志是否为线索，如果不是，则说明该前驱结点存在右子树</span></span><br><span class="line">                Previous-&gt;right = bt;               <span class="comment">//设置前驱结点的右线索指向后继结点（当前）</span></span><br><span class="line">            <span class="keyword">if</span>(bt-&gt;lflag == Thread)                 <span class="comment">//判断当前结点的左标志是否为线索，如果不是，则说明当前结点存在左子树</span></span><br><span class="line">                bt-&gt;left = Previous;                <span class="comment">//设置当前结点的左线索指向前驱结点</span></span><br><span class="line">        &#125;</span><br><span class="line">        Previous = bt;<span class="comment">//保存刚访问的结点到Previous，作为下一个结点的前驱结点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//右子树操作</span></span><br><span class="line">        BinTreeThreading_LDR(bt-&gt;right);<span class="comment">//递归调用，线索化右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*中序线索二叉树 找到后继结点*/</span></span><br><span class="line"><span class="function">ChainBinTree *<span class="title">BinTreeNext_LDR</span><span class="params">(ChainBinTree *bt)</span></span>&#123;</span><br><span class="line">    ChainBinTree *nextNode;                 <span class="comment">//存放后继结点</span></span><br><span class="line">    <span class="keyword">if</span>(!bt)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(bt-&gt;rflag == Thread)&#123;                <span class="comment">//判断当前结点右标志是否为线索，如果是则说明right存放的是后继结点的地址，直接返回</span></span><br><span class="line">        <span class="keyword">return</span> bt-&gt;right;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        nextNode = bt-&gt;right;               <span class="comment">//暂时存放当前结点的右子树的根节点</span></span><br><span class="line">        <span class="keyword">while</span>(nextNode-&gt;lflag == SubTree)&#123;  <span class="comment">//循环获取右子树的“最左结点”，这就是要求的后继结点</span></span><br><span class="line">            nextNode = nextNode-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*中序线索二叉树遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ThreadBinTree_LDR</span><span class="params">(ChainBinTree *bt, <span class="keyword">void</span> (*oper)(ChainBinTree *p))</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt)&#123;</span><br><span class="line">        <span class="keyword">while</span>(bt-&gt;lflag == SubTree)&#123;    <span class="comment">//循环找到第一个中序遍历的结点</span></span><br><span class="line">            bt = bt-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            oper(bt);</span><br><span class="line">            bt = BinTreeNext_LDR(bt);   <span class="comment">//获取后继结点，把地址赋值给bt</span></span><br><span class="line">        &#125;<span class="keyword">while</span>(bt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h4 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h4></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            修改的main函数为：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ChainBinTree *root = <span class="literal">NULL</span>;          <span class="comment">//root为指向二叉树根节点的指针</span></span><br><span class="line">    <span class="keyword">char</span> select;</span><br><span class="line">    <span class="keyword">void</span> (*oper1)();                    <span class="comment">//指向函数的指针</span></span><br><span class="line">    oper1 = oper;                       <span class="comment">//指向具体操作的函数</span></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n1.设置二叉树根元素 2.添加二叉树结点  3.先序  4.中序  5.后序  6.按层  7.二叉树深度  8.生成中序线索二叉树  9.遍历中序线索二叉树  0.退出"</span>);</span><br><span class="line">        select = getch();</span><br><span class="line">        <span class="keyword">switch</span>(select)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">                root = initRoot();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">                addNode(root);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'3'</span>:</span><br><span class="line">                binTree_DLR(root, oper1);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'4'</span>:</span><br><span class="line">                binTree_LDR(root, oper1);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'5'</span>:</span><br><span class="line">                binTree_LRD(root, oper1);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'6'</span>:</span><br><span class="line">                binTree_Level(root, oper1);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'7'</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, binTreeDepth(root));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'8'</span>:</span><br><span class="line">                BinTreeThreading_LDR(root);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'9'</span>:</span><br><span class="line">                ThreadBinTree_LDR(root, oper1);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(select != <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line">    binTreeClear(root);</span><br><span class="line">    root = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>普通二叉树</title>
      <link href="/2020/01/15/20170826_ecs/"/>
      <url>/2020/01/15/20170826_ecs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>二叉树：</p></blockquote><pre><code>二叉树性质：    1.在二叉树的第i层的结点总数最多有2^(i-1)个结点    2.深度为k的二叉树最多有2^(k) - 1个结点，最少有k个结点    3.二叉树，如果其叶结点为n0，而度为2的结点总数为n2，则n0=n2+1    4.有n个结点的完全二叉树的深度k为：k=[log2(n)]+1    5.有n个结点的完全二叉树各结点如果用顺序表存储，对任意结点i，有如下关系：        如果 i != 1，则其父节点的编号为i/2        如果 2*i &lt;= n，则其左子树根节点的编号为2*i；若 2*i&gt;n，则无左子树        如果 2*i+1 &lt;= n，则右子树根节点的编号为2*i+1；若 2*i+1&gt;n，则无右子树</code></pre><blockquote><p>二叉树的存储：</p></blockquote><a id="more"></a><pre><code>1.顺序存储结构：若是完全二叉树，则某个结点的父节点=（该节点的位置/2），其子节点为（该节点的位置*2）和（该节点的位置*2+1），从1开始计算；                若不是完全二叉树，可以在没有结点数据的位置置为空，模拟成完全二叉树（然后同上）；</code></pre><img src="/2020/01/15/20170826_ecs/tree001.png" title="完全二叉树"><pre><code>如图二叉树，如果使用顺序存储结则数据结构定义为如下sqTree数组：    #definde MAXSIZE 100    typedef int DATA;    typedef DATA SeqBinTree[MAXSIZE];    SeqBinTree sqTree;       //顺序存储结构对于上面的完全二叉树，最终使用顺序存储结构后，得到的效果为如下图：</code></pre><img src="/2020/01/15/20170826_ecs/tree002.png" title="顺序存储实现完全二叉树"><pre><code>通过图中规律可发现：    1.求某个结点的子结点，只需把该结点在数组中的位置（非下标，而是下标+1）乘2，则子节点为所得的位置的结点以及其下一个结点；    2.求某个结点的父结点，只需把该结点在数组中的位置除以2，说的的商即为父结点位置；    3.对于非完全二叉树，可以模拟为完全二叉树使用，即把没有结点的位置“空出来”，表示没有结点，如图，假设I节点不存在，则9的位置即为空顺序存储结构问题：占用内存连续且必须提前分配足够的内存，不能扩容，不够灵活，所以一般使用链式存储结构存储树；</code></pre><img src="/2020/01/15/20170826_ecs/tree003.png" title="链式存储结构"><pre><code>2.二叉链式存储结构：数据结构定义包括一个数据，一个指向左子树的指针，一个指向右子树的指针（没有则赋值为空）；    对于链式存储结构，可以使用树的基本原理，即树相当于多个子树嵌套，树中包含多个子树，而子树也是一个树结构，所以算法中经常涉及到递归调用，递归查询；    其中left指针存放左子树的根节点的地址，right指针存放右子树的根节点的地址；2.三叉链式存储结构：数据结构定义包括一个数据，一个指向左子树的指针，一个指向右子树的指针以及一个指向父结点的指针</code></pre><blockquote><p>二叉树的遍历:</p></blockquote><pre><code>1.先序遍历(DLR): 顺序:根-左-右2.中序遍历(LDR): 顺序:左-根-右3.后序遍历(LRD)&quot; 顺序:左-右-跟4.按层遍历</code></pre><h3 id="二叉顺序存储结构"><a href="#二叉顺序存储结构" class="headerlink" title="二叉顺序存储结构"></a>二叉顺序存储结构</h3><h3 id="二叉链式存储结构"><a href="#二叉链式存储结构" class="headerlink" title="二叉链式存储结构"></a>二叉链式存储结构</h3><blockquote><h4 id="BinTree-h"><a href="#BinTree-h" class="headerlink" title="BinTree.h"></a>BinTree.h</h4></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QUEUE_MAXSIZE 50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> DATA;          <span class="comment">//定义树结点的元素类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ChainTree</span>&#123;</span>   <span class="comment">//定义二叉树结点类型</span></span><br><span class="line">    DATA data;              <span class="comment">//结点数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ChainTree</span> *<span class="title">left</span>;</span> <span class="comment">//左子树结点指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ChainTree</span> *<span class="title">right</span>;</span><span class="comment">//右子树结点指针</span></span><br><span class="line">&#125;ChainBinTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*初始化二叉树根节点*/</span></span><br><span class="line"><span class="function">ChainBinTree *<span class="title">binTreeInit</span><span class="params">(ChainBinTree *node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加数据到二叉树*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binTreeAddNode</span><span class="params">(ChainBinTree *bt, ChainBinTree *node, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*返回左子节点和右子节点*/</span></span><br><span class="line"><span class="function">ChainBinTree *<span class="title">binTreeLeft</span><span class="params">(ChainBinTree *bt)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ChainBinTree *<span class="title">binTreeRight</span><span class="params">(ChainBinTree *bt)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*判断二叉树是否为空*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binTreeIsEmpty</span><span class="params">(ChainBinTree *bt)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*求二叉树深度*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binTreeDepth</span><span class="params">(ChainBinTree *bt)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*寻找值为data的结点*/</span></span><br><span class="line"><span class="function">ChainBinTree *<span class="title">binTreeFind</span><span class="params">(ChainBinTree *bt, DATA data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*清空树*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binTreeClear</span><span class="params">(ChainBinTree *bt)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************树的遍历***************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*遍历树要进行的操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">oper</span><span class="params">(ChainBinTree *p)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*先序遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binTree_DLR</span><span class="params">(ChainBinTree *bt, <span class="keyword">void</span> (*oper) (ChainBinTree *p))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*中序遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binTree_LDR</span><span class="params">(ChainBinTree *bt, <span class="keyword">void</span> (*oper) (ChainBinTree *p))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*后序遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binTree_LRD</span><span class="params">(ChainBinTree *bt, <span class="keyword">void</span> (*oper) (ChainBinTree *p))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*按层遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binTree_Level</span><span class="params">(ChainBinTree *bt, <span class="keyword">void</span> (*oper) (ChainBinTree *p))</span></span>;</span><br></pre></td></tr></table></figure><blockquote><h4 id="BinTree-c"><a href="#BinTree-c" class="headerlink" title="BinTree.c"></a>BinTree.c</h4></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BinTree.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*初始化二叉树根节点*/</span></span><br><span class="line"><span class="function">ChainBinTree *<span class="title">binTreeInit</span><span class="params">(ChainBinTree *node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加数据到二叉树 bt为要添加的位置的父节点 node为添加的节点 n=1表示左子树 n=2表示右子树*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binTreeAddNode</span><span class="params">(ChainBinTree *bt, ChainBinTree *node, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"父节点不存在!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(n)&#123;</span><br><span class="line">        <span class="comment">//添加到左子树</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span>(bt-&gt;left)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"左子树不为空, 不能添加!\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                bt-&gt;left = node;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span>(bt-&gt;right)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"右子树不为空, 不能添加!\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                bt-&gt;right = node;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"参数错误"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*返回左子节点和右子节点*/</span></span><br><span class="line"><span class="function">ChainBinTree *<span class="title">binTreeLeft</span><span class="params">(ChainBinTree *bt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt)</span><br><span class="line">        <span class="keyword">return</span> bt-&gt;left;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ChainBinTree *<span class="title">binTreeRight</span><span class="params">(ChainBinTree *bt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt)</span><br><span class="line">        <span class="keyword">return</span> bt-&gt;right;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*判断二叉树是否为空*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binTreeIsEmpty</span><span class="params">(ChainBinTree *bt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*求二叉树深度*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binTreeDepth</span><span class="params">(ChainBinTree *bt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dep1,dep2;</span><br><span class="line">    <span class="keyword">if</span>(bt == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//空树</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//递归调用 递归子树直到最后的叶子结点没有子节点,返回0</span></span><br><span class="line">        dep1 = binTreeDepth(bt-&gt;left);</span><br><span class="line">        dep2 = binTreeDepth(bt-&gt;right);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回子树中深度更深的子树的深度</span></span><br><span class="line">        <span class="keyword">if</span>(dep1 &gt; dep2)&#123;</span><br><span class="line">            <span class="keyword">return</span> dep1 + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> dep2 + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*寻找值为data的结点*/</span></span><br><span class="line"><span class="function">ChainBinTree *<span class="title">binTreeFind</span><span class="params">(ChainBinTree *bt, DATA data)</span></span>&#123;</span><br><span class="line">    ChainBinTree *p;</span><br><span class="line">    <span class="keyword">if</span>(bt == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(bt-&gt;data == data)&#123;</span><br><span class="line">            <span class="keyword">return</span> bt;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//递归调用</span></span><br><span class="line">            <span class="keyword">if</span>(p = binTreeFind(bt-&gt;left, data))</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(p = binTreeFind(bt-&gt;right, data))</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*清空树*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binTreeClear</span><span class="params">(ChainBinTree *bt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt)&#123;</span><br><span class="line">        binTreeClear(bt-&gt;left);</span><br><span class="line">        binTreeClear(bt-&gt;right);</span><br><span class="line">        <span class="built_in">free</span>(bt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************树的遍历***************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*遍历树要进行的操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">oper</span><span class="params">(ChainBinTree *p)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c \t"</span>, p-&gt;data);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*先序遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binTree_DLR</span><span class="params">(ChainBinTree *bt, <span class="keyword">void</span> (*oper)(ChainBinTree *p))</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt)&#123;</span><br><span class="line">        oper(bt);</span><br><span class="line">        binTree_DLR(bt-&gt;left, oper);</span><br><span class="line">        binTree_DLR(bt-&gt;right, oper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*中序遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binTree_LDR</span><span class="params">(ChainBinTree *bt, <span class="keyword">void</span> (*oper) (ChainBinTree *p))</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt)&#123;</span><br><span class="line">        binTree_LDR(bt-&gt;left, oper);</span><br><span class="line">        oper(bt);</span><br><span class="line">        binTree_LDR(bt-&gt;right, oper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*后序遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binTree_LRD</span><span class="params">(ChainBinTree *bt, <span class="keyword">void</span> (*oper) (ChainBinTree *p))</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt)&#123;</span><br><span class="line">        binTree_LRD(bt-&gt;left, oper);</span><br><span class="line">        binTree_LRD(bt-&gt;right, oper);</span><br><span class="line">        oper(bt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*按层遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binTree_Level</span><span class="params">(ChainBinTree *bt, <span class="keyword">void</span> (*oper) (ChainBinTree *p))</span></span>&#123;</span><br><span class="line">    ChainBinTree *p;</span><br><span class="line">    ChainBinTree *q[QUEUE_MAXSIZE];         <span class="comment">//定义一个顺序队列,先进先出</span></span><br><span class="line">    <span class="keyword">int</span> head = <span class="number">0</span>, tail = <span class="number">0</span>;                 <span class="comment">//队首队尾序号</span></span><br><span class="line">    <span class="keyword">if</span>(bt)&#123;                                 <span class="comment">//如果队首指针不为空</span></span><br><span class="line">        tail = (tail + <span class="number">1</span>) % QUEUE_MAXSIZE;  <span class="comment">//计算循环队列队尾序号</span></span><br><span class="line">        q[tail] = bt;                       <span class="comment">//把二叉树根指针进队</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//本质上：每次tail进行两次改变（只有当是完全二叉树,其他情况则有不同），然后head进行一次改变，实现按层把树的元素放到队列中去</span></span><br><span class="line">    <span class="comment">//即每次把head指向的结点的两个子节点存放到队列，并且把该结点进行操作（执行oper方法）；</span></span><br><span class="line">    <span class="comment">//当tail不再增加，也就是说再也没有哪个未读取得结点还拥有子节点了，则剩下的就是把队列中剩余未操作的结点进行操作，直到队列为空，即head==tail，退出循环</span></span><br><span class="line">    <span class="keyword">while</span>(head != tail)&#123;                    <span class="comment">//队列不为空, 进行循环</span></span><br><span class="line">        head = (head + <span class="number">1</span>) % QUEUE_MAXSIZE;  <span class="comment">//计算循环队列的队首序号</span></span><br><span class="line">        p = q[head];                        <span class="comment">//获取队列元素</span></span><br><span class="line">        oper(p);                           <span class="comment">//处理队首元素</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(p-&gt;left != <span class="literal">NULL</span>)&#123;                <span class="comment">//若结点存在左子树, 则左子树指针进队</span></span><br><span class="line">            tail = (tail + <span class="number">1</span>) % QUEUE_MAXSIZE;</span><br><span class="line">            q[tail] = p-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(p-&gt;right != <span class="literal">NULL</span>)&#123;                <span class="comment">//若结点存在右子树, 则右子树指针进队</span></span><br><span class="line">            tail = (tail + <span class="number">1</span>) % QUEUE_MAXSIZE;</span><br><span class="line">            q[tail] = p-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/15/20170826_ecs/IMG_0796.JPG" title="按层遍历"><p>按层遍历过程。。。</p><blockquote><h4 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h4></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BinTree.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">ChainBinTree *<span class="title">initRoot</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ChainBinTree *node;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(node = (ChainBinTree *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ChainBinTree)))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n输入根数据结点"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;node-&gt;data);</span><br><span class="line">        node-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">        node-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> binTreeInit(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addNode</span><span class="params">(ChainBinTree *bt)</span></span>&#123;</span><br><span class="line">    ChainBinTree *node, *parent;<span class="comment">//存放新增的结点和要挂接的父节点</span></span><br><span class="line">    DATA data;</span><br><span class="line">    <span class="keyword">char</span> select;</span><br><span class="line">    <span class="keyword">if</span>(node = (ChainBinTree *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ChainBinTree)))&#123;<span class="comment">//分配内存</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n输入二叉树结点数据："</span>);</span><br><span class="line">        fflush(<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;node-&gt;data);</span><br><span class="line">        node-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">        node-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入父结点数据："</span>);</span><br><span class="line">        fflush(<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;data);</span><br><span class="line">        parent = binTreeFind(bt, data);<span class="comment">//查找结点</span></span><br><span class="line">        <span class="keyword">if</span>(!parent)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"未找到结点\n"</span>);</span><br><span class="line">            <span class="built_in">free</span>(node);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1.添加到左子树\n2.添加到右子树"</span>);</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            select = getch();</span><br><span class="line">            select -= <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span>(select == <span class="number">1</span> || select == <span class="number">2</span>)&#123;</span><br><span class="line">                binTreeAddNode(parent, node, select);<span class="comment">//添加结点到二叉树</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>(select != <span class="number">1</span> &amp;&amp; select != <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ChainBinTree *root = <span class="literal">NULL</span>;          <span class="comment">//root为指向二叉树根节点的指针</span></span><br><span class="line">    <span class="keyword">char</span> select;</span><br><span class="line">    <span class="keyword">void</span> (*oper1)();                    <span class="comment">//指向函数的指针</span></span><br><span class="line">    oper1 = oper;                       <span class="comment">//指向具体操作的函数</span></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n1.设置二叉树根元素 2.添加二叉树结点  3.先序  4.中序  5.后序  6.按层  7.二叉树深度  0.退出"</span>);</span><br><span class="line">        select = getch();</span><br><span class="line">        <span class="keyword">switch</span>(select)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">                root = initRoot();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">                addNode(root);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'3'</span>:</span><br><span class="line">                binTree_DLR(root, oper1);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'4'</span>:</span><br><span class="line">                binTree_LDR(root, oper1);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'5'</span>:</span><br><span class="line">                binTree_LRD(root, oper1);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'6'</span>:</span><br><span class="line">                binTree_Level(root, oper1);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'7'</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, binTreeDepth(root));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(select != <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line">    binTreeClear(root);</span><br><span class="line">    root = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈实例（转载）</title>
      <link href="/2020/01/15/20170817_z/"/>
      <url>/2020/01/15/20170817_z/</url>
      
        <content type="html"><![CDATA[<blockquote><p>栈：只允许在一端进行插入和删除操作，（后进先出）</p></blockquote><blockquote><p>实现简单的四则运算 包括 +-*/以及()</p></blockquote><blockquote><p>参考博客： <a href="http://blog.csdn.net/zhaishaojiang/article/details/40017791" target="_blank" rel="noopener">http://blog.csdn.net/zhaishaojiang/article/details/40017791</a></p></blockquote><a id="more"></a><blockquote><p>工程一共包含5个文件(由于代码不多，未分成头文件和实现)</p><ol><li>OptrStack.h OptrStack.c 操作符栈 包含基本的栈结构定义和操作方法</li><li>OpndStack.h OpndStack.c 操作数栈 包含基本的栈结构定义和操作方法</li><li>main.c ： 测试文件 包含运算的方法</li></ol></blockquote><pre><code>定义两个栈分别用于存储操作符和操作数；栈所具有的功能有：置栈空，判栈空，入栈，出栈，取栈顶；将输入的算术表达式存入字符数组中；将表达式中的运算符划分优先级；进行双目运算，即+，-，*，/；将表达式压入栈中，并计算表达式结果。（思路：将操作符压入操作符栈中，将操作数压入操作数栈中。过程：判断当前运算符与操作符栈栈顶元素的优先级，如果高于栈顶元素，则入栈；小于栈顶元素，则从操作数栈中依次出两个数，并将操作符栈中栈顶元素出栈，再将从操作数栈中出的两个数，按从操作符栈栈中出的运算符运算，并将结果压入操作数栈中，再将当前的操作符压入操作符栈中。）</code></pre><blockquote><h4 id="OpndStack-h"><a href="#OpndStack-h" class="headerlink" title="OpndStack.h"></a>OpndStack.h</h4></blockquote><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define MAXSIZE2 100typedef struct{    double date[MAXSIZE2];    int top;}OpndStack;        //操作数结构体/*-------操作数相关操作-------*/OpndStack *Init_OpndStack();/*置栈空*/int Empty_OpndStack(OpndStack *t);/*判空栈*/int Push_OpndStack(OpndStack *t, double y);/*入栈(注意：判断栈是否已满)*/double Pop_OpndStack(OpndStack *t);/*出栈(注意：判断栈是否已空)*/double GetTop_OpndStack(OpndStack *t);/*取栈顶元素*/</code></pre><blockquote><h4 id="OpndStack-c"><a href="#OpndStack-c" class="headerlink" title="OpndStack.c"></a>OpndStack.c</h4></blockquote><pre><code>#include &quot;OpndStack.h&quot;/*-------操作数相关操作-------*/OpndStack *Init_OpndStack()/*置栈空*/{    OpndStack *t;    t = (OpndStack *)malloc(sizeof(OpndStack));    t-&gt;top = -1;    return t;}int Empty_OpndStack(OpndStack *t)/*判空栈*/{    if(t-&gt;top == -1)    {        return 1;    }    else    {        return 0;    }}int Push_OpndStack(OpndStack *t, double y)/*入栈(注意：判断栈是否已满)*/{    if(t-&gt;top == MAXSIZE2 - 1)    {        return 0;    }    else    {        t-&gt;top ++;        t-&gt;date[t-&gt;top] = y;        return 1;    }}double Pop_OpndStack(OpndStack *t)/*出栈(注意：判断栈是否已空)*/{    double y;        //接收要出栈的元素    if( Empty_OpndStack(t) )    {        return 0;    }    y = t-&gt;date[t-&gt;top];    t-&gt;top --;    return y;}double GetTop_OpndStack(OpndStack *t)/*取栈顶元素*/{    if( Empty_OpndStack(t) )    {        return 0;    }    else    {        return (t-&gt;date[t-&gt;top]);    }}</code></pre><blockquote><h4 id="OptrStack-h"><a href="#OptrStack-h" class="headerlink" title="OptrStack.h"></a>OptrStack.h</h4></blockquote><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define MAXSIZE1 100typedef struct{    char date[MAXSIZE1];    int top;}OptrStack;        //操作符结构体/*-------操作符相关操作-------*/OptrStack *Init_OptrStack();    /*置栈空*/int Empty_OptrStack(OptrStack *s);/*判空栈*/int Push_OptrStack(OptrStack *s, char x);/*入栈(注意：判断栈是否已满)*/char Pop_OptrStack(OptrStack *s);/*出栈(注意：判断栈是否已空)*/char GetTop_OptrStack(OptrStack *s);/*取栈顶元素，先判空*/</code></pre><blockquote><h4 id="OptrStack-c"><a href="#OptrStack-c" class="headerlink" title="OptrStack.c"></a>OptrStack.c</h4></blockquote><pre><code>#include &quot;OptrStack.h&quot;/*-------操作符相关操作-------*/OptrStack *Init_OptrStack()    /*置栈空*/{    OptrStack *s;    s = (OptrStack *)malloc(sizeof(OptrStack));    s-&gt;top = -1;    return s;}int Empty_OptrStack(OptrStack *s)/*判空栈*/{    if(s-&gt;top == -1)    {        return 1;        //如果栈为空，则返回真数    }    else    {        return 0;        //反之，返回零    }}int Push_OptrStack(OptrStack *s, char x)/*入栈(注意：判断栈是否已满)*/{    if(s-&gt;top == MAXSIZE1 - 1)    {        return 0;    }    else    {        s-&gt;top ++;        //栈顶指针向上移，再赋值        s-&gt;date[s-&gt;top] = x;        return 1;    }}char Pop_OptrStack(OptrStack *s)/*出栈(注意：判断栈是否已空)*/{    int x;        //接收要出栈的元素    if( Empty_OptrStack(s) )    {        return 0;    }    x = s-&gt;date[s-&gt;top];    s-&gt;top --;    return x;}char GetTop_OptrStack(OptrStack *s)/*取栈顶元素，先判空*/{    if( Empty_OptrStack(s) )    {        return 0;    }    else    {        return (s-&gt;date[s-&gt;top]);    }}</code></pre><blockquote><h4 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h4></blockquote><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &quot;OpndStack.h&quot;#include &quot;OptrStack.h&quot;int Rank(char op);            //划分运算符的优先级double Operate(double a, double b, char op);    //运算操作void Handle_str(char str[]);        //将储存表达式的字符数组压入栈内,并运算int main(){    char str[100];    printf(&quot;请输入算术表达式(功能：+，-，*，/。可带括号！):\n&quot;);    scanf(&quot;%s&quot;, str);    Handle_str(str);    return 0;}int Rank(char op)            //划分运算符的优先级{    int x;    switch(op)    {    case &apos;#&apos;:        x = 0;break;    case &apos;(&apos;:        x = 1;break;    case &apos;+&apos;:    case &apos;-&apos;:        x = 2;break;    case &apos;*&apos;:    case &apos;/&apos;:        x = 3;break;    }    return x;}double Operate(double a, double b, char op)    //运算操作{    double c;    switch(op)    {    case &apos;+&apos;:        c = a + b;break;    case &apos;-&apos;:        c = a - b;break;    case &apos;*&apos;:        c = a * b;break;    case &apos;/&apos;:        if(b == 0)        {            printf(&quot;分母为零!\n&quot;);            return 0;        }        else            c = a / b;break;    default:        printf(&quot;输入的字符非法!\n&quot;);        break;    }    return c;}void Handle_str(char str[])        //将储存表达式的字符数组压入栈内{    OptrStack *optr = Init_OptrStack();    //初始化操作符栈    OpndStack *opnd = Init_OpndStack();        //初始化操作数栈    int i,j;        //i,j为循环变量，a,b接收从操作数栈中出栈的元素    double f,a,b;        //接收将字符数转换为浮点数的值    char d[100];    //储存字符串中连续的‘数’    char op;        //接收从操作符栈中出栈的元素    Push_OptrStack(optr, &apos;#&apos;);    //先往操作符栈中压入&apos;#&apos;    for (i = 0; str[i]; i++)    {        switch(str[i]){        case &apos;+&apos;:        case &apos;-&apos;:            /*先判断当前运算符与操作符栈栈顶元素的优先级，如果高于栈顶元素，则入栈；                小于栈顶元素，则从操作数栈中依次出两个数，并将操作符栈中栈顶元素出栈，                再将从操作数栈中出的两个数，按从操作符栈栈中出的运算符运算，并将结果压入操作数栈中，                再将当前的操作符压入操作符栈中。*/            if(GetTop_OptrStack(optr) == &apos;#&apos; || GetTop_OptrStack(optr) == &apos;(&apos;)            {                Push_OptrStack(optr, str[i]);//入栈            }            else            {                a = Pop_OpndStack(opnd);//接收从操作数栈中出栈的元素                b = Pop_OpndStack(opnd);//接收从操作数栈中出栈的元素                op = Pop_OptrStack(optr);//接收从操作符栈中出栈的元素                Push_OpndStack(opnd, Operate(b, a, op));//将计算后的值压入操作数栈中                Push_OptrStack(optr, str[i]);            }            break;        case &apos;*&apos;:        case &apos;/&apos;:            if(Rank(str[i]) &gt; Rank(GetTop_OptrStack(optr)) || GetTop_OptrStack(optr) == &apos;(&apos;)            {                Push_OptrStack(optr, str[i]);            }            else            {                a = Pop_OpndStack(opnd);                b = Pop_OpndStack(opnd);                op = Pop_OptrStack(optr);                Push_OpndStack(opnd, Operate(b, a, op));//将计算后的值压入操作数栈中                Push_OptrStack(optr, str[i]);            }            break;        case &apos;(&apos;:            Push_OptrStack(optr, str[i]);            break;        case &apos;)&apos;:            while(GetTop_OptrStack(optr) != &apos;(&apos;)            {                a = Pop_OpndStack(opnd);                b = Pop_OpndStack(opnd);                op = Pop_OptrStack(optr);                Push_OpndStack(opnd, Operate(b, a, op)); //将计算后的值压入操作数栈中            }            Pop_OptrStack(optr);            break;        default:            j=0;            do{                d[j++]=str[i];                i++;            }while(str[i]&gt;=&apos;0&apos; &amp;&amp; str[i]&lt;=&apos;9&apos;|| str[i]==&apos;.&apos;);  //可存入一个或多个数字字符            d[j]=&apos;\0&apos;;     //将输入的连续多个数字字符拼成了字符串            i--;            f=atof(d);    //调用库函数atof()将字符数转换为浮点数            Push_OpndStack(opnd, f);    //将转换后的数压入操作数栈中            break;        }    }    while(GetTop_OptrStack(optr) != &apos;#&apos;)    {        a = Pop_OpndStack(opnd);        b = Pop_OpndStack(opnd);        op = Pop_OptrStack(optr);        Push_OpndStack(opnd, Operate(b, a, op));//将计算后的值压入操作数栈中    }    printf(&quot;表达式%s = %g\n&quot;, str, GetTop_OpndStack(opnd));//将操作数栈中的元素(即表达式的最终结果)打印出来}</code></pre><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列实例（全）</title>
      <link href="/2020/01/15/20170816_dl/"/>
      <url>/2020/01/15/20170816_dl/</url>
      
        <content type="html"><![CDATA[<blockquote><p>队列：只允许在前端（队头）进行删除操作，在后端（队尾）进行插入操作，（先进先出）</p></blockquote><blockquote><p>实现银行摇号排队共功能</p></blockquote><a id="more"></a><blockquote><p>工程一共包含4个文件(由于代码不多，未分成头文件和实现)</p><ol><li>Entity.h ：声明线性表的元素的类型。可以是基本数据类型也可以是结构体</li><li>SeqQueue.h ：普通的队列以及一般功能的实现</li><li>CycleQueue.h ：循环队列以及功能的实现（实例）</li><li>main.c ： 测试文件</li></ol></blockquote><pre><code>操作：1.初始化队列          2.进队          3.出队          4.获取长度          5.获取第一个元素</code></pre><blockquote><h4 id="Entity-h"><a href="#Entity-h" class="headerlink" title="Entity.h"></a>Entity.h</h4></blockquote><pre><code>typedef struct{    int num;    //顾客编号    long time;  //进入队列时间} DATA;</code></pre><blockquote><h4 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h4></blockquote><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;time.h&gt;#include &quot;CycleQueue.h&quot;int num;//顾客编号void add(CycQueue *q){//新增顾客排序    DATA data;    if(!CycQueueIsFull(q)){        data.num = ++ num;        data.time = time(NULL);        CycQueueIn(q, data);    }}void next(CycQueue *q){ //为当前顾客办理业务并通知下一个顾客准备    DATA *data;    if(!CycQueueIsEmpty(q)){        data = CycQueueOut(q);        printf(&quot;\n请编号为%d的顾客办理业务\n&quot;,data-&gt;num);    }    if(!CycQueueIsEmpty(q)){        data = CycQueuePeek(q);        printf(&quot;请编号为%d的顾客准备办理\n&quot;, data-&gt;num);    }}void CycQueueList(CycQueue *q){ //遍历当前队列    int begin, end;    begin = q-&gt;head;    end = q-&gt;tail;    if(!CycQueueIsEmpty(q)){        while(1){            if(begin != end){                printf(&quot;-数组中实际位置(从0开始)：%d；顾客编号：%d \n&quot;,begin, q-&gt;data[begin].num);                begin = (begin +1) % QUEUEMAX;            }else{                break;            }        }    }}int main(){    CycQueue *queue1;    int  n;    num = 0; //顾客编号    queue1 = CycQueueInit();//初始化    if(queue1 == NULL){        printf(&quot;初始化队列失败&quot;);        return 0;    }    do{        printf(&quot;\n\n\n输入操作： 1.新顾客 2.办理业务 3.查看所有等待的顾客 0.退出\n&quot;);        fflush(stdin);        scanf(&quot;%d&quot;, &amp;n);        switch(n){            case 1:                add(queue1);                printf(&quot;当前有%d个顾客等待\n&quot;, CycQueueLen(queue1));                break;            case 2:                next(queue1);                printf(&quot;当前有%d个顾客等待\n&quot;, CycQueueLen(queue1));                break;            case 3:                CycQueueList(queue1);                break;            case 0:                break;        }    }while(1);    return 0;}</code></pre><blockquote><h4 id="CycleQueue-c"><a href="#CycleQueue-c" class="headerlink" title="CycleQueue.c"></a>CycleQueue.c</h4></blockquote><pre><code>/*    头文件：数据结构的定义和操作原型*/#include &lt;stdio.h&gt;#include &lt;malloc.h&gt;#include &quot;Entity.h&quot;#define QUEUEMAX 15 //设置队列最大容量typedef struct{    DATA data[QUEUEMAX]; //队列数组    int head;    int tail;} CycQueue;CycQueue *CycQueueInit(){    CycQueue *q;    if(q = (CycQueue *)malloc(sizeof(CycQueue))){        q-&gt;head = 0;        q-&gt;tail = 0;        return q;    }else{        return NULL;    }}void CycQueueFree(CycQueue *q){ //释放队列内存    if(q != NULL){        free(q);    }}int CycQueueIsEmpty(CycQueue *q){//判断队列是否为空    return (q-&gt;head == q-&gt;tail);}int CycQueueIsFull(CycQueue *q){ //判断队列是否为满    return ((q-&gt;tail+1) % QUEUEMAX == q-&gt;head);}int CycQueueLen(CycQueue *q){ //获取队列长度    int n;    n = q-&gt;tail - q-&gt;head;    if(n &lt; 0){        n = QUEUEMAX + n;    }    return n;}/*入队*/int CycQueueIn(CycQueue *q, DATA data){    if(CycQueueIsFull(q)){        printf(&quot;队列已满！&quot;);        return 0;    }else{        q-&gt;data[q-&gt;tail] = data;        q-&gt;tail = (q-&gt;tail+1) % QUEUEMAX;//tail++ 当tail到达最大值后就变1        return 1;    }}/*出队*/DATA *CycQueueOut(CycQueue *q){    DATA * data;    if(CycQueueIsEmpty(q)){        printf(&quot;队列为空&quot;);        return 0;    }else{        data = &amp;(q-&gt;data[q-&gt;head]);        q-&gt;head = (q-&gt;head+1) % QUEUEMAX;        return data;    }}DATA *CycQueuePeek(CycQueue *q){//获取队列头部的元素    if(CycQueueIsEmpty(q)){        printf(&quot;队列为空&quot;);        return NULL;    }else{        return &amp;(q-&gt;data[(q-&gt;head) % QUEUEMAX]);    }}</code></pre><blockquote><h4 id="SeqQueue-h"><a href="#SeqQueue-h" class="headerlink" title="SeqQueue.h"></a>SeqQueue.h</h4></blockquote><pre><code>/*    头文件：数据结构的定义和操作原型*/#include &lt;stdio.h&gt;#include &lt;malloc.h&gt;#include &quot;Entity.h&quot;#define QUEUEMAX 15 //设置队列最大容量typedef struct{    DATA data[QUEUEMAX]; //队列数组    int head;    int tail;} SeqQueue;SeqQueue *SeqQueueInit(){    SeqQueue *q;    if(q = (SeqQueue *)malloc(sizeof(SeqQueue))){ // 申请保存队列的内存        q-&gt;head = 0;        q-&gt;tail = 0;        return q;    }else{        return NULL;    }}void SeqQueueFree(SeqQueue *q){ //释放队列内存    if(q != NULL){        free(q);    }}int SeqQueueIsEmpty(SeqQueue *q){//判断队列是否为空    return (q-&gt;head == q-&gt;tail);}int SeqQueueIsFull(SeqQueue *q){ //判断队列是否为满    return (q-&gt;tail == QUEUEMAX);}int SeqQueueLen(SeqQueue *q){ //获取队列长度    return (q-&gt;tail - q-&gt;head);}/*入队*/int SeqQueueIn(SeqQueue *q, DATA data){    if(SeqQueueIsFull(q)){        printf(&quot;队列已满！&quot;);        return 0;    }else{        q-&gt;data[q-&gt;tail++] = data;//先插入data数据到tail位置，然后tail++        return 1;    }}/*出队*/DATA *SeqQueueOut(SeqQueue *q){    if(SeqQueueIsEmpty(q)){        printf(&quot;队列为空&quot;);        return 0;    }else{        return &amp;(q-&gt;data[q-&gt;head++]); //先得到data[head]的元素，然后head++    }}DATA *SeqQueuePeek(SeqQueue *q){//获取队列头部的元素    if(SeqQueueIsEmpty()){        printf(&quot;队列为空&quot;);        return NULL;    }else{        return &amp;(q-&gt;data[q-&gt;head]);    }}</code></pre><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>普通链表实例（全）</title>
      <link href="/2020/01/15/20170812_lb/"/>
      <url>/2020/01/15/20170812_lb/</url>
      
        <content type="html"><![CDATA[<blockquote><p>链表的插入，删除，遍历等功能的实例</p></blockquote><blockquote><p>工程一共包含4个文件</p><ol><li>Entity.h ：声明表的元素的类型。可以是基本数据类型也可以是结构体</li><li>ChainList.h ：定义表结构体，声明全局的宏定义，函数的声明</li><li>ChainList.c ：具体的函数实现</li><li>main.c ： 测试文件</li></ol></blockquote><blockquote><p>参考博客文章： <a href="http://www.cnblogs.com/laojie4321/archive/2012/03/30/2425015.html" target="_blank" rel="noopener">http://www.cnblogs.com/laojie4321/archive/2012/03/30/2425015.html</a><br>参考博客文章： <a href="http://blog.163.com/jiaoruijun07@126/blog/static/68943278201042064246409/" target="_blank" rel="noopener">http://blog.163.com/jiaoruijun07@126/blog/static/68943278201042064246409/</a></p></blockquote><a id="more"></a><blockquote><h4 id="Entity-h"><a href="#Entity-h" class="headerlink" title="Entity.h"></a>Entity.h</h4></blockquote><pre><code>typedef struct{    char key[15];   //结点的关键字    char name[20];    int age;} DATA; //定义结点类型 可定义为简单类型或者结构体</code></pre><blockquote><h4 id="ChainList-h"><a href="#ChainList-h" class="headerlink" title="ChainList.h"></a>ChainList.h</h4></blockquote><pre><code>/*    头文件：数据结构的定义和操作原型*/#include &lt;stdio.h&gt;#include &quot;Entity.h&quot;typedef struct Node{    DATA data;          //数据域    struct Node *next;  //指针域，指向下一个结点的地址} ChainListType;ChainListType *ChainListAddEnd(ChainListType *head, DATA data);     //添加结点到链表结尾ChainListType *ChainListAddFirst(ChainListType *head, DATA data);   //添加结点到头部ChainListType *ChainListInsert(ChainListType *head, char *findKey, DATA data);//把数据插入链表（插入到某个关键字之后）ChainListType *ChainListFind(ChainListType *head, char *key);       //按关键字查找int ChainListDelete(ChainListType *head, char *key);                //删除指定关键字的结点int ChainListLength(ChainListType *head);                           //获取链表结点数量</code></pre><blockquote><h4 id="ChainList-c"><a href="#ChainList-c" class="headerlink" title="ChainList.c"></a>ChainList.c</h4></blockquote><pre><code>#include &lt;string.h&gt;#include &lt;malloc.h&gt;#include &quot;ChainList.h&quot;/*添加结点到链表结尾*/ChainListType *ChainListAddEnd(ChainListType *head, DATA data){    ChainListType *node, *h; //临时变量 用于保存新结点的地址和链表当前（头结点和循环时候的）结点的地址（即head）    if(! (node = (ChainListType *)malloc(sizeof(ChainListType)))){//申请赋予内存地址用来保存新结点        //如果失败        printf(&quot;申请内存失败\n&quot;);        return NULL;    }    //分配成功    node-&gt;data = data;  //设置数据域    node-&gt;next = NULL;  //设置指针域指向空（这是一个结点）    //把新加的结点连接到链表    if(head == NULL){   //如果头结点为空 表示没有实际结点        head = node; //头结点指向这个新结点        printf(&quot;|||||&quot;);        ChainListLength(head);        printf(&quot;|||||&quot;);        return head;    }else{              //头结点不为空 遍历到达当前链表的最后一个结点        h = head;        while(h-&gt;next != NULL){            h = h-&gt;next;        }        h-&gt;next = node;//到达最后一个结点 赋值        return head;    }}/*添加结点到头部*/ChainListType *ChainListAddFirst(ChainListType *head, DATA data){    ChainListType *node; //临时变量 用于保存新结点的地址和链表当前（头结点和循环时候的）结点的地址（即head）    if(! (node = (ChainListType *)malloc(sizeof(ChainListType)))){//申请赋予内存地址用来保存新结点        //如果失败        printf(&quot;申请内存失败\n&quot;);        return NULL;    }    //分配成功    node-&gt;data = data;  //设置数据域    node-&gt;next = head;  //设置指针域指向原来头指针指向的地址    head = node;        //头结点指向新增结点    return head;}/*把数据插入链表（插入到某个关键字之后）*/ChainListType *ChainListInsert(ChainListType *head, char *findKey, DATA data){    ChainListType *node, *node1; //临时变量 用于保存新结点的地址    if(! (node = (ChainListType *)malloc(sizeof(ChainListType)))){//申请赋予内存地址用来保存新结点        //如果失败        printf(&quot;申请内存失败\n&quot;);        return NULL;    }    //分配成功    node-&gt;data = data;                      //设置数据域    node1 = ChainListFind(head, findKey);   //查找指定关键字的结点    if(node1){                              //如果找到该结点        node-&gt;next = node1-&gt;next;           //把找到的结点的下一个结点的地址赋值给新结点        node1-&gt;next = node;                 //把找到的结点的指针域指向新结点    }else{        free(node);                         //释放内存        printf(&quot;没有找到结点&quot;);    }    return head;}/*按关键字查找*/ChainListType *ChainListFind(ChainListType *head, char *key){    ChainListType *h;    h = head;    while(h){        if(strcmp(h-&gt;data.key, key) == 0){ //字符串对比函数 相同则返回0            return h;        }        h = h-&gt;next;    }    return NULL;}/*删除指定关键字的结点*/int ChainListDelete(ChainListType *head, char *key){    ChainListType *node, *h; //h指向循环当前结点 node指向h的前一个结点    node = h = head;    while(h){        if(strcmp(h-&gt;data.key, key) == 0){ //字符串对比函数 相同则返回0            node-&gt;next = h-&gt;next;            free(h);        //释放 删除            return 1;        }else{            node = h;       //把h赋值给node            h = h-&gt;next;    //h指向h的下一个结点        }    }    return 0;}/*获取链表结点数量*/int ChainListLength(ChainListType *head){    ChainListType *h;    int i = 0;    h = head;    if(h == NULL){        printf(&quot;没有数据！！！&quot;);        return 0;    }    while(h){        h = h-&gt;next;        i++;    }    return i;}</code></pre><blockquote><h4 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h4></blockquote><pre><code>/* 测试文件：调用测试函数*/#include &lt;stdio.h&gt;#include &quot;ChainList.h&quot;/*遍历链表的数据*/void ChainListAll(ChainListType *head){    ChainListType *h;    h = head;    printf(&quot;链表所有的数据：\n&quot;);    while(h){   //判断当前结点的存在        printf(&quot;%s %s %d \t&quot;, h-&gt;data.key, h-&gt;data.name, h-&gt;data.age);        h = h-&gt;next;    }    return;}int main(void){    ChainListType *node, *head = NULL;    DATA data;    int k, i;    char key[15];    while(1){        fflush(stdin);        printf(&quot;\n\n输入操作\n1.插入到末尾\t2.内容查询\t3.插入到头部\t4.插入到指定结点之后\t5.删除\t6.求长度\t7.遍历\t8.退出\n：&quot;);        scanf(&quot;%d&quot;, &amp;k);        if(k == 8){            break;        }        switch(k){            case 1:                printf(&quot;插入到末尾：输入元素内容：&quot;);                scanf(&quot;%s %s %d&quot;, &amp;data.key, &amp;data.name, &amp;data.age);                head = ChainListAddEnd(head, data);                printf(&quot;插入的元素为：(%s %s %d) \n&quot;, head-&gt;data.key, head-&gt;data.name, head-&gt;data.age);                break;            case 2:                printf(&quot;输入元素key：&quot;);                scanf(&quot;%s&quot;, &amp;key);                node = ChainListFind(head, &amp;key);                printf(&quot;元素为：(%s %s %d) \n&quot;, node-&gt;data.key, node-&gt;data.name, node-&gt;data.age);                break;            case 3:                printf(&quot;插入到头部：输入元素内容：&quot;);                scanf(&quot;%s %s %d&quot;, &amp;data.key, &amp;data.name, &amp;data.age);                head = ChainListAddFirst(head, data);                printf(&quot;插入的元素为：(%s %s %d) \n&quot;, head-&gt;data.key, head-&gt;data.name, head-&gt;data.age);                break;            case 4:                printf(&quot;插入到指定结点之后：输入位置元素key和元素内容：&quot;);                scanf(&quot;%s %s %s %d&quot;, &amp;key, &amp;data.key, &amp;data.name, &amp;data.age);                head = ChainListInsert(head, &amp;key, data);                printf(&quot;插入的元素为：(%s %s %d) \n&quot;, head-&gt;data.key, head-&gt;data.name, head-&gt;data.age);                break;            case 5:                printf(&quot;输入要删除的元素key：&quot;);                scanf(&quot;%s&quot;, &amp;key);                i = ChainListDelete(head, &amp;key);                if(i == 1){                    printf(&quot;删除成功\n&quot;);                }else{                    printf(&quot;删除失败\n&quot;);                }                break;            case 6:                printf(&quot;-----%d------\n&quot;, ChainListLength(head));                break;            case 7:                ChainListAll(head);                 break;        }    }    return 0;}</code></pre><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.com" target="_blank" rel="noopener">http://zj2626.com</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序表实例（全）</title>
      <link href="/2020/01/15/20170811_xxb/"/>
      <url>/2020/01/15/20170811_xxb/</url>
      
        <content type="html"><![CDATA[<blockquote><p>顺序表的初始化，增加，插入，删除等功能的实例</p></blockquote><blockquote><p>工程一共包含4个文件</p><ol><li>Entity.h ：声明线性表的元素的类型。可以是基本数据类型也可以是结构体</li><li>SeqList.h ：定义线性表结构体，声明全局的宏定义，函数的声明</li><li>SeqList.c ：具体的函数实现</li><li>main.c ： 测试文件</li></ol></blockquote><blockquote><p>参考博客文章： <a href="http://www.cnblogs.com/laojie4321/archive/2012/03/30/2425015.html" target="_blank" rel="noopener">http://www.cnblogs.com/laojie4321/archive/2012/03/30/2425015.html</a><br>参考博客文章： <a href="http://blog.163.com/jiaoruijun07@126/blog/static/68943278201042064246409/" target="_blank" rel="noopener">http://blog.163.com/jiaoruijun07@126/blog/static/68943278201042064246409/</a></p></blockquote><a id="more"></a><blockquote><h4 id="Entity-h"><a href="#Entity-h" class="headerlink" title="Entity.h"></a>Entity.h</h4></blockquote><pre><code>typedef struct{    char key[15];   //结点的关键字    char name[20];    int age;} DATA; //定义结点类型 可定义为简单类型或者结构体</code></pre><blockquote><h4 id="SeqList-h"><a href="#SeqList-h" class="headerlink" title="SeqList.h"></a>SeqList.h</h4></blockquote><pre><code>/*    头文件：数据结构的定义和操作原型*/#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &quot;Entity.h&quot;#define MAXSIZE 100 //定义线性表最大长度typedef struct {    DATA ListData[MAXSIZE + 1]; //保存顺序表的数组(真正的数据从下标为1的位置开始)    int ListLen;                //顺序表结点个数（已存结点）；默认为0，表示没有数据} SeqListType;void SeqListInit(SeqListType *SL);                      //初始化顺序表int SeqListLength(SeqListType *SL);                     // 返回顺序表的元素数量int SeqListAdd(SeqListType *SL, DATA data);             // 向顺序表中添加元素int SeqListInsert(SeqListType *SL, int n, DATA data);   // 向顺序表中插入元素int SeqListDelete(SeqListType *SL, int n);              // 删除顺序表中的数据DATA *SeqListFindByNum(SeqListType *SL, int n);         // 根据序号返回元素int SeqListFindByCont(SeqListType *SL, char *key);      // 按关键字查找int SeqListAll(SeqListType *SL);                        // 遍历顺序表</code></pre><blockquote><h4 id="SeqList-c"><a href="#SeqList-c" class="headerlink" title="SeqList.c"></a>SeqList.c</h4></blockquote><pre><code>/*函数文件：具体的函数实现代码*/#include &quot;SeqList.h&quot;/* 初始化顺序表 */void SeqListInit(SeqListType *SL){    SL-&gt;ListLen = 0;}/* 返回顺序表元素数量 */int SeqListLength(SeqListType *SL){    return (SL-&gt;ListLen);}/* 添加元素到顺序表尾 */int SeqListAdd(SeqListType *SL, DATA data){    if(SL-&gt;ListLen  &gt;= MAXSIZE){ // 顺序表已满        printf(&quot;顺序表已经满了 不能再添加&quot;);        return 0; //返回失败    }    SL-&gt;ListData[++SL-&gt;ListLen] = data; // 把数据插入到下标为（ListLen+1）的位置    return 1;//返回成功}/* 插入元素到顺序表指定位置 */int SeqListInsert(SeqListType *SL, int n, DATA data){    int i;    if(SL-&gt;ListLen  &gt;= MAXSIZE){ // 顺序表已满        printf(&quot;顺序表已经满了 不能再插入\n&quot;);        return 0;    }    if(n &lt; 1 || n &gt; SL-&gt;ListLen){        printf(&quot;要插入的位置错误\n&quot;);        return 0;    }    for(i = SL-&gt;ListLen; i&gt;=n; i--){ //移动要插入数据的后面的数据        SL-&gt;ListData[i+1] = SL-&gt;ListData[i];    }    SL-&gt;ListData[n] = data;     //插入数据    SL-&gt;ListLen++;              //数据个数加一    return 1;}int SeqListDelete(SeqListType *SL, int n){    int i;    if(n &lt; 1 || n &gt; SL-&gt;ListLen+1){        printf(&quot;结点错误 不能删除\n&quot;);        return 0;    }    for(i=n; i&lt;SL-&gt;ListLen; i++){   //移动要删除数据的后面的数据        SL-&gt;ListData[i] = SL-&gt;ListData[i + 1];    }    SL-&gt;ListLen--;    return 1;}DATA *SeqListFindByNum(SeqListType *SL, int n){    if(n &lt; 1 || n &gt; SL-&gt;ListLen+1){        printf(&quot;序号错误 获取失败&quot;);        return NULL;    }    return &amp;(SL-&gt;ListData[n]); // 返回指针增加通用性}int SeqListFindByCont(SeqListType *SL, char *key){    int i;    for(i = 0; i &lt;= SL-&gt;ListLen; i++){        if(strcmp(SL-&gt;ListData[i].key, key) == 0){            return i;        }    }    return 0; //遍历没有找到}</code></pre><blockquote><h4 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h4></blockquote><pre><code>/* 测试文件：调用测试函数*/#include &lt;stdio.h&gt;#include &quot;SeqList.h&quot;/*遍历顺序表中结点*/int SeqListAll(SeqListType *SL){    int i;    for(i = 0; i &lt;= SL-&gt;ListLen; i++){        //输出中第一个是0， 即下标为0的位置的存储的数据        printf(&quot;(%s %s %d) \n&quot;, SL-&gt;ListData[i].key, SL-&gt;ListData[i].name, SL-&gt;ListData[i].age);    }    return 0;}int main(void){    int i, k;    SeqListType SL;         //定义顺序表变量    DATA data, *data1;      //定义结点保存数据类型变量和指针变量    char key[15];           //保存关键字    SeqListInit(&amp;SL);       //初始化数据表    do{        printf(&quot;请输入学号 姓名 年龄: &quot;);        fflush(stdin);      //清空输入缓冲区        scanf(&quot;%s %s %d&quot;, &amp;data.key, &amp;data.name, &amp;data.age);        if(data.age){       //年龄不是0 退出循环            if(!SeqListAdd(&amp;SL, data)){//添加元素到顺序表                break;      //当添加失败 退出循环            }        }else{              //当年龄为0 退出循环            break;        }    }while(1);    printf(&quot;顺序表为： \n&quot;);    SeqListAll(&amp;SL);    while(1){        fflush(stdin);        printf(&quot;\n\n输入操作\n1.获取结点位置元素\t2.内容查询\t3.添加\t4.插入\t5.删除\t6.求长度\t7.遍历\t8.退出\n：&quot;);        scanf(&quot;%d&quot;, &amp;k);        if(k == 8){            break;        }        switch(k){            case 1:                printf(&quot;输入元素位置：&quot;);                scanf(&quot;%d&quot;, &amp;i);                data1 = SeqListFindByNum(&amp;SL, i);                printf(&quot;元素为：(%s %s %d) \n&quot;, data1-&gt;key, data1-&gt;name, data1-&gt;age);                break;            case 2:                printf(&quot;输入元素key(学号)：&quot;);                scanf(&quot;%s&quot;, &amp;key);                i = SeqListFindByCont(&amp;SL, key);                if(i == 0){                    printf(&quot;没有找到对应元素！&quot;);                    break;                }                data1 = SeqListFindByNum(&amp;SL, i);                printf(&quot;位置为： %d ,元素为：(%s %s %d) \n&quot;, i, data1-&gt;key, data1-&gt;name, data1-&gt;age);                break;            case 3:                printf(&quot;输入元素内容：&quot;);                scanf(&quot;%s %s %d&quot;, &amp;data.key, &amp;data.name, &amp;data.age);                SeqListAdd(&amp;SL, data);                break;            case 4:                printf(&quot;输入位置和元素内容：&quot;);                scanf(&quot;%d %s %s %d&quot;, &amp;i, &amp;data.key, &amp;data.name, &amp;data.age);                SeqListInsert(&amp;SL, i, data);                break;            case 5:                printf(&quot;输入要删除的位置：&quot;);                scanf(&quot;%d&quot;, &amp;i);                SeqListDelete(&amp;SL, i);                break;            case 6:                printf(&quot;-----%d------\n&quot;, SeqListLength(&amp;SL));                break;            case 7:                SeqListAll(&amp;SL);                 break;        }    }    return 0;}</code></pre><blockquote><p>个人博客 欢迎来访： <a href="http://zj2626.github.io">http://zj2626.github.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟法 (实例)</title>
      <link href="/2020/01/15/20170810_mn/"/>
      <url>/2020/01/15/20170810_mn/</url>
      
        <content type="html"><![CDATA[<h2 id="使用分治法解决猜数游戏"><a href="#使用分治法解决猜数游戏" class="headerlink" title="使用分治法解决猜数游戏"></a>使用分治法解决猜数游戏</h2><pre><code>在程序设计语言中，可使用随机函数来模拟自然界中发生的不可预测情况。C语言中使用srand()和rand()函数可生成随机数。</code></pre><a id="more"></a><pre><code>#include &lt;stdio.h&gt;#include &lt;time.h&gt;int main(){    int n, m, i = 0;    srand(time(NULL));    n = rand() % 100 + 1;    do{        printf(&quot;输入数字: &quot;);        scanf(&quot;%d&quot;, &amp;m);        i++;        if(m &gt; n){            printf(&quot;输入的数太大了&quot;);        }else if(m &lt; n){            printf(&quot;输入的数太小了&quot;);        }    }while(m != n);    printf(&quot;对了 猜了 %d 次&quot;, i);    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法 (实例)</title>
      <link href="/2020/01/15/20170807_tx/"/>
      <url>/2020/01/15/20170807_tx/</url>
      
        <content type="html"><![CDATA[<h2 id="使用贪心算法解决购物找零问题"><a href="#使用贪心算法解决购物找零问题" class="headerlink" title="使用贪心算法解决购物找零问题"></a>使用贪心算法解决购物找零问题</h2><blockquote><p>要求: 输入要找零的金额，求得所需各种面值的纸币的个数</p></blockquote><blockquote><p>定义：  所谓贪心算法是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。<br>           贪心算法没有固定的算法框架，算法设计的关键是贪心策略的选择。必须注意的是，贪心算法不是对所有问题都能得到整体最优解，选择的贪心策略必须具备无后效性，即某个状态以后的过程不会影响以前的状态，只与当前状态有关。</p></blockquote><a id="more"></a><pre><code>所以对所采用的贪心策略一定要仔细分析其是否满足无后效性。</code></pre><ol><li>不能保证得到的是最优解</li><li>不能用来求最大或者最小解的问题</li><li>只能求满足某些条件的可行解的范围</li></ol><blockquote><p>分解复杂问题为简单的组合， 如图</p></blockquote><img src="/2020/01/15/20170807_tx/fzf2.jpg" title="分治法"><pre><code>#include &lt;stdio.h&gt;#include&lt;conio.h&gt;#define MAXN 9// 以分为单位 下面表示国内的9种面值的纸币int parvalue[MAXN] = {10000, 5000, 1000, 500, 200, 100, 50, 20, 10};//num数组存放需要每个面值纸币的个数（数组的9个元素表示对应的面值纸币的个数）int num[MAXN] = {0};int exchange(int n){    int i, j;    for(i = 0; i &lt; MAXN; i++){ // 寻找比输入的钱低的最大面值        if(n &gt; parvalue[i]){            break;        }    }    while(n &gt; 0 &amp;&amp; i &lt; MAXN){ //循环遍历数组（即从大到小对比面值和剩余的钱）        if(n &gt;= parvalue[i]){ // 剩余钱数大于当前的面值， 则需要该面值的纸币 该纸币个数+1 然后吧剩余钱数减去面值            n -= parvalue[i];            num[i]++;        }else if(n &lt; 10 &amp;&amp; n &gt;= 5){ // 如果钱数小于10分 则退出循环            num[MAXN - 1]++;            break;        }else{ // 开始循环下一个面值的纸币            i++;        }    }    return 0;}int main(){    int i;    float m;    printf(&quot;亲输入找零的金额 ：&quot;);    scanf(&quot;%f&quot;, &amp;m);    exchange((int)100 * m);    printf(&quot;\n %.2f元零钱的组成：\n&quot;, m);    for(i = 0; i &lt; MAXN; i++){        if(num[i] &gt; 0){            printf(&quot;%6.2f: %d张\n&quot;, (float)parvalue[i] / 100.0, num[i]);        }    }    getch();    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法 (实例)</title>
      <link href="/2020/01/15/20170807_hs/"/>
      <url>/2020/01/15/20170807_hs/</url>
      
        <content type="html"><![CDATA[<h2 id="使用回溯算法解决N皇后问题"><a href="#使用回溯算法解决N皇后问题" class="headerlink" title="使用回溯算法解决N皇后问题"></a>使用回溯算法解决N皇后问题</h2><blockquote><p>回溯算法也叫试探法，它是一种系统地搜索问题的解的方法。回溯算法的基本思想是：从一条路往前走，能进则进，不能进则退回来，换一条路再试。用回溯算法解决问题的一般步骤为：</p></blockquote><ol><li>定义一个解空间，它包含问题的解。</li><li>利用适于搜索的方法组织解空间。</li><li>利用深度优先法搜索解空间。</li><li>利用限界函数避免移动到不可能产生解的子空间。</li></ol><a id="more"></a><blockquote><p>问题的解空间通常是在搜索问题的解的过程中动态产生的，这是回溯算法的一个重要特性</p></blockquote><blockquote><p>要求：N皇后问题：在n<em>n格的棋盘上放置彼此不受攻击的n个皇后。按照国际象棋的规矩，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。n后问题等价于在n</em>n格的棋盘上方置n个皇后，任何2个皇后不放在同一行或同一列或同一斜线上。我们需要求的是可放置的总数</p></blockquote><blockquote><p>例子：如下图</p></blockquote><img src="/2020/01/15/20170807_hs/2014217145358979.png" title="回溯法"><pre><code>#include &lt;stdio.h&gt;#include &lt;math.h&gt;#include&lt;stdlib.h&gt;// n表示在 n*n 的坐标中进行操作// 数组x[k]中 下表k表示横轴 x[k]得值表示纵轴static int n, x[1000];static long sum;//尝试 判断是否可以 如果不可以则回退到t+1层，再尝试其他的组合int Place(int k){    int j;    for( j = 1;j &lt; k; j++)//循环遍历已经确定位置的坐标(j表示行号) 与当前要选择的坐标进行对比        if((abs(k - j) == abs(x[j] - x[k])) || (x[j] == x[k]))            //三个条件 1.任意两个不能在同一个斜边上 2.不能在同一行 3.不能在同一列(即j==k)            return 0;     return 1;  }void Backtrak(int k) //初始1{   if(k &gt; n)        sum++;//如果超过最后一行就算成功一个   else{        int i;        for( i=1; i &lt;= n; i++){ // 循环一行的每个每一个空位,从1到n            x[k] = i; // 表示第k行第i列            if(Place(k)) // 判断                Backtrak(k+1); // 操作完成 进行下一行        }   }}int main(){    int nn;    printf(&quot;请输入2的整数次幂的数: &quot;);    while(scanf(&quot;%d&quot;,&amp;nn)!=EOF){        n=nn;        sum=0;        int i;        for(i=0;i&lt;=n;i++)            x[i]=0;        Backtrak(1);        printf(&quot;%l\n&quot;,sum);    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分治法 (实例)</title>
      <link href="/2020/01/15/20170807_fzf/"/>
      <url>/2020/01/15/20170807_fzf/</url>
      
        <content type="html"><![CDATA[<h2 id="使用分治法解决循环日程表问题"><a href="#使用分治法解决循环日程表问题" class="headerlink" title="使用分治法解决循环日程表问题"></a>使用分治法解决循环日程表问题</h2><blockquote><p>要求: 安排比赛日程 每个选手与其他每个选手进行一对一比赛， 一天只与一个选手比赛，不重复比赛，不漏掉;</p></blockquote><a id="more"></a><blockquote><p>例子: 如下图</p></blockquote><img src="/2020/01/15/20170807_fzf/fzf1.jpg" title="分治法"><pre><code>分治算法的基本思想是将一个规模为N的问题分解为K个规模较小的子问题，这些子问题相互独立且与原问题性质相同。求出子问题的解，就可得到原问题的解。即一种分目标完成程序算法，简单问题可用二分法完成。</code></pre><blockquote><p>分解复杂问题为简单的组合， 如图</p></blockquote><img src="/2020/01/15/20170807_fzf/fzf2.jpg" title="分治法"><pre><code>#include &lt;stdio.h&gt;#include&lt;conio.h&gt;#define MAXN 64int a[MAXN + 1][MAXN + 1] = {0}; //从1开始// 分治算法void gamecal(int k, int n) {//k表示开始的选手编号， n表示选手个数    int i, j;    if(n == 2){        a[k][1] = k; // 参赛选手编号为k        a[k][2] = k + 1; // 对阵选手编号为k+1        a[k + 1][1] = k + 1; // 参赛选手编号为k        a[k + 1][2] = k; // 对阵选手编号为k+1    }else {        gamecal(k, n/2);//递归完成左上角        gamecal(k + n/2, n/2);//递归完成左下角        //右上角，右下角 通过观察发现与左下角和左上角完全一样。可以通过循环求得        for(i = k; i&lt; k + n/2; i++){//右上角            for(j = n/2 + 1; j &lt;= n; j++){                a[i][j] = a[i + n/2][j - n/2];            }        }        for(i = k + n/2; i &lt; k + n; i++){//右下角             for(j = n/2 + 1; j &lt;= n; j++){                a[i][j] = a[i - n/2][j - n/2];            }        }    }}int main(){    int m,i,j;    printf(&quot;输入参赛选手人数: &quot;);    scanf(&quot;%d&quot;, &amp;m);    j = 2;    for(i = 2; i &lt; 8; i++){//判断是否整数次幂        j = j * 2;        if(j == m)            break;    }    if(i &gt;= 8){        printf(&quot;参赛选手人数必须为2的整数次幂， 且不超过64个 \n&quot;);        getch();        return 0;    }    gamecal(1, m);    printf(&quot;\n编号 &quot;);    for(i = 2; i &lt;= m; i++){        printf(&quot;%2d天&quot;, i - 1);    }    printf(&quot;\n&quot;);    for(i = 1; i &lt;= m; i++){        for(j = 1; j &lt;= m; j++){            printf(&quot;%4d&quot;, a[i][j]);        }        printf(&quot;\n&quot;);    }    getch();    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举法 (实例)</title>
      <link href="/2020/01/15/20170713_qjf/"/>
      <url>/2020/01/15/20170713_qjf/</url>
      
        <content type="html"><![CDATA[<h2 id="使用枚举法-穷举法-实现填运算符游戏"><a href="#使用枚举法-穷举法-实现填运算符游戏" class="headerlink" title="使用枚举法(穷举法)实现填运算符游戏"></a>使用枚举法(穷举法)实现填运算符游戏</h2><blockquote><p>要求: 输入5个数字和1个结果 其中有4个位置选择4种运算符, 实现5个数字通过使用运算符计算,得到填入的结果;</p></blockquote><blockquote><p>例子: 填入 5 5 5 5 5 = 5 得到 5 + 5 - 5 * 5 / 5 = 5 (实际情况中可能有多种解)</p></blockquote><a id="more"></a><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(){    //下面的所有的数组中第一个位置都不使用(下标为0)    int j, i[5];//这里i的4个属性表示4个位置的运算符(什么运算符并不知)    int sign;//累加运算事时的符号(需要把所有的加减法转化为乘除已杜绝运算符优先级的问题)    int result;//保存运算式的结果值    int count=0;//计数器    int num[6];//操作数, 存放5个要进行计算的数字    float left, right; // 要把多个数的运算转换为多次的二元运算 left每次存放上次两个数的计算结果    char oper[5] = {&apos; &apos;, &apos;+&apos;, &apos;-&apos;, &apos;*&apos;, &apos;/&apos;}; //下标为1 2 3 4位置分别表示 + - * / (由oper数组中属性位置而定, 例如 )    printf(&quot;请输入5个数\n&quot;);    for(j=1; j&lt;=5; j++){        scanf(&quot;%d&quot;, &amp;num[j]);    }    printf(&quot;请输入结果\n&quot;);    scanf(&quot;%d&quot;, &amp;result);    for(i[1] = 1;i[1] &lt;= 4;i[1]++){//循环第一个位置的运算符        // 只有两种情况可以进行下一步: 1,不是i[n]&lt;4(即不是除法) 2,是i[n]==4而且下一个数字不是0(因为除数不能是0)        if((i[1] &lt; 4) || (num[2] != 0)){            for(i[2] = 1;i[2] &lt; 4;i[2]++){//循环第二个位置的运算符                if((i[2] &lt; 4) || (num[3] !=0)){                    for(i[3] = 1; i[3] &lt;= 4; i[3]++){//循环第三个位置的运算符                        if((i[3] &lt; 4) || num[4] != 0){                            for(i[4] = 0; i[4] &lt;= 4; i[4]++){//循环第四个位置的运算符                                if((i[4] &lt; 4) || (num[5] != 0)){                                    //四重循环以后 就得到所有的4个位置的运算符的所有的组合情况                                    left = 0;//设置初始                                    right = num[1];//设置初始                                    sign = 1; // 1正数 -1负数                                    //printf(&quot;[%d %d %d %d]\t&quot;, i[1], i[2], i[3], i[4]);                                    for(j=1;j&lt;=4;j++){//开始组合4个运算符并完成计算                                        //下次进入循环的时候才计算这次的结果, 所以需要在循环外面加上最后一次的right                                        //如果是+-,会把以前的结果(left和right)存放到left中,把要+-的对象存放到right,等待以后循环时候执行+-操作                                        //如果是*/,会把本次的*/的双方直接进行操作, 把结果存放到right中,等待以后循环的时候把right在加入到left中                                        //通过以上两种处理结果, 在最终循环外部把left和right相加(或相减,取决于sign)                                        switch(oper[i[j]])                                        {                                            case &apos;+&apos;:                                                left = left + sign * right;                                                sign = 1;                                                right = num[j+1];                                                break;                                            case &apos;-&apos;:                                                left = left + sign * right;                                                sign = -1;                                                right = num[j+1];                                                break;                                            case &apos;*&apos;:                                                right = right * num[j+1];                                                break;                                            case &apos;/&apos;:                                                right = right / num[j+1];                                                break;                                        }                                    }                                    if(left + sign * right == result){//对比得到结果和设置的结果                                        count++;                                        printf(&quot;%3d\t&quot;, count);                                        for(j = 1; j &lt;= 4; j++){                                            printf(&quot;%d%c&quot;, num[j], oper[i[j]]);                                        }                                        printf(&quot;%d=%d\n&quot;, num[5], result);                                    }                                }                            }                        }                    }                }            }        }    }    if(count == 0){        printf(&quot;没有符合要求的方法!&quot;);    }    getch();    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Junit运行报错</title>
      <link href="/2020/01/15/20170615_junit/"/>
      <url>/2020/01/15/20170615_junit/</url>
      
        <content type="html"><![CDATA[<p>maven项目运行测试程序报错</p><img src="/2020/01/15/20170615_junit/blog_junit.png" title="图片标题"><blockquote><p>Exception in thread “main” java.lang.NoSuchMethodError: org.junit.platform.commons.util.AnnotationUt</p></blockquote><p>问题所在: 写测试的注解 @Test 时候 idea提示导包, 导入了两个包, 其中第一个包并不是需要的</p><img src="/2020/01/15/20170615_junit/blog_junits.png" title="图片标题"><p>删除即可</p>]]></content>
      
      
      <categories>
          
          <category> BUG解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> junit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新学习c语言,零碎的知识点</title>
      <link href="/2020/01/15/20170507_c_note/"/>
      <url>/2020/01/15/20170507_c_note/</url>
      
        <content type="html"><![CDATA[<ol><li><p>编译过程4步骤:</p><ol><li>前提: 一个helloworld.c文件 执行 gcc helloworld.c命令进行编译;</li><li><p>过程:<br> .c文件 –&gt; . i文件   :预处理</p><pre><code>预处理之一: (.i文件也是c语法)把头文件展开 预处理之二: 宏替换(#define),即把代码中的宏定义替换为定义的字符串(单纯的字符串替换,不识别类型))            ps:宏定义内容可以是任意字符串, 只要替换以后符合c语法即可(可以是表达式)            ps:宏定义#define和typedef不同,typedef(关键字)是为变量类型起别名,而#define可以为任意字符串任意字符串的&quot;别名&quot;,而且typedef在预处理时候不会被替换</code></pre><p> .i文件 –&gt; .s文件   :编译<br> .s文件 –&gt; .o文件   :汇编<br> .o文件 –&gt; 可执行文件 :链接</p></li></ol></li></ol><a id="more"></a><ol start="2"><li>结构体定义:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">&#125; stu;  <span class="comment">//这里是定义一个结构体 名为stu 类型为 struct student</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">&#125; stuO;  <span class="comment">//这里是定义一个结构体 名为stu 并且不能再定义其他的相同的结构体变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student2</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">&#125; stu2; <span class="comment">//这里是定义一个结构体的别名 名为stu2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student2</span> <span class="title">ss</span> = &#123;</span><span class="string">"aaaaaa"</span>, <span class="number">20</span>, <span class="number">31</span>&#125;;    <span class="comment">//定义一个结构体 ss是结构体的引用</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student2</span> <span class="title">ss2</span>[2] = &#123;</span>&#123;<span class="string">"aaaaaa"</span>, <span class="number">20</span>, <span class="number">31</span>&#125;, &#123;<span class="string">"bbbb"</span>, <span class="number">21</span>, <span class="number">32</span>&#125;&#125;; <span class="comment">//定义一个结构体数组</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"______________ %s"</span>, ss.name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"______________ %d"</span>, ss.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>结构体指针:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student2</span> *<span class="title">sNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student2</span> *<span class="title">sNode2</span>;</span></span><br><span class="line">sNode = &amp;ss;</span><br><span class="line">sNode2 = &amp;ss2;<span class="comment">//指向结构体数组的第一个元素的地址 可以进行 sNode2++ 就指向第二个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"______________ %d"</span>, (*sNode).age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"______________ %d"</span>, sNode-&gt;age); <span class="comment">// -&gt;是 指向运算符</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"______________ %d"</span>, sNode2-&gt;age);</span><br></pre></td></tr></table></figure><ol start="4"><li>共用体:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> data &#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">5</span>]; <span class="comment">//此处共用体占用的空间大小是8 (结构体对象大小=最后一个成员的偏移量+最后一个成员的大小+末尾填充字节数), 见 内存对齐机制 http://blog.csdn.net/fb2058/article/details/15502071</span></span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//偏移量: 某个成员的实际地址和结构体首地址之间的距离</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">union</span> data dd = &#123;<span class="number">10</span>&#125;; <span class="comment">//共用体成员共享一块空间(是成员之间 so一个成员被赋值,其他的成员跟着变)</span></span><br><span class="line">    dd.b = <span class="string">'a'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"___SIZE____ %lu\n"</span>, <span class="keyword">sizeof</span>(dd));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"________ %d"</span>, dd.a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"________ %c"</span>, dd.b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"________ %s"</span>, dd.c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"________ %d"</span>, dd.d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构随笔</title>
      <link href="/2020/01/15/20170505_line/"/>
      <url>/2020/01/15/20170505_line/</url>
      
        <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a><em>线性表</em></h1><table><thead><tr><th></th><th style="text-align:center">顺序存储</th><th style="text-align:right">链式存储</th></tr></thead><tbody><tr><td>分配方式</td><td style="text-align:center">连续的存储单元 依次存储</td><td style="text-align:right">链式存储结构</td></tr><tr><td>查找时间复杂度</td><td style="text-align:center">O(1)</td><td style="text-align:right">O(n)</td></tr><tr><td>更新时间复杂度</td><td style="text-align:center">O(n)</td><td style="text-align:right">O(1)</td></tr><tr><td>空间</td><td style="text-align:center">固定</td><td style="text-align:right">可扩展</td></tr></tbody></table><h2 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        封装顺序存储结构 三个条件</span><br><span class="line">            1.起始位置</span><br><span class="line">            2.最大容量</span><br><span class="line">            3.当前长度</span><br><span class="line">            </span><br><span class="line">        优点: 1.无需为表中逻辑关系增加额外的存储空间(空间是紧挨着的) 2.读取元素速度快</span><br><span class="line">        缺点: 1.插入,删除操作复杂速度慢  2.易造成空间碎片化 </span><br><span class="line">            </span><br><span class="line">        EG: ***********************************</span><br><span class="line">            #define MAXSIZE 20</span><br><span class="line">            typedef int ElemType;</span><br><span class="line">            typedef struct</span><br><span class="line">            &#123;</span><br><span class="line">                ElemType data[MAXSIZE];//内存中的存储位置页数连续的 下标从0开始</span><br><span class="line">                int length; //当前长度</span><br><span class="line">            &#125; SqList;</span><br><span class="line">            </span><br><span class="line">            ***********************************</span><br><span class="line">  </span><br><span class="line">```          </span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">&gt; 顺序存储元素操作</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line"></span><br><span class="line">// 1. 获取list中的某个元素</span><br><span class="line"></span><br><span class="line">#define OK 1</span><br><span class="line">#define ERROR 0</span><br><span class="line">#define TRUE 1</span><br><span class="line">#define FALSE 0</span><br><span class="line"></span><br><span class="line">typedef int Status; //返回值类型 状态码</span><br><span class="line"></span><br><span class="line">// i是取第几个位置的值 则其位置下标为 i-1; *e即为获取的元素</span><br><span class="line">Status GetElem(SqList L, int i, ElemType *e)</span><br><span class="line">&#123;</span><br><span class="line">    if(L.length==0 || i&gt;L.length)</span><br><span class="line">    &#123;</span><br><span class="line">        return ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *e = L.data[i-1];</span><br><span class="line"></span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试结果:</p></blockquote><img src="/2020/01/15/20170505_line/c_1.png" title="图片标题"><hr><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 2. 插入元素到list的指定的位置</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(SqList *L, <span class="keyword">int</span> i, ElemType e)</span> <span class="comment">//i插入的位置 e插入的数据</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(L -&gt; length == MAXSIZE)<span class="comment">//判断List顺序表的实际长度是否已经达到最大长度,即是否已经满了 ( -&gt; 用来取子数据)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span> || i&gt;L-&gt;length+<span class="number">1</span>) <span class="comment">//判断i在不在已有数据组成的表范围之内</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(i&lt;=L-&gt;length) <span class="comment">//在合理的范围内</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(k=L-&gt;length<span class="number">-1</span>; k&gt;= i<span class="number">-1</span>; k--)<span class="comment">//从后往前一个一个向后移动一位 (eg: a[1]是第二个元素)</span></span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;data[k+<span class="number">1</span>] = L-&gt;data[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    L-&gt;data[i<span class="number">-1</span>] = e; <span class="comment">//把数据插入到该位置</span></span><br><span class="line">    L-&gt;length++;    <span class="comment">//表长度增加</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试结果:</p></blockquote><img src="/2020/01/15/20170505_line/c_b.png" title="图片标题"><hr><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 3. 删除元素从list的指定的位置</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ListDelete</span><span class="params">(SqList *L, <span class="keyword">int</span> i, ElemType *e)</span><span class="comment">// i是删除的位置 *e是删除的元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span> || i &gt; L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *e = L-&gt;data[i<span class="number">-1</span>]; <span class="comment">//被删除的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(i &gt;= <span class="number">1</span>) <span class="comment">//在合理的范围内</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(k=i; k&lt;= L-&gt;length<span class="number">-1</span>; k++)<span class="comment">//从前往后一个一个向前移动一位 (eg: a[1]是第二个元素)</span></span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;data[k<span class="number">-1</span>] = L-&gt;data[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    L-&gt;length--;    <span class="comment">//表长度减少</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试结果:</p></blockquote><img src="/2020/01/15/20170505_line/c_c.png" title="图片标题"><hr><hr><h2 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h2><pre><code>特色: 用一组任意的存储单元存储线性表的数据元素, 每个地址叫结点, 需要存储元素(数据域)和其后继元素的地址(指针域, 内部数据叫指针或链)*只有一个指针域 --&gt; 单链表*头指针 -- &gt; 指向头结点的指针(永不为空,即使链表为空); *头结点 --&gt; 第一个结点 (不存储数据,数据域可以存放链表长度) ; *最后一个结点指向空(NULL); *空链表 -- &gt; 有头结点和头指针, 没有其他结点, 直接指向NULLEG: ***********************************            typedef struct Node            {                ElemType data;      //数据域                struct Node* next;  //指针域            } Node;            typedef struct Node* LinkList;  //取Node*的别名为LinkList            //LinkList p;   p-&gt;data  p-&gt;next    ***********************************</code></pre><blockquote><p>链式存储元素操作</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取list中的某个元素</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">GetElemL</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    LinkList p; <span class="comment">//p即为一个指针 指向链表</span></span><br><span class="line">    </span><br><span class="line">    p = L-&gt;next;<span class="comment">//使p指向当前链表的第一个结点</span></span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>( p &amp;&amp; j &lt; i)<span class="comment">//判断p不为空 且没到要查询的结点 查到或者到头了就退出循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!p || j &gt; i) <span class="comment">//没找到   </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    *e = p-&gt;data;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试结果:</p></blockquote><img src="/2020/01/15/20170505_line/blog_c13.png" title="图片标题"><hr><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 2. 插入元素到list的指定的位置</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ListInsertL</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType e)</span> <span class="comment">//i插入的位置 e插入的数据</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    LinkList p, s;</span><br><span class="line"></span><br><span class="line">    p = L;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; j&lt;i)<span class="comment">//循环遍历链表 使p指向一个一个结点直到最后(p结点为null)或者到达要插入的地方</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!p || j&gt;i) <span class="comment">// 判断要插入的位置存在</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    s = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node)); <span class="comment">//生成新的结点 结点大小=sizeof(Node) 然后强转</span></span><br><span class="line">    s-&gt;data = e;    <span class="comment">//设置结点数据域</span></span><br><span class="line"></span><br><span class="line">    s-&gt;next = p-&gt;next; <span class="comment">//把插入结点的上一个结点的指针赋给要插入的结点的指针域</span></span><br><span class="line">    p-&gt;next = s;        <span class="comment">//把插入结点的上一个结点的指针指向插入的结点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试结果:</p></blockquote><img src="/2020/01/15/20170505_line/blog_c14.png" title="图片标题"><hr><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 3. 删除元素从list的指定的位置</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ListRemove</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType *e)</span><span class="comment">// i是删除的位置 *e是删除的元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    LinkList p, q;</span><br><span class="line"></span><br><span class="line">    p = L;    <span class="comment">//先指向头结点, 要删除的结点从头结点指向的结点开始算起;即到最后要删除结点是p-&gt;next</span></span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next &amp;&amp; j&lt;i)<span class="comment">//循环遍历链表 使p指向一个一个结点直到最后(p结点指针指向null)或者到达要插入的地方</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(p-&gt;next) || j&gt;i) <span class="comment">// 判断要删除的结点存在</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    q = p-&gt;next;    <span class="comment">//q结点是要删除的结点</span></span><br><span class="line">    p-&gt;next = q-&gt;next; <span class="comment">//q结点指针域可能指向null(q是最后一个结点时候)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(q); <span class="comment">//释放空间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试结果:</p></blockquote><img src="/2020/01/15/20170505_line/blog_c15.png" title="图片标题"><hr><blockquote><p>链式存储整表创建(建立单链表) (顺序存储 == 数组)</p></blockquote><h4 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1. 头插法建立单链表: </span></span><br><span class="line"><span class="comment">//      把新加入的结点插入到链表头部, 把头结点指向新插入的结点(会使插入的结点顺序与原先设定的顺序颠倒)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateListHead</span><span class="params">(LinkList *L, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//                srand(time(0));  //初始化随机数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里L是指针 *L表示链表头结点</span></span><br><span class="line">    *L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node)); <span class="comment">//初始化一个链表的头结点(可以放在函数外面)</span></span><br><span class="line">    (*L)-&gt;next = <span class="literal">NULL</span>;  <span class="comment">//设置头结点默认指向null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node)); <span class="comment">//新建结点</span></span><br><span class="line">        p-&gt;data = rand() % <span class="number">100</span> + <span class="number">1</span>; <span class="comment">//随机数赋值到每个结点的数据域</span></span><br><span class="line">        p-&gt;next = (*L)-&gt;next;       <span class="comment">//把原来的头结点指针指向的地址赋值给新建的结点(因为要插入到头部)</span></span><br><span class="line">        (*L)-&gt;next = p;             <span class="comment">//更新头结点指针域</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试结果:</p></blockquote><img src="/2020/01/15/20170505_line/bolg_c10.png" title="图片标题"><hr><h4 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 尾插法建立单链表: </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateListTail</span><span class="params">(LinkList *L, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p, r;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//                srand(time(0));</span></span><br><span class="line"></span><br><span class="line">    *L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node)); <span class="comment">//初始化一个链表的头结点</span></span><br><span class="line">    r = *L; <span class="comment">//使r指向生成的链表(当前只有头结点 所以r指向头结点)   /*定义一个临时指针变量指向表头*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node)); <span class="comment">//新建结点</span></span><br><span class="line">        p-&gt;data = rand() % <span class="number">100</span> + <span class="number">1</span>; <span class="comment">//随机数赋值到每个结点的数据域</span></span><br><span class="line">        r-&gt;next = p;   <span class="comment">//使r的指针域指向新的结点</span></span><br><span class="line">        r = p;          <span class="comment">//把新结点赋给r r指向链表的最后一个结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>; <span class="comment">//当全部插入的之后 要把最后一个节点的指针域指向NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试结果:</p></blockquote><img src="/2020/01/15/20170505_line/blog_c12.png" title="图片标题"><hr><blockquote><p>链式存储整表删除</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">ClearList</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p, q;</span><br><span class="line">        </span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        q = p-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(p);   <span class="comment">//p指向每次都释放的地址</span></span><br><span class="line">        p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">## 静态链表: 用数组实现链表</span><br><span class="line"></span><br><span class="line">#### 定义</span><br><span class="line">  </span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 1000</span></span><br><span class="line">        <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            ElemType data;  <span class="comment">//数据</span></span><br><span class="line">            <span class="keyword">int</span> cur;        <span class="comment">//游标(Cursor)</span></span><br><span class="line">        &#125; Component, StaticLinkList[MAXSIZE];</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 初始化</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(StaticLinkList space)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i &lt; MAXSIZE<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        space[i].cur = i + <span class="number">1</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    space[MAXSIZE<span class="number">-1</span>].cur = <span class="number">1</span>; <span class="comment">//最后一个结点存放有数据的第一个节点下标</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回链表长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">(StaticLinkList L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j = <span class="number">0</span>;</span><br><span class="line">    i = L[<span class="number">0</span>].cur;   <span class="comment">//i指向第一个结点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i)    <span class="comment">//最后一个结点的指针域为0，结束循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        ++j;</span><br><span class="line">        i = L[i].cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入新元素到静态链表"><a href="#插入新元素到静态链表" class="headerlink" title="插入新元素到静态链表"></a>插入新元素到静态链表</h4><img src="/2020/01/15/20170505_line/20150819110834176.jpg" title="图片标题"><blockquote><p>需要先获取一个空闲的链表位置, 插入数据,再把该位置插入到指定位置(其实就是更改cur, 使其链接起来)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//申请分配一个空闲节点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">malloc_sl</span><span class="params">(StaticLinkList space)</span> </span>&#123;<span class="comment">//分配空闲节点</span></span><br><span class="line">    <span class="keyword">int</span> i = space[<span class="number">0</span>].cur;<span class="comment">//总是取头结点之后的第一个空闲结点做分配，同时空闲链表非空，头结点做调整</span></span><br><span class="line">    <span class="keyword">if</span> (space[<span class="number">0</span>].cur) &#123;</span><br><span class="line">        space[<span class="number">0</span>].cur = space[i].cur;<span class="comment">//空闲链表头结点调整指针域(把分配结点的cur存放在头结点)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;<span class="comment">//返回申请到的空闲节点的数组下标</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入数据到指定节点之前 i的前一个节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListInsert</span><span class="params">(StaticLinkList L, <span class="keyword">int</span> i, ElemType e)</span> </span>&#123;<span class="comment">//e是新插入的元素 i是要插入的位置(插入到第i个元素之前)</span></span><br><span class="line">    <span class="keyword">int</span> j, k, l;</span><br><span class="line"></span><br><span class="line">    k = MAXSIZE - <span class="number">1</span>; <span class="comment">//数组最后一个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; ListLength(L)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    j = malloc_sl(L); <span class="comment">//申请一个节点, j是下标</span></span><br><span class="line">    <span class="keyword">if</span> (j) &#123; <span class="comment">// C里面非零就是真</span></span><br><span class="line">        L[j].data = e;<span class="comment">//赋值到静态链表指定位置</span></span><br><span class="line">        <span class="keyword">for</span> (l = <span class="number">1</span>; l &lt;= i - <span class="number">1</span>; l++) &#123;</span><br><span class="line">            k = L[k].cur; <span class="comment">//目的是 通过循环获取到第(i-1)个元素的下标,其下标为k,其cur为i</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        L[j].cur = L[k].cur;    <span class="comment">//把下标为(i-1)的元素的cur赋值给第下标为j的元素的cur: 即把插入节点的"指针"指向要插入的节点之前(i)</span></span><br><span class="line">        L[k].cur = j;           <span class="comment">//把下标为(i-1)的元素的cur设置为新插入的节点; 原理和动态链表很相似</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态链表删除元素"><a href="#静态链表删除元素" class="headerlink" title="静态链表删除元素"></a>静态链表删除元素</h4><img src="/2020/01/15/20170505_line/20150819173342013.jpg" title="图片标题"><blockquote><p>要先修改游标(把该节点的游标赋值到其上一个节点的游标) 然后在删除节点数据, 再把该节点接到后面的空闲节点上</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_sll</span><span class="params">(StaticLinkList L, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    L[i].cur = L[<span class="number">0</span>].cur; <span class="comment">// 头结点中存放的是第一个空闲节点下标 把该下标赋值给删除的节点</span></span><br><span class="line">    L[<span class="number">0</span>].cur = i;           <span class="comment">//把要删除的节点的下标赋值给头结点;</span></span><br><span class="line">    L[i].data = <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定节点数据(下标减1的节点) L[i-1]</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDelete</span><span class="params">(StaticLinkList L, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j, k; </span><br><span class="line"></span><br><span class="line">    k = MAXSIZE - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; ListLength(L)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        k = L[k].cur; <span class="comment">//循环得到要删除的结点的前一个节点(不是物理的前一个,而是cur是i-1的节点)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    j = L[k].cur; <span class="comment">//获取要删除的结点的cur赋值到j</span></span><br><span class="line">    L[k].cur = L[j].cur;<span class="comment">//把j赋值给该节点</span></span><br><span class="line"></span><br><span class="line">    free_sll(L, j);<span class="comment">//"释放"节点数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><h4 id="定义-最后一个结点的指针域指向头结点，整个链表形成一个环"><a href="#定义-最后一个结点的指针域指向头结点，整个链表形成一个环" class="headerlink" title="定义:  最后一个结点的指针域指向头结点，整个链表形成一个环"></a>定义:  最后一个结点的指针域指向头结点，整个链表形成一个环</h4><blockquote><p>判断空链表的条件是 head == head-&gt;next;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux(centos)下使用jenkins + maven + git码云(或github) 实现自动化构建项目</title>
      <link href="/2020/01/15/20170504_jenkins/"/>
      <url>/2020/01/15/20170504_jenkins/</url>
      
        <content type="html"><![CDATA[<p>###1.下载jenkins  官网下载地址,自己选取对应系统 <a href="https://jenkins.io/download/" target="_blank" rel="noopener">https://jenkins.io/download/</a></p><blockquote><p>下载rpm或者直接下载war包 <a href="https://pkg.jenkins.io/redhat/jenkins-2.9-1.1.noarch.rpm" target="_blank" rel="noopener">https://pkg.jenkins.io/redhat/jenkins-2.9-1.1.noarch.rpm</a></p></blockquote><pre><code>系统环境要求: jdk, tomcat, git, maven (没有就安装先)</code></pre><blockquote><p>rpm -ivh jenkins-2.9-1.1.noarch.rpm 我的安装到 /usr/lib/jenkins目录</p></blockquote><pre><code>Jenkins主目录是用户目录下的.jenkins目录  /root/.jenkins</code></pre><a id="more"></a><blockquote><p>复制文件夹内的jenkins.war到tomcat目录下的webapps目录下 并启动tomcat (./startup.sh)</p></blockquote><blockquote><p>进入: cd ~/.jenkins/ </p></blockquote><pre><code>目录介绍:    jobs: 项目配置目录(新建的job,即一个个项目 的配置存放在这里)    logs: 日志目录    workspaces: 默认的工作空间(每个项目会存放在这里)    users: 创建的用户目录    secrets: 初始的设置(包括初始化的密码, 在创建了用户以后会自动删除里面的初始化密码文件)</code></pre><blockquote><p>tomcat启动以后 访问网页 <a href="http://127.0.0.1/jenkins" target="_blank" rel="noopener">http://127.0.0.1/jenkins</a> 提示输入初始化密码, 密码在secrets目录下的initialAdminPassword文件内<br>进入后先创建一个用户(以后就用这个用户登录), 然后提示下载插件(可以下载推荐的也可以自定义)</p></blockquote><blockquote><p>##按照提示新建一个项目 如图:这里测试从码云获取项目,so选择第一个, 设置完后 保存</p></blockquote><p>(如果是maven项目 需要下载个maven插件-&gt; Maven Integration plugin 在设置里下载 安装重启 下面介绍)</p><img src="/2020/01/15/20170504_jenkins/jenkins.png" title="图片标题"><pre><code>填写内容:    项目名称: 最好和真正的项目名相同    描述: 随意    源码管理: 选择 git (当遇到 401, 没权限, 读取远程key失败请看下面错误解决)    构建触发器: 设置什么时候触发构建功能(可以用脚本,或者有人提交代码到码云时候构建,或者定时构建都可以)    (jenkins有各种提示, 都介绍的很详细了)   </code></pre><img src="/2020/01/15/20170504_jenkins/jenkins_a.png" title="图片标题"><img src="/2020/01/15/20170504_jenkins/jenkins_b.png" title="图片标题"><p><em>如果项目是私有的项目(如码云中的), 则需要设置用户名密码–在 Credentials 中配置 Add 一个</em><br><img src="/2020/01/15/20170504_jenkins/jenkins_c.png" title="图片标题"></p><img src="/2020/01/15/20170504_jenkins/jenkins_maven.png" title="图片标题"><blockquote><p>点击左侧 立即构建<br>到主面板查看项目构建情况: 红色代表失败, 蓝色表示成功</p></blockquote><p><em>可以再面板的 系统管理/系统设置 中修改设置</em></p><pre><code>系统设置:    1.点击高级设置: 可以修改 工作空间根目录,构建记录根目录    2.可以修改时间格式    3.可以修改ssh端口,管理员邮件地址,Jenkins URL等等Global Tool Configuration:    1.设置maven路径    2.设置jdk路径    3.设置git文件路径</code></pre><blockquote><p>##对于maven项目 配置如图一,可自行更改<br><img src="/2020/01/15/20170504_jenkins/jenkins_maven2.png" title="图片标题"></p></blockquote><p>下图是点击构建以后打印的日志信息(正在下载依赖) (but有个问题 下载的jar包并没有按照我maven中配置的仓库地址,而是下载到了.jenkins目录下)<br><img src="/2020/01/15/20170504_jenkins/jenkins_maven.png" title="图片标题"></p><blockquote><p>##发布war到tomcat: 由于这里编译就和自己电脑打包项目一样,会把war包放在target目录下, 我们需要一个插件把其发送到tomcat的webapps中</p></blockquote><blockquote><p>(下载插件 Deploy to container Plugin)</p></blockquote><blockquote><p>安装插件以后进入项目的配置界面 设置”构建后操作”,里面就会多一个 “Deploy war/ear to a container” 选项</p></blockquote><pre><code>配置:    WAR/EAR files: target/*.war  (war包的相对路径,相对工作空间)    Context path: MeetCode (发布到tomcat的路径,这里我用项目名,到时候访问就用http://127.0.0.1:80/MeetCode)    Containers: 配置一个tomcat容器(我用的tomcat8,但是我的版本没有 只能用7x)            Manager user name: (tomcat用户名: 进入tomcat/conf/tomcat-users.xml设置)            Manager password: 密码            Tomcat URL: http://127.0.0.1:80 (设置远程tomcat访问路径)</code></pre><blockquote><p>设置完毕 保存 构建 可看日志观察构建过程 (进入tomcat/webapps下 发现war包正在传入), success之后访问网页可用</p></blockquote><blockquote><h2 id="其实也可以不发送war包-可以在Post-Steps中配置maven运行命令"><a href="#其实也可以不发送war包-可以在Post-Steps中配置maven运行命令" class="headerlink" title="其实也可以不发送war包, 可以在Post Steps中配置maven运行命令*"></a>其实也可以不发送war包, 可以在Post Steps中配置maven运行命令*</h2></blockquote><pre><code>要求: 1. 在pom文件中加入tomcat插件      2. 如下图配置,则构建最后会直接通过maven运行启动项目其他问题: 运行其实依然处于正在构建状态(可以自己查看项目构建状态),        所以需要在项目配置中勾选&quot;丢弃旧的构建&quot;,保持构建的最大个数填写&quot;1&quot;,(也可以设置构建最大时间);</code></pre><img src="/2020/01/15/20170504_jenkins/blog_jenkins.png" title="图片标题"><blockquote><p>##设置邮件消息<br>    1.进入 系统管理 / 系统设置 / 邮件通知</p></blockquote><pre><code>设置选项: (这里用qq邮箱测试)    SMTP服务器: smtp.qq.com    用户默认邮件后缀: @qq.com    使用SMTP认证: true     用户名: (作为发件箱的qq邮箱,可以带或不带后缀)     密码: (一般是邮箱密码,qq邮箱特殊,需要进入qq邮箱/设置/账户设置, 发送短信生成一个smtp密码)     使用SSL协议: false     SMTP端口: 587     Reply-To Address: 我没写     字符集: UTF-8     测试: 写另一个邮箱地址进行测试    注意: 如果失败, 提示com.sun.mail.smtp.SMTPSendFailedException: 501 mail from address must be sam    需要设置    系统管理员邮件地址, 在本页面上面,必须与发件箱一致</code></pre><hr><h2 id="错误解决"><a href="#错误解决" class="headerlink" title="错误解决:"></a>错误解决:</h2><blockquote><p>问题: 设置git地址时候 遇到401错误 或者 fatal: Could not read from remote repository</p></blockquote><blockquote><p>原因: 本地git没有配置SSH公钥 </p></blockquote><ul><li>这个配置在github中在右上角 Settings/SSH keys and GPG keys 中</li><li>在码云中在右上角 修改资料/SSH公钥 中(二者命令不同)</li></ul><pre><code>github生成公钥 命令:         git config --global user.name &quot;XXXXX&quot;         git config --global user.email &quot;XXXXXXX@gmail.com&quot;     1.查看是否已经有了ssh密钥：cd ~/.ssh     如果没有密钥则不会有此文件夹，有则备份删除     2.生存密钥：         ssh-keygen -t rsa -C &quot;XXXXXXX@gmail.com&quot;     按3个回车，密码为空。     此时生成两个文件:id_rsa和id_rsa.pub 公钥在id_rsa.pub中,查看并复制粘贴到上面github的配公钥的地方,添加一个公钥     并且在本地也添加公钥         ssh-add id_rsa.pub码云生成公钥 命令: 见 http://git.mydoc.io/?t=154712</code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> Git </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro的学习Helloworld</title>
      <link href="/2020/01/15/20170326_shiro/"/>
      <url>/2020/01/15/20170326_shiro/</url>
      
        <content type="html"><![CDATA[<h2 id="Apache-Shiro是Java的一个安全框架"><a href="#Apache-Shiro是Java的一个安全框架" class="headerlink" title="Apache Shiro是Java的一个安全框架"></a>Apache Shiro是Java的一个安全框架</h2><h3 id="Shiro可以帮助我们完成：认证、授权、加密、会话管理、与Web集成、缓存等"><a href="#Shiro可以帮助我们完成：认证、授权、加密、会话管理、与Web集成、缓存等" class="headerlink" title="Shiro可以帮助我们完成：认证、授权、加密、会话管理、与Web集成、缓存等"></a>Shiro可以帮助我们完成：认证、授权、加密、会话管理、与Web集成、缓存等</h3><h2 id="Shiro基本功能"><a href="#Shiro基本功能" class="headerlink" title="Shiro基本功能"></a>Shiro基本功能</h2><blockquote><p>Authentication：身份认证/登录，验证用户是不是拥有相应的身份；</p></blockquote><blockquote><p>Authorization：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</p></blockquote><blockquote><p>Session Manager：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境的，也可以是如Web环境的；</p></blockquote><blockquote><p>Cryptography：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</p></blockquote><blockquote><p>Web Support：Web支持，可以非常容易的集成到Web环境；</p></blockquote><blockquote><p>Caching：缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率；</p></blockquote><blockquote><p>Concurrency：shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</p></blockquote><blockquote><p>Testing：提供测试支持；</p></blockquote><blockquote><p>Run As：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</p></blockquote><blockquote><p>Remember Me：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。</p></blockquote><a id="more"></a><h2 id="1-身份认证"><a href="#1-身份认证" class="headerlink" title="1.身份认证"></a>1.身份认证</h2><pre><code>配置文件：    ********************************    [users]    zj2626=123456    ay2626=456789    ********************************package com.em;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.config.IniSecurityManagerFactory;import org.apache.shiro.mgt.SecurityManager;import org.apache.shiro.subject.Subject;import org.apache.shiro.util.Factory;public class Hello {    public static void main(String args[]) {        //初始化SecurityManager工厂      读取配置文件中的用户名密码        Factory&lt;SecurityManager&gt; factory = new IniSecurityManagerFactory(&quot;classpath:shiro.ini&quot;);        //获取SecurityManager实例        SecurityManager manager = factory.getInstance();        //把SecurityManager实例绑定到SecurityUtils        SecurityUtils.setSecurityManager(manager);        //得到当前执行的用户        Subject subject = SecurityUtils.getSubject();        //创建token令牌, 用户/密码        UsernamePasswordToken token = new UsernamePasswordToken(&quot;zj2626&quot;, &quot;123456&quot;);        try {            //身份认证 登录            subject.login(token);            System.out.println(&quot;登录成功&quot;);        } catch (Exception e) {            System.out.println(&quot;登录失败&quot;);            e.printStackTrace();        }        subject.logout();    }    /*        Subject: 认证主体        Principals:  身份: 用户名        Credentials: 凭证: 密码        Realm: 域            1.jdbc realm | 2.jndi realm | 3.text realm     */}</code></pre><p>从数据库中读取用户名密码 实现登录</p><p>1.配置文件: jdbc_realm.ini （代码只需把读取的文件改成此文件即可测试使用）</p><pre><code>[main]jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealmdataSource=com.mchange.v2.c3p0.ComboPooledDataSourcedataSource.driverClass=com.mysql.jdbc.DriverdataSource.jdbcUrl=jdbc:mysql://127.0.0.1:3306/testdataSource.user=rootdataSource.password=123456jdbcRealm.dataSource=$dataSourcesecurityManager.realms=$jdbcRealm</code></pre><hr><hr><h2 id="2-权限认证"><a href="#2-权限认证" class="headerlink" title="2.权限认证"></a>2.权限认证</h2><h3 id="核心要素：（资源，）权限，角色，用户"><a href="#核心要素：（资源，）权限，角色，用户" class="headerlink" title="核心要素：（资源，）权限，角色，用户"></a>核心要素：（资源，）权限，角色，用户</h3><p><strong>用户–（分配）–&gt;角色–（拥有）–&gt;权限–（控制）—-&gt;资源</strong></p><ul><li>用户代表访问系统的用户，即subject。</li></ul><blockquote><p><strong>三种授权方式</strong></p></blockquote><pre><code>1. 编程式授权    1.1. 基于角色的访问控制    1.2. 基于权限的访问控制2. 注解式授权3.JSP标签授权</code></pre><hr><p>####步骤1: 封装一个工具类</p><pre><code>public class ShiroUtils {    public static Subject login(String conf, String username, String passowrd) {        //初始化SecurityManager工厂 conf是配置文件名称        Factory&lt;SecurityManager&gt; factory = new IniSecurityManagerFactory(&quot;classpath:&quot; + conf + &quot;.ini&quot;);        //获取SecurityManager实例        SecurityManager manager = factory.getInstance();        //把SecurityManager实例绑定到SecurityUtils        SecurityUtils.setSecurityManager(manager);        //得到当前执行的用户        Subject subject = SecurityUtils.getSubject();        //创建token令牌, 用户/密码        UsernamePasswordToken token = new UsernamePasswordToken(username, passowrd);        try {            //身份认证 登录            subject.login(token);        } catch (Exception e) {            e.printStackTrace();        }        return subject;    }}</code></pre><p>####步骤2: 测试多种访问控制</p><pre><code>/*    基于角色的访问控制方式1    配置文件：shiro_role.ini    ******************************    [users]    zj2626=123456,role1,role2    py2626=123456,role1    ay2626=456789,role3    ******************************     */    @Test    public void testHas() {        Subject sub = ShiroUtils.login(&quot;shiro_config/shiro_role&quot;, &quot;zj2626&quot;, &quot;123456&quot;);        //判断有没有权限 返回布尔 表示验证的成功与否        boolean bool = sub.hasRole(&quot;role1&quot;);        if (bool) {            System.out.println(&quot;HAS&quot;);        }        //判断有没有权限,一次多个分别判断 返回布尔数组        boolean[] booleans = sub.hasRoles(Arrays.asList(&quot;role1&quot;, &quot;role2&quot;, &quot;role3&quot;));        int i = 0;        while (booleans[i]) {            i++;            if (booleans.length &lt;= i) {                break;            }        }        //所有的角色都有才返回true        System.out.println(sub.hasAllRoles(Arrays.asList(&quot;role1&quot;, &quot;role2&quot;, &quot;role3&quot;)));        //判断有没有权限 没有则抛异常        sub.checkRole(&quot;role1&quot;);        sub.checkRole(&quot;role3&quot;);        //判断多个权限 有一个没有就抛异常 (2种参数形式)        sub.checkRoles(Arrays.asList(&quot;role1&quot;, &quot;role2&quot;, &quot;role3&quot;));        sub.checkRoles(&quot;role1&quot;, &quot;role2&quot;, &quot;role3&quot;);        //退出登陆        sub.logout();    }    /*    基于权限的访问控制方式(过程同上)    配置文件：shiro_permision.ini    ******************************    [users]    zj2626=123456,role1,role2    py2626=123456,role1    ay2626=456789,role3    [roles]    role1=user:select    role2=user:add,user:update,user:delete    ******************************     */    @Test    public void testPermition() {        Subject sub = ShiroUtils.login(&quot;shiro_config/shiro_permision&quot;, &quot;py2626&quot;, &quot;123456&quot;);        System.out.println(&quot;用户是否有权限 user:select:&quot; + sub.isPermitted(&quot;user:select&quot;));    //true        System.out.println(&quot;用户是否有权限 user:update:&quot; + sub.isPermitted(&quot;user:update&quot;));    //false        boolean[] booleans = sub.isPermitted(&quot;user:add&quot;, &quot;user:select&quot;);        System.out.println(booleans[0] + &quot;____&quot; + booleans[1]);        System.out.println(sub.isPermittedAll(&quot;user:add&quot;, &quot;user:select&quot;));        //没有会抛出异常        sub.checkPermission(&quot;user:select&quot;);        sub.checkPermissions(&quot;user:select&quot;, &quot;user:update&quot;);        sub.logout();    }</code></pre><hr><hr><h2 id="3-集成web进行测试"><a href="#3-集成web进行测试" class="headerlink" title="3.集成web进行测试"></a>3.集成web进行测试</h2><h4 id="1-新建一个maven的web项目"><a href="#1-新建一个maven的web项目" class="headerlink" title="1.新建一个maven的web项目"></a>1.新建一个maven的web项目</h4><blockquote><p>web.xml 配置shiro的必须的配置: 监听器,过滤器</p></blockquote><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;         version=&quot;3.1&quot;&gt;    &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;    &lt;!--三个servlet配置   /login跳转到登陆页面  /home跳转到主页,即登陆成功页面 /admin用来测试角色和权限--&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;loginServlet&lt;/servlet-name&gt;        &lt;servlet-class&gt;com.servlet.LoginServlet&lt;/servlet-class&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;loginServlet&lt;/servlet-name&gt;        &lt;url-pattern&gt;/login&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;homeServlet&lt;/servlet-name&gt;        &lt;servlet-class&gt;com.servlet.HomeServlet&lt;/servlet-class&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;homeServlet&lt;/servlet-name&gt;        &lt;url-pattern&gt;/home&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;adminServlet&lt;/servlet-name&gt;        &lt;servlet-class&gt;com.servlet.AdminServlet&lt;/servlet-class&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;adminServlet&lt;/servlet-name&gt;        &lt;url-pattern&gt;/admin&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;    &lt;!--shiro监听--&gt;    &lt;listener&gt;        &lt;listener-class&gt;org.apache.shiro.web.env.EnvironmentLoaderListener&lt;/listener-class&gt;    &lt;/listener&gt;    &lt;!--shiro过滤器 这里过滤所有的地址 并且指定权限配置文件(一般项目中权限的配置存放在数据库中)--&gt;    &lt;filter&gt;        &lt;filter-name&gt;ShiroFilter&lt;/filter-name&gt;        &lt;filter-class&gt;org.apache.shiro.web.servlet.ShiroFilter&lt;/filter-class&gt;        &lt;init-param&gt;            &lt;param-name&gt;config&lt;/param-name&gt;            &lt;param-value&gt;classpath:shiro.ini&lt;/param-value&gt;        &lt;/init-param&gt;    &lt;/filter&gt;    &lt;filter-mapping&gt;        &lt;filter-name&gt;ShiroFilter&lt;/filter-name&gt;        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;    &lt;/filter-mapping&gt;&lt;/web-app&gt;</code></pre><blockquote><p>pom.xml :所需依赖</p></blockquote><pre><code>&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;        &lt;artifactId&gt;shiro-web&lt;/artifactId&gt;        &lt;version&gt;1.3.2&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;        &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;        &lt;version&gt;1.3.2&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;        &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;        &lt;version&gt;1.3.2&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;        &lt;artifactId&gt;tomcat-servlet-api&lt;/artifactId&gt;        &lt;version&gt;8.5.4&lt;/version&gt;        &lt;scope&gt;provided&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;        &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;        &lt;version&gt;1.7.7&lt;/version&gt;        &lt;scope&gt;compile&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;commons-logging&lt;/groupId&gt;        &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;        &lt;version&gt;1.2&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;        &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;        &lt;version&gt;1.9.3&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;commons-collections&lt;/groupId&gt;        &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;        &lt;version&gt;3.2.1&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;jstl&lt;/groupId&gt;        &lt;artifactId&gt;jstl&lt;/artifactId&gt;        &lt;version&gt;1.2&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><blockquote><p>shiro.ini: 权限配置文件,配置什么用户有什么角色,什么角色有什么权限</p></blockquote><pre><code>[main]authc.loginUrl=/loginperms.unauthorizedUrl=/noAuth.jsproles.unauthorizedUrl=/noAuth.jsp[users]zj2626=123456,adminay2626=456789,student[roles]admin=user:*,student:selectstudent:student:*[urls]/login=anon/home=authc/admin=roles[admin]</code></pre><h5 id="1-authc-loginUrl配置身份认证不通过-未登录时-跳转的地址…-loginUrl是authc的一个属性"><a href="#1-authc-loginUrl配置身份认证不通过-未登录时-跳转的地址…-loginUrl是authc的一个属性" class="headerlink" title="1.authc.loginUrl配置身份认证不通过(未登录时)跳转的地址…(loginUrl是authc的一个属性)"></a><em>1.authc.loginUrl配置身份认证不通过(未登录时)跳转的地址…(loginUrl是authc的一个属性)</em></h5><h5 id="2-roles-unauthorizeUrl配置角色认证不通过跳转的地址…-noAuth-jsp页面目前只有一行字"><a href="#2-roles-unauthorizeUrl配置角色认证不通过跳转的地址…-noAuth-jsp页面目前只有一行字" class="headerlink" title="2.roles.unauthorizeUrl配置角色认证不通过跳转的地址…(noAuth.jsp页面目前只有一行字)"></a><em>2.roles.unauthorizeUrl配置角色认证不通过跳转的地址…(noAuth.jsp页面目前只有一行字)</em></h5><h5 id="3-perms-unauthorizeUrl配置权限认证不通过跳转的地址"><a href="#3-perms-unauthorizeUrl配置权限认证不通过跳转的地址" class="headerlink" title="3.perms.unauthorizeUrl配置权限认证不通过跳转的地址"></a><em>3.perms.unauthorizeUrl配置权限认证不通过跳转的地址</em></h5><h5 id="4-users-下配置用户身份信息以及用户角色"><a href="#4-users-下配置用户身份信息以及用户角色" class="headerlink" title="4.[users]下配置用户身份信息以及用户角色"></a><em>4.[users]下配置用户身份信息以及用户角色</em></h5><h5 id="5-roles-下配置角色以及角色的控制权限"><a href="#5-roles-下配置角色以及角色的控制权限" class="headerlink" title="5.[roles]下配置角色以及角色的控制权限"></a><em>5.[roles]下配置角色以及角色的控制权限</em></h5><h5 id="6-urls-下配置访问地址所需的权限-其中值为”anon过滤器”表示地址不需要登录即可访问-“authc过滤器”表示地址登录才能访问"><a href="#6-urls-下配置访问地址所需的权限-其中值为”anon过滤器”表示地址不需要登录即可访问-“authc过滤器”表示地址登录才能访问" class="headerlink" title="6.[urls]下配置访问地址所需的权限, 其中值为”anon过滤器”表示地址不需要登录即可访问; “authc过滤器”表示地址登录才能访问"></a><em>6.[urls]下配置访问地址所需的权限, 其中值为”anon过滤器”表示地址不需要登录即可访问; “authc过滤器”表示地址登录才能访问</em></h5><h5 id="7-值为-roles-admin-表示-必须有角色为admin的用户才能范围"><a href="#7-值为-roles-admin-表示-必须有角色为admin的用户才能范围" class="headerlink" title="7.值为 roles[admin] 表示 必须有角色为admin的用户才能范围"></a><em>7.值为 roles[admin] 表示 必须有角色为admin的用户才能范围</em></h5><h5 id="8-值为-perms-“student-create”-表示-必须有权限为”student-create”的用户才能范围"><a href="#8-值为-perms-“student-create”-表示-必须有权限为”student-create”的用户才能范围" class="headerlink" title="8.值为 perms[“student:create”] 表示 必须有权限为”student:create”的用户才能范围"></a><em>8.值为 perms[“student:create”] 表示 必须有权限为”student:create”的用户才能范围</em></h5><h5 id="9-多个过滤器用”-”隔开-而且相互为”且”的关系-必须同时满足才能访问"><a href="#9-多个过滤器用”-”隔开-而且相互为”且”的关系-必须同时满足才能访问" class="headerlink" title="9.多个过滤器用”,”隔开 而且相互为”且”的关系(必须同时满足才能访问)"></a><em>9.多个过滤器用”,”隔开 而且相互为”且”的关系(必须同时满足才能访问)</em></h5><h5 id="10-地址可以使用-表示匹配单个任意字符-eg-home-authc-表示可过滤-home1-homef…"><a href="#10-地址可以使用-表示匹配单个任意字符-eg-home-authc-表示可过滤-home1-homef…" class="headerlink" title="10.地址可以使用?表示匹配单个任意字符(eg: /home?=authc 表示可过滤 /home1; /homef…..)"></a><em>10.地址可以使用?表示匹配单个任意字符(eg: /home?=authc 表示可过滤 /home1; /homef…..)</em></h5><h5 id="11-地址可以使用表示匹配任意个任意字符-eg-home-authc-表示可过滤-home123-homeef…"><a href="#11-地址可以使用表示匹配任意个任意字符-eg-home-authc-表示可过滤-home123-homeef…" class="headerlink" title="11.地址可以使用表示匹配任意个任意字符(eg: /home=authc 表示可过滤 /home123; /homeef…..)"></a><em>11.地址可以使用</em>表示匹配任意个任意字符(eg: /home<em>=authc 表示可过滤 /home123; /homeef…..)</em></h5><h5 id="12-地址可以使用表示匹配多路径-eg-home-authc-表示可过滤-home-abc-home-aaa-bbb…"><a href="#12-地址可以使用表示匹配多路径-eg-home-authc-表示可过滤-home-abc-home-aaa-bbb…" class="headerlink" title="12.地址可以使用表示匹配多路径(eg: /home/=authc 表示可过滤 /home/abc; /home/aaa/bbb…..)"></a><em>12.地址可以使用<strong>表示匹配多路径(eg: /home/</strong>=authc 表示可过滤 /home/abc; /home/aaa/bbb…..)</em></h5><h4 id="2-编写sevlet代码"><a href="#2-编写sevlet代码" class="headerlink" title="2.编写sevlet代码"></a>2.编写sevlet代码</h4><blockquote><p>LoginServlet.java :身份验证地址</p></blockquote><pre><code>package com.servlet;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.subject.Subject;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;/** * Created by zj on 2017/4/10. */public class LoginServlet extends HttpServlet {    /**     * 跳转登录界面     *     * @param req     * @param resp     * @throws ServletException     * @throws IOException     */    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        System.out.println(&quot;user no login&quot;);        resp.sendRedirect(&quot;login.jsp&quot;);    }    /**     * 进行登录     *     * @param req     * @param resp     * @throws ServletException     * @throws IOException     */    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        System.out.println(&quot;登录&quot;);        String userName = req.getParameter(&quot;userName&quot;);        String password = req.getParameter(&quot;password&quot;);        Subject subject = SecurityUtils.getSubject();        //创建token令牌, 用户/密码        UsernamePasswordToken token = new UsernamePasswordToken(userName, password);        try {            //身份认证 登录            subject.login(token);            System.out.println(&quot;登录成功&quot;);            resp.sendRedirect(&quot;success.jsp&quot;);        } catch (Exception e) {            System.out.println(&quot;账号密码不对&quot;);            e.printStackTrace();            resp.sendRedirect(&quot;login.jsp&quot;);        }    }}//******************************************************************login.jsp&lt;%@ page language=&quot;java&quot; pageEncoding=&quot;UTF-8&quot; %&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;body&gt;&lt;h2&gt;Hello World&lt;/h2&gt;登录:&lt;form action=&quot;/login&quot; method=&quot;post&quot;&gt;    &lt;input type=&quot;text&quot; value=&quot;&quot; name=&quot;userName&quot;&gt;    &lt;input type=&quot;password&quot; value=&quot;&quot; name=&quot;password&quot;&gt;    &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><blockquote><p>HomeServlet.java :登录成功以及退出登录地址</p></blockquote><pre><code>package com.servlet;import org.apache.shiro.SecurityUtils;import org.apache.shiro.subject.Subject;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;/** * Created by zj on 2017/4/10. */public class HomeServlet extends HttpServlet {    /**     * 进入主页(登陆成功界面)     *     * @param req     * @param resp     * @throws ServletException     * @throws IOException     */    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        System.out.println(&quot;主页 get&quot;);        req.getRequestDispatcher(&quot;success.jsp&quot;).forward(req, resp);    }    /**     * 用来退出登陆     *     * @param req     * @param resp     * @throws ServletException     * @throws IOException     */    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        System.out.println(&quot;主页 post&quot;);        System.out.println(&quot;login out&quot;);        //退出登录        Subject subject = SecurityUtils.getSubject();        subject.logout();        resp.sendRedirect(&quot;login.jsp&quot;);    }}//******************************************************************success.jsp&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;body&gt;&lt;h2&gt;Hello World!&lt;/h2&gt; 成功!!!&lt;form action=&quot;/home&quot; method=&quot;post&quot;&gt;    &lt;input type=&quot;submit&quot; value=&quot;退出登陆&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><blockquote><p>AdminServlet.java</p></blockquote><pre><code>package com.servlet;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;/** * Created by zj on 2017/4/10. */public class AdminServlet extends HttpServlet {    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        System.out.println(&quot;ADMIN GET&quot;);    }    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        System.out.println(&quot;ADMIN POST&quot;);    }}</code></pre><h4 id="3-启动项目"><a href="#3-启动项目" class="headerlink" title="3.启动项目"></a>3.启动项目</h4><h5 id="测试身份认证"><a href="#测试身份认证" class="headerlink" title="测试身份认证"></a>测试身份认证</h5><blockquote><p>不登录情况下输入地址 <a href="http://localhost:8080/home" target="_blank" rel="noopener">http://localhost:8080/home</a> 跳转到 /login地址转向的jsp页面</p></blockquote><blockquote><p>输入正确的用户名(ay2626)密码 点击登录 成功; 再次输入地址 <a href="http://localhost:8080/home" target="_blank" rel="noopener">http://localhost:8080/home</a> 跳转到成功的jsp</p></blockquote><blockquote><p>点击退出登录 成功; 再次输入地址 <a href="http://localhost:8080/home" target="_blank" rel="noopener">http://localhost:8080/home</a> 跳转到 /login地址转向的jsp页面</p></blockquote><h5 id="测试角色认证"><a href="#测试角色认证" class="headerlink" title="测试角色认证"></a>测试角色认证</h5><blockquote><p>登录 :进行其他认证前先进行身份认证 使用ay2626用户登录(其角色只有student) 登录成功 跳转到success.jsp</p></blockquote><blockquote><p>输入地址<a href="http://localhost:8080/admin" target="_blank" rel="noopener">http://localhost:8080/admin</a> 跳转到 <a href="http://localhost:8080/noAuth.jsp" target="_blank" rel="noopener">http://localhost:8080/noAuth.jsp</a> 表示没有权限访问此地址</p></blockquote><blockquote><p>退出登录 用zj2626再次登录测试 登录成功 再次输入<a href="http://localhost:8080/admin" target="_blank" rel="noopener">http://localhost:8080/admin</a> 控制台打印”ADMIN POST” 表示访问成功</p></blockquote><h5 id="测试权限认证"><a href="#测试权限认证" class="headerlink" title="测试权限认证"></a>测试权限认证</h5><blockquote><p>可把配置文件中 /admin的过滤器改为 /admin=perms[“student:create”] 进行测试</p></blockquote><blockquote><p>测试发现 有权限的ay2626用户可以访问而没有权限的zj2626不能访问</p></blockquote><hr><hr><h4 id="自定义Realm"><a href="#自定义Realm" class="headerlink" title="自定义Realm"></a>自定义Realm</h4><blockquote><p>实际开发中用户权限的配置要存放在数据库,so需要使用自定义realm来读取数据库中权限配置然后为用户赋予权限</p></blockquote><h5 id="测试开发步骤"><a href="#测试开发步骤" class="headerlink" title="测试开发步骤"></a>测试开发步骤</h5><blockquote><p>1.添加数据库依赖</p></blockquote><pre><code>&lt;dependency&gt;    &lt;groupId&gt;mysql&lt;/groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;    &lt;version&gt;5.1.39&lt;/version&gt;    &lt;scope&gt;compile&lt;/scope&gt;&lt;/dependency&gt;</code></pre><blockquote><p>2.设计构建测试的数据库表:有三个表:分别存储用户,角色,权限 并其他两个都与角色关联, 然后存入部分数据 ,再根据三个表建立对应实体(简单实体)</p></blockquote><blockquote><p>3.添加数据库操作类(写的并不完善 仅测试使用)</p></blockquote><pre><code>package com.servlet;import java.sql.*;/** * Created by zj on 2017/4/11. */public class DBUtil {    //获取数据库连接    private static Connection getConnection() {        try {            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);            Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://127.0.0.1:3306/test&quot;, &quot;root&quot;, &quot;fangshuoit&quot;);            return connection;        } catch (ClassNotFoundException | SQLException e) {            e.printStackTrace();        }        return null;    }    /**     * 通过用户名获取用户信息     *     * @param name     * @return     * @throws SQLException     */    public static User getByUserName(String name) throws SQLException {        String sql = &quot;select * from ay_user where loginName = ?&quot;;        PreparedStatement preparedStatement = getConnection().prepareStatement(sql);        preparedStatement.setString(1, name);        ResultSet resultSet = preparedStatement.executeQuery();        if (resultSet.next()) {            return new User(resultSet.getInt(&quot;id&quot;), resultSet.getString(&quot;loginName&quot;), resultSet.getString(&quot;password&quot;));        }        return null;    }    /**     * 通过用户名获取用户角色     *     * @param name     * @return     * @throws SQLException     */    public static Role getRolesByUserName(String name) throws SQLException {        String sql = &quot;select roleId from ay_user where loginName = ?&quot;;        PreparedStatement preparedStatement = getConnection().prepareStatement(sql);        preparedStatement.setString(1, name);        ResultSet resultSet = preparedStatement.executeQuery();        if (resultSet.next()) {            Integer id = resultSet.getInt(&quot;roleId&quot;);            sql = &quot;select * from ay_role where id = ?&quot;;            preparedStatement = getConnection().prepareStatement(sql);            preparedStatement.setInt(1, id);            resultSet = preparedStatement.executeQuery();            if (resultSet.next()) {                return new Role(resultSet.getInt(&quot;id&quot;), resultSet.getString(&quot;name&quot;));            }        }        return null;    }    /**     * 通过角色id获取角色权限     *     * @param roleId     * @return     * @throws SQLException     */    public static Perms getPermsByRole(Integer roleId) throws SQLException {        String sql = &quot;select * from ay_perms where roleId = ?&quot;;        PreparedStatement preparedStatement = getConnection().prepareStatement(sql);        preparedStatement.setInt(1, roleId);        ResultSet resultSet = preparedStatement.executeQuery();        if (resultSet.next()) {            return new Perms(resultSet.getInt(&quot;id&quot;), resultSet.getString(&quot;name&quot;), resultSet.getInt(&quot;roleId&quot;));        }        return null;    }}</code></pre><blockquote><p>3.编写自定义的Realm类 需要AuthorizingRealm类并实现两个方法; 第一个是用来身份验证,第二是用来角色权限验证</p></blockquote><pre><code>public class MyRealm extends AuthorizingRealm {    /**     * 验证当前登录的用户(身份认证), 不再需要在配置文件中配置用户的信息和其角色信息     *      * @param token 封装有用户的信息     * @return     * @throws AuthenticationException     */    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {        String userName = (String) token.getPrincipal();        System.out.println(&quot;要登录的用户 : &quot; + userName);        try {            User user = DBUtil.getByUserName(userName);//这里只是通过用户名验证并获取用户信息,实际开发中需要用户名以及加密的密码            if (user != null) {                return new SimpleAuthenticationInfo(user.getLoginName(), user.getPassword(), &quot;XX&quot;);//返回登录信息            } else                return null;        } catch (SQLException e) {            e.printStackTrace();        }        return null;    }    /**( 身份验证(登录)以后 )     * 为当前用户授予角色和权限(根据登录的用户名,读取数据库中其角色和权限)     *     * @param principals 封装了身份信息     * @return     */    @Override    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {        String userName = (String) principals.getPrimaryPrincipal();        System.out.println(&quot;要权限的用户 : &quot; + userName);        SimpleAuthorizationInfo authenticationInfo = new SimpleAuthorizationInfo();        try {            Role role = DBUtil.getRolesByUserName(userName);            if (null != role) {                Set&lt;String&gt; set = new HashSet&lt;&gt;();                System.out.println(&quot;获得的角色: &quot;+ role.getName());                set.add(role.getName());                authenticationInfo.setRoles(set);//赋予角色                Perms perms = DBUtil.getPermsByRole(role.getId());                Set&lt;String&gt; set2 = new HashSet&lt;&gt;();                set2.add(perms.getName());                System.out.println(&quot;获得的权限: &quot;+ perms.getName());                authenticationInfo.setStringPermissions(set2);//赋予权限                return authenticationInfo;            }        } catch (SQLException e) {        }        return null;    }}</code></pre><blockquote><p>4.修改配置文件shiro.ini ,引入自定义Realms,并去掉原来的 [users]和[roles]下的配置</p></blockquote><pre><code>[main]authc.loginUrl=/loginperms.unauthorizedUrl=/noAuth.jsproles.unauthorizedUrl=/noAuth.jspmyRealm=com.servlet.MyRealmsecurityManager.realms=$myRealm[urls]/login=anon/home=authc/admin=roles[admin]</code></pre><h5 id="1-myRealm指向自定义Realm的位置"><a href="#1-myRealm指向自定义Realm的位置" class="headerlink" title="1.myRealm指向自定义Realm的位置"></a><em>1.myRealm指向自定义Realm的位置</em></h5><h5 id="2-securityManager-realms指向自定义Realm的引用-表明使用自定义Realms进行安全认证-可以指向多个-用”-”隔开"><a href="#2-securityManager-realms指向自定义Realm的引用-表明使用自定义Realms进行安全认证-可以指向多个-用”-”隔开" class="headerlink" title="2.securityManager.realms指向自定义Realm的引用(表明使用自定义Realms进行安全认证),可以指向多个,用”,”隔开"></a><em>2.securityManager.realms指向自定义Realm的引用(表明使用自定义Realms进行安全认证),可以指向多个,用”,”隔开</em></h5><blockquote><p>5.启动项目测试 发现:使用zj2626登录可以访问 /admin地址;而ay2626登录不能访问(没有user角色);而且每次请求都会进行认证(控制台打印信息)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 框架相关 </category>
          
          <category> 权限管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客插件安装</title>
      <link href="/2020/01/15/20170315_test/"/>
      <url>/2020/01/15/20170315_test/</url>
      
        <content type="html"><![CDATA[<img src="/2020/01/15/20170315_test/hexo.png" title="图片标题"><a id="more"></a><h3 id="Hexo添加网易云跟贴（已关闭）-https-www-levey-cn-2017-415-html"><a href="#Hexo添加网易云跟贴（已关闭）-https-www-levey-cn-2017-415-html" class="headerlink" title="Hexo添加网易云跟贴（已关闭）: https://www.levey.cn/2017/415.html"></a>Hexo添加网易云跟贴（已关闭）: <a href="https://www.levey.cn/2017/415.html" target="_blank" rel="noopener">https://www.levey.cn/2017/415.html</a></h3><h3 id="Hexo添加七牛插件-自动上传静态文件-https-github-com-gyk001-hexo-qiniu-sync"><a href="#Hexo添加七牛插件-自动上传静态文件-https-github-com-gyk001-hexo-qiniu-sync" class="headerlink" title="Hexo添加七牛插件,自动上传静态文件: https://github.com/gyk001/hexo-qiniu-sync"></a>Hexo添加七牛插件,自动上传静态文件: <a href="https://github.com/gyk001/hexo-qiniu-sync" target="_blank" rel="noopener">https://github.com/gyk001/hexo-qiniu-sync</a></h3><h3 id="Hexo添加静态文件的CDN加速-可配置七牛-https-github-com-zqjimlove-hexo-cdnify"><a href="#Hexo添加静态文件的CDN加速-可配置七牛-https-github-com-zqjimlove-hexo-cdnify" class="headerlink" title="Hexo添加静态文件的CDN加速(可配置七牛): https://github.com/zqjimlove/hexo-cdnify"></a>Hexo添加静态文件的CDN加速(可配置七牛): <a href="https://github.com/zqjimlove/hexo-cdnify" target="_blank" rel="noopener">https://github.com/zqjimlove/hexo-cdnify</a></h3><h3 id="主题介绍：-https-www-haomwei-com-technology-maupassant-hexo-html"><a href="#主题介绍：-https-www-haomwei-com-technology-maupassant-hexo-html" class="headerlink" title="主题介绍： https://www.haomwei.com/technology/maupassant-hexo.html"></a>主题介绍： <a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="noopener">https://www.haomwei.com/technology/maupassant-hexo.html</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">数学公式</span><br><span class="line"></span><br><span class="line">要启用数学公式支持，请在Hexo目录的_config.yml中添加：</span><br><span class="line"></span><br><span class="line">        mathjax: true</span><br><span class="line"></span><br><span class="line">并在相应文章的front-matter中添加mathjax: true，例如：</span><br><span class="line"></span><br><span class="line">         Test Math</span><br><span class="line">        date: 2016-04-05 14:16:00</span><br><span class="line">        categories: math</span><br><span class="line">        mathjax: true</span><br><span class="line"></span><br><span class="line">数学公式的默认定界符是$$...$$和\\[...\\]（对于块级公式），以及$...$和\\(...\\)（对于行内公式）。</span><br><span class="line"></span><br><span class="line">但是，如果你的文章内容中经常出现美元符号“$”, 或者说你想将“$”用作美元符号而非行内公式的定界符，请在Hexo目录的_config.yml中添加：</span><br><span class="line"></span><br><span class="line">        mathjax2: true</span><br><span class="line"></span><br><span class="line">而不是mathjax: true。 相应地，在需要使用数学公式的文章的front-matter中也添加mathjax2: true。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用iframe标签实现局部刷新</title>
      <link href="/2020/01/15/20170315_iframe/"/>
      <url>/2020/01/15/20170315_iframe/</url>
      
        <content type="html"><![CDATA[<h3 id="Iframe是一种嵌入网页的框架形式，Web页面可以通过更改嵌入的部分，达到部分内容刷新，通过本文和大家一起学习iframe实现局部刷新的几种方法汇总，对iframe局部刷新相关知识感兴趣的朋友一起学习吧"><a href="#Iframe是一种嵌入网页的框架形式，Web页面可以通过更改嵌入的部分，达到部分内容刷新，通过本文和大家一起学习iframe实现局部刷新的几种方法汇总，对iframe局部刷新相关知识感兴趣的朋友一起学习吧" class="headerlink" title="Iframe是一种嵌入网页的框架形式，Web页面可以通过更改嵌入的部分，达到部分内容刷新，通过本文和大家一起学习iframe实现局部刷新的几种方法汇总，对iframe局部刷新相关知识感兴趣的朋友一起学习吧"></a>Iframe是一种嵌入网页的框架形式，Web页面可以通过更改嵌入的部分，达到部分内容刷新，通过本文和大家一起学习iframe实现局部刷新的几种方法汇总，对iframe局部刷新相关知识感兴趣的朋友一起学习吧</h3><h3 id="Iframe是一种嵌入网页的框架形式，Web页面可以通过更改嵌入的部分，达到部分内容刷新。"><a href="#Iframe是一种嵌入网页的框架形式，Web页面可以通过更改嵌入的部分，达到部分内容刷新。" class="headerlink" title="Iframe是一种嵌入网页的框架形式，Web页面可以通过更改嵌入的部分，达到部分内容刷新。"></a>Iframe是一种嵌入网页的框架形式，Web页面可以通过更改嵌入的部分，达到部分内容刷新。</h3><h3 id="Iframe的用法与普通的标签元素DIV类似，可以指定在页面中嵌入的位置、颜色、界面布局等"><a href="#Iframe的用法与普通的标签元素DIV类似，可以指定在页面中嵌入的位置、颜色、界面布局等" class="headerlink" title="Iframe的用法与普通的标签元素DIV类似，可以指定在页面中嵌入的位置、颜色、界面布局等"></a>Iframe的用法与普通的标签元素DIV类似，可以指定在页面中嵌入的位置、颜色、界面布局等</h3><hr><blockquote><p>一、iframe实现局部刷新方法一</p></blockquote><pre><code>&lt;script type=&quot;text/javascript&quot;&gt; $(function(){ $(&quot;#a1&quot;).click(function(){  var name= $(this).attr(&quot;name&quot;);  $(&quot;#iframe&quot;).attr(&quot;src&quot;,name).ready(); }) $(&quot;#a2&quot;).click(function(){  var name= $(this).attr(&quot;name&quot;);  $(&quot;#iframe&quot;).attr(&quot;src&quot;,name).ready(); })})&lt;/script&gt;&lt;a href=&quot;#&quot; id=&quot;a1&quot; name=&quot;a1.html&quot;&gt;1&lt;/a&gt;&lt;a href=&quot;#&quot; id=&quot;a2&quot; name=&quot;a2.html&quot;&gt;2&lt;/a&gt;&lt;iframe src=&quot;&quot; id=&quot;iframe&quot;&gt;&lt;/iframe&gt; </code></pre><p> 当点a1时在iframe里显示a1.html的内容，点a2时在iframe里显示a2.html的内容</p><a id="more"></a><hr><blockquote><p>二、iframe实现局部刷新的方法二</p></blockquote><pre><code>&lt;a href=&quot;a1.html&quot; id=&quot;a1&quot; name=&quot;a1.html&quot; target=&quot;i&quot;&gt;1&lt;/a&gt;&lt;a href=&quot;a2.html&quot; id=&quot;a2&quot; name=&quot;a2.html&quot; target=&quot;i&quot;&gt;2&lt;/a&gt;&lt;iframe src=&quot;&quot; id=&quot;iframe&quot; name=&quot;i&quot;&gt;&lt;/iframe&gt; </code></pre><p>备注： </p><ol><li><p><form> 同样也有target属性，作用和<a>一样 这个方式如果<from>或<a>提交到某个Action中再跳转到a1.html中效果一样，如果在Action中有req.set或session.set，最后在iframe中同样可以显示出来。</a></from></a></form></p></li><li><p>可以加入这些属性 去除iframe的默认样式</p></li></ol><pre><code>frameborder=&quot;no&quot; border=&quot;0&quot;  marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; allowtransparency=&quot;yes&quot;</code></pre><hr><blockquote><p>三：iframe实现局部刷新的方法三:</p></blockquote><pre><code>&lt;iframe src=&quot;1.htm&quot; name=&quot;ifrmname&quot; id=&quot;ifrmid&quot;&gt;&lt;/iframe&gt;</code></pre><ol><li>方案一:用iframe的name属性定位</li></ol><pre><code>&lt;input type=&quot;button&quot; name=&quot;Button&quot; value=&quot;Button&quot; onclick=&quot;document.frames(&apos;ifrmname&apos;).location.reload()&quot;&gt;</code></pre><p>或</p><pre><code>&lt;input type=&quot;button&quot; name=&quot;Button&quot; value=&quot;Button&quot; onclick=&quot;document.all.ifrmname.document.location.reload()&quot;&gt;</code></pre><ol start="2"><li>方案二:用iframe的id属性定位</li></ol><pre><code>&lt;input type=&quot;button&quot; name=&quot;Button&quot; value=&quot;Button&quot; onclick=&quot;ifrmid.window.location.reload()&quot;&gt;</code></pre><ol start="3"><li>方案三:当iframe的src为其它网站地址(跨域操作时)</li></ol><pre><code>&lt;input type=&quot;button&quot; name=&quot;Button&quot; value=&quot;Button&quot; onclick=&quot;window.open(document.all.ifrmname.src,&apos;ifrmname&apos;,&apos;&apos;)&quot;&gt;</code></pre><ol start="4"><li>方案四:通过和替换iframe的src来实现局部刷新<br>可以用document.getElementById(“iframname”).src=””来进行iframe得重定向；<br>示例代码如下：test.html</li></ol><pre><code>&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt;  function partRefresh() {   document.getElementById(&quot;iframe1Id&quot;).src = &quot;a2.html&quot;; // 方法一: 通过和替换iframe的src来实现局部刷新  } &lt;/script&gt; &lt;/head&gt; &lt;body&gt;  &lt;table border=&quot;1&quot; width=&quot;90%&quot; align=&quot;center&quot;&gt;   &lt;tr    style=&quot;background: #F0F0E4&quot;&gt;&lt;td&gt;方格1&lt;/td&gt;&lt;td&gt;方格2&lt;/td&gt; &lt;td&gt;方格3&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td&gt;     &lt;iframe src=&quot;a1.html&quot; id=&quot;iframe1Id&quot; name=&quot;iframe1Name&quot; width=&quot;100%&quot;&gt;&lt;/iframe&gt;    &lt;/td&gt;    &lt;td&gt;     &lt;iframe src=&quot;a2.html&quot; id=&quot;iframe2Id&quot; name=&quot;iframe2Name&quot; width=&quot;100%&quot;&gt;&lt;/iframe&gt;    &lt;/td&gt;    &lt;td&gt;     &lt;iframe src=&quot;a3.html&quot; id=&quot;iframe3Id&quot; name=&quot;iframe3Name&quot; width=&quot;100%&quot;&gt;&lt;/iframe&gt;    &lt;/td&gt;   &lt;/tr&gt;  &lt;/table&gt;  &lt;br&gt;  &lt;br&gt;  &lt;input type=&quot;button&quot; value=&quot;IFRAME局部刷新&quot; style=&quot;margin-left: 70px;&quot; onclick=&quot;partRefresh();&quot;&gt; &lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 框架相关 </category>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> iframe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven安装与命令</title>
      <link href="/2020/01/15/201703101526_maven/"/>
      <url>/2020/01/15/201703101526_maven/</url>
      
        <content type="html"><![CDATA[<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><pre><code>1.下载 地址 : http://maven.apache.org/download.cgi2.解压3.配置环境变量:     1.添加 M2_HOME : 解压目录    2.修改 path : 添加maven的bin目录    3.测试 命令行窗口输入: mvn -v</code></pre><a id="more"></a><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><img src="/2020/01/15/201703101526_maven/ml.png" title="图片标题"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- src :                             源代码目录</span><br><span class="line">    -main:</span><br><span class="line">        - java :                    java源码</span><br><span class="line">        - resources:                资源文件目录,配置文件</span><br><span class="line">        - webapp :                  页面代码 jsp</span><br><span class="line">            - WEB-INF</span><br><span class="line">                - web.xml</span><br><span class="line">    - test:</span><br><span class="line">- target                            编译输出目录</span><br><span class="line">- pom.xml                           pom文件</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--pom文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span>      maven版本</span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.living<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>           组织名 一般写包名</span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>FSCLassCloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   模块名 一般写项目名</span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>         版本号 SNAPSHOT:快照仓库(快照) alpha(内测版) beta(公测版) release发布仓库(稳定版) GA(正式发布)</span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span>              打包方式 默认jar ,还有war,zip,pom</span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">name</span>&gt;</span>                        项目描述名</span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span>      项目地址</span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span>             项目描述</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>                          加入的依赖(jar包) groupId,artifactId,version三个属性组成依赖的坐标</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.jdbc.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>                  依赖范围</span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>false<span class="tag">&lt;/<span class="name">optional</span>&gt;</span>              设置依赖是否可选(继承)</span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span>                            排除依赖传递列表(里面写依赖的坐标)</span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span>               </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>                                   插件列表</span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>                                加载的插件</span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;jdk.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;jdk.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span><span class="tag">&lt;/<span class="name">parent</span>&gt;</span>                               继承的父模块</span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span>                                       聚合多个模块</span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件: maven目录/conf/settings.xml 里面包含了很多maven的仓库的配置,可以进行自定义</p><p><em>仓库: 本地仓库(电脑本地仓库地址) 远程仓库(远程服务器的仓库) 镜像仓库(国外仓库无法访问,国内创建的远程仓库)</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--修改settings.xml文件:--&gt;</span></span><br><span class="line">1.   <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>E:/MAVEN-3.3.9-bin/repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span> 修改本地仓库位置(默认在c盘)</span><br><span class="line"></span><br><span class="line">2.  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span>                                             修改远程仓库地址为镜像地址(如果中央仓库访问很慢就换把)</span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>UK<span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>UK Central<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://uk.maven.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">3. <span class="tag">&lt;<span class="name">profile</span>&gt;</span>                                        修改jdk版本支持</span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><blockquote><ol><li>mvn -v                  查看maven版本信息</li><li>mvn compile             编译(第一次编译会下载插件和jar包)</li><li>mvn test                运行测试</li><li>mvn package             打包</li><li>mvn clean               清理,删除编译后的文件–target目录</li><li>mvn install             安装jar包到本地仓库</li><li>mvn archetype:generate  自动构建maven目录</li></ol></blockquote><p>注: 手动下载的jar包安装到本地仓库方式</p><blockquote><p>mvn install:install-file -Dfile=jar包的位置 -DgroupId=jar包项目的groupId -DartifactId=jar包项目的artifactId -Dversion=jar包项目的version -Dpackaging=jar</p></blockquote><p>注:自动构建maven目录写法</p><blockquote><p>mvn archetype:generate -DgroupId=组织名 -DartifactId=项目名 -Dversion=版本 -Dpackaging=包名</p></blockquote><h2 id="classpath-有三种-编译-测试-运行"><a href="#classpath-有三种-编译-测试-运行" class="headerlink" title="classpath 有三种 编译 测试 运行"></a>classpath 有三种 编译 测试 运行</h2><h2 id="依赖的范围"><a href="#依赖的范围" class="headerlink" title="依赖的范围"></a>依赖的范围</h2><pre><code>1.compile (默认) 编译测试运行都有效2.test      只是在测试范围有效3.provided  编译测试时候有效 运行时(jar)不会被加入进去4.runtime   测试和运行时有效5.system    编译测试有效 移植性差 与本地系统有关6.import    导入的范围 只使用在dependencyManagement中 表示是从其他的pom中继承的依赖</code></pre><h3 id="面对依赖冲突的原则"><a href="#面对依赖冲突的原则" class="headerlink" title="面对依赖冲突的原则       "></a>面对依赖冲突的原则       <exclusion></exclusion></h3><pre><code>1.短路优先 当依赖了同一个项目的不同版本 则哪个最近就解析哪个2.路径相同则先声明先优先 先解析谁</code></pre><h3 id="聚合-几个项目-或模块-放到一起运行"><a href="#聚合-几个项目-或模块-放到一起运行" class="headerlink" title="聚合: 几个项目(或模块)放到一起运行  "></a>聚合: 几个项目(或模块)放到一起运行  <modules></modules></h3><h3 id="继承-继承父类项目pom中的配置"><a href="#继承-继承父类项目pom中的配置" class="headerlink" title="继承: 继承父类项目pom中的配置 "></a>继承: 继承父类项目pom中的配置 <parent></parent></h3>]]></content>
      
      
      <categories>
          
          <category> 程序安装与配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>垃圾收集器与内存分配策略</title>
      <link href="/2020/01/15/201703101259_%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/"/>
      <url>/2020/01/15/201703101259_%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="1-垃圾收集-Garbage-Collection-GC"><a href="#1-垃圾收集-Garbage-Collection-GC" class="headerlink" title="1. 垃圾收集 (Garbage Collection,GC)"></a>1. 垃圾收集 (Garbage Collection,GC)</h2><p>Java内存 运行时区域的各个部分，其中程序计数器、虚拟机栈、本地方法栈3个区域随线程而生，随 线程而灭；栈中的栈帧随着方法的进入和退出而有条不紊地执行着出栈和入栈操作。每一个 栈帧中分配多少内存基本上是在类结构确定下来时就已知的（尽管在运行期会由JIT编译器 进行一些优化，但在本章基于概念模型的讨论中，大体上可以认为是编译期可知的），因此 这几个区域的内存分配和回收都具备确定性，在这几个区域内就不需要过多考虑回收的问 题，因为方法结束或者线程结束时，内存自然就跟随着回收了。而Java堆和方法区则不一 样，一个接口中的多个实现类需要的内存可能不一样，一个方法中的多个分支需要的内存也 可能不一样，我们只有在程序处于运行期间时才能知道会创建哪些对象，这部分内存的分配 和回收都是动态的，垃圾收集器所关注的是这部分内存</p><h2 id="2-判断对象是否存活算法"><a href="#2-判断对象是否存活算法" class="headerlink" title="2.判断对象是否存活算法"></a>2.判断对象是否存活算法</h2><pre><code>1.　引用计数算法 给对象中添加一个引用计数器，每当有 一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0 的对象就是不可能再被使用的。</code></pre><h4 id="优点-实现简单，判定效率很高"><a href="#优点-实现简单，判定效率很高" class="headerlink" title="优点:实现简单，判定效率很高"></a>优点:实现简单，判定效率很高</h4><h4 id="缺点-很难解决对象-之间相互循环引用的问题。"><a href="#缺点-很难解决对象-之间相互循环引用的问题。" class="headerlink" title="缺点:很难解决对象 之间相互循环引用的问题。"></a>缺点:很难解决对象 之间相互循环引用的问题。</h4><pre><code>2.　可达性分析算法  (在主流的商用程序语言（Java、C#...中实现)这个算法的基本思 路就是通过一系列的称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所 走过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连 （用图论的话来说，就是从GC Roots到这个对象不可达）时，则证明此对象是不可用的</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在Java语言中，可作为GC Roots的对象包括下面几种：</span><br><span class="line">    虚拟机栈（栈帧中的本地变量表）中引用的对象。 </span><br><span class="line">    方法区中类静态属性引用的对象。 </span><br><span class="line">    方法区中常量引用的对象。 </span><br><span class="line">    本地方法栈中JNI（即一般说的Native方法）引用的对</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="3-关于引用"><a href="#3-关于引用" class="headerlink" title="3.关于引用"></a>3.关于引用</h2><blockquote><p>传统定义:：如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块 内存代表着一个引用。</p></blockquote><blockquote><p>当前的扩充定义: 引用分为4种<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 强引用: 通过new出来的, 只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象</span><br><span class="line">2. 软引用: 用来描述一些还有用但并非必需的对象</span><br><span class="line">    对于软引用关联着的对象，在系统将 要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回 收还没有足够的内存，才会抛出内存溢出异常。</span><br><span class="line">    在JDK 1.2之后，提供了SoftReference类来实 现软引用。 </span><br><span class="line">3. 弱引用: 用来描述非必需的对象 更弱</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入了解java虚拟机 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java元数据与注解的实现原理</title>
      <link href="/2020/01/15/201703092044_annotation/"/>
      <url>/2020/01/15/201703092044_annotation/</url>
      
        <content type="html"><![CDATA[<p><em>知识来源</em>: </p><blockquote><p><a href="http://blog.csdn.net/vebasan/article/details/4794699" target="_blank" rel="noopener">http://blog.csdn.net/vebasan/article/details/4794699</a><br><a href="http://www.cnblogs.com/liuyonglong/p/3567786.html" target="_blank" rel="noopener">http://www.cnblogs.com/liuyonglong/p/3567786.html</a><br><a href="http://www.oracle.com/technetwork/cn/topics/linux/hunter-meta-097643-zhs.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/cn/topics/linux/hunter-meta-097643-zhs.html</a><br><a href="http://developer.51cto.com/art/200909/152828.htm" target="_blank" rel="noopener">http://developer.51cto.com/art/200909/152828.htm</a><br><a href="http://blog.csdn.net/yerenyuan_pku/article/details/52583656" target="_blank" rel="noopener">http://blog.csdn.net/yerenyuan_pku/article/details/52583656</a><br><a href="http://www.cnblogs.com/lzq2016/p/5169475.html" target="_blank" rel="noopener">http://www.cnblogs.com/lzq2016/p/5169475.html</a></p></blockquote><a id="more"></a><h4 id="J2SE-5-0-版本以后新特性-Annotation-注解"><a href="#J2SE-5-0-版本以后新特性-Annotation-注解" class="headerlink" title="J2SE 5.0 版本以后新特性 Annotation(注解)"></a>J2SE 5.0 版本以后新特性 Annotation(注解)</h4><h3 id="定义-元数据-MetaData-是数据的数据。元数据是添加到程序元素如方法、字段、类和包上的额外信息。或者说是从信息资源中抽取出来的用于说明其特征、内容的结构化的数据"><a href="#定义-元数据-MetaData-是数据的数据。元数据是添加到程序元素如方法、字段、类和包上的额外信息。或者说是从信息资源中抽取出来的用于说明其特征、内容的结构化的数据" class="headerlink" title="定义: 元数据(MetaData)是数据的数据。元数据是添加到程序元素如方法、字段、类和包上的额外信息。或者说是从信息资源中抽取出来的用于说明其特征、内容的结构化的数据"></a>定义: 元数据(MetaData)是数据的数据。元数据是添加到程序元素如方法、字段、类和包上的额外信息。或者说是从信息资源中抽取出来的用于说明其特征、内容的结构化的数据</h3><pre><code>&gt;例如：富士苹果有一个属性：它是红色的。假定有一个 FushiApple 类，可以使用 @Color 批注类型的一个批注来指定它的颜色。通过这么做，您就提供了关于苹果的元数据。        </code></pre><h3 id="作用-创建文档，跟踪代码中的依赖性，执行编译时检查，代码分析"><a href="#作用-创建文档，跟踪代码中的依赖性，执行编译时检查，代码分析" class="headerlink" title="作用: 创建文档，跟踪代码中的依赖性，执行编译时检查，代码分析"></a>作用: 创建文档，跟踪代码中的依赖性，执行编译时检查，代码分析</h3><pre><code>&gt;例如: spring等框架中可以大量运用注解来替代配置文件进行依赖注入(取代了复杂的XML配置文件)&gt;       所以说注解其实就是元数据,本质上也是接口,而且是继承了接口Annotation的接口&gt;利用元数据来描述资源后，我们就可以用来做很多的事情。比如确定资源，为资源提供检索点，在不同系统之间进行数据交换。&gt;比如:我们把所有的控制层都打注解@Controller,就表示此类为控制层,为springMVC提供定位,表明这是控制器,然后在springMVC配置文件中加入&lt;context:component-scan base-package=&quot;&quot;/&gt;用来识别就可以</code></pre><p>##元数据的实现<br>    JDK5.0出来后，java语言中就有了四种类型（TYPE），即类(class)、枚举(enum)、接口(interface)和注解(@interface)，它们是处在同一级别的。java就是通过注解来表示元数据的。<br>    java.lang.annotation.Annotation 本身是接口，而不是注解，当使用关键字@interface 定义一个注解时，该注解隐含的继承了java.lang.annotation.Annotation接口；<br>    如果我们定义一个接口，并且让该接口继承自Annotation，并不能作为注解, 定义注解只能依靠@interface实现</p><h3 id="JDK提供的基本注解"><a href="#JDK提供的基本注解" class="headerlink" title="JDK提供的基本注解"></a>JDK提供的基本注解</h3><ol><li><p>@SuppressWarnings 压制警告</p><pre><code>参数:     1.deprecation ：过时的类或方法警告。     2.unchecked：执行了未检查的转换时警告。     3.fallthrough：当Switch程序块直接通往下一种情况而没有Break时的警告。    4.path：在类路径、源文件路径等中有不存在的路径时的警告。    5.serial：当在可序列化的类上缺少serialVersionUID定义时的警告。    6.finally：任何finally子句不能完成时的警告。    7.all：关于以上所有情况的警告。</code></pre></li></ol><ol start="2"><li>@Deprecated  设置过时</li><li>@Override    表示复写</li></ol><h4 id="元注解-注解的注解-用于修饰一个Annotation的定义"><a href="#元注解-注解的注解-用于修饰一个Annotation的定义" class="headerlink" title="元注解(注解的注解) 用于修饰一个Annotation的定义"></a>元注解(注解的注解) 用于修饰一个Annotation的定义</h4><ol start="4"><li>@Retention 设置注解的生命周期  </li></ol><pre><code>RetentionPolicy.SOURCE      java源文件     只在源代码级别保留,编译时就会被忽略RetentionPolicy.CLASS       class文件     编译器将把注解记录在class文件中，当运行Java程序时，JVM会忽略注解。这是默认值。RetentionPolicy.RUNTIME     内存的字节码  编译器将把注解记录在class文件中。当运行Java程序时，JVM会保留注解，程序可以通过反射获取该注解</code></pre><ol start="5"><li>@Target 表示该注解可以用在什么地方</li></ol><pre><code>参数:value 类型:ElementType   ElementType.METHOD,ElementType.TYPE,ElementType.FIELD,... 分别表示注解的不同的使用地方</code></pre><ol start="6"><li><p>@Document 将注解包含在javadoc中  指定被该元Annotation修饰的Annotation类将被javadoc工具提取成文档</p></li><li><p>@Inherited    被它修饰的Annotation将具有继承性 允许子类继承父类的注解 其子类将自动具有该注解</p></li></ol><h2 id="注解和XML配置文件对比"><a href="#注解和XML配置文件对比" class="headerlink" title="注解和XML配置文件对比"></a>注解和XML配置文件对比</h2><pre><code>XML配置文件与代码文件分离，不利于一致性维护，缺乏在运行时的反射机制。而Annotation与代码一起被编译器处理，并能够在运行时访问。 通常XML配置文件都很复杂而且冗长。Java注释则不同，它是代码的一部分，不需要额外的引用就可以指明配置信息。 XML配置文件是文本文件，没有显式的类型支持，需要到运行时刻才能发现隐藏的错误。而Annotation是类型安全的，它会被编译器检查。   XML文件可以表达复杂的关系，但是在注释中我们却很难表达复杂的或层次的结构。 XML配置文件是在代码之外被单独处理的，也就是说基于XML的配置信息不是硬编码的，可以部署的时候进行修改。而修改Annotation则需要进行重新编译，不过我们可以利用AOP提供的机制为已有的代码添加Annotation。通过部署不同的AOP模块，就能使代码具有不同的Annotation，但比起直接修改XML显得复杂。 注释是简单易用的，并且对大多数应用来说已经足够了。而XML文件更复杂，但具有部署的灵活性，因而被用来处理与部署相关的决策。注释与XML配置文件可以一起使用。由于注释只能保存相当少的配置信息，只有预先集成的框架组件（类似在框架组件中已经完成了大多数预备工作）可以广泛地把注释作为配置选项。而XML配置文件作为一个可选的重载机制，可以用于改变注释的默认行为。</code></pre><h2 id="创建注解"><a href="#创建注解" class="headerlink" title="创建注解"></a>创建注解</h2><p>1.定义一个注解类</p><pre><code>//@Retention(RetentionPolicy.RUNTIME)public @interface MyAnnotation {    //公共的final静态属性 默认加上public static final  必须初始化    String user = &quot;root&quot;;    String password = &quot;fangshuoit&quot;;    //公共的抽象方法  默认加上public abstract 调用时必须初始化    //可以有默认返回值(返回值类型:8种基本类型，String、Class、枚举、注解及这些类型的数组)    String driverClass() default &quot;com.mysql.jdbc.Driver&quot;;    String jdbcUrl() default &quot;jdbc:mysql://localhost:3306/test&quot;;    String password() default &quot;fangshuoit&quot;;    int[] arrayAttr() default {3,4,4};}</code></pre><p>2.在另一个类或方法上加上此注解,并且添加一个测试方法测试有没有此注解</p><pre><code>@MyAnnotation(jdbcUrl = &quot;jdbc:mysql://localhost:3306/test2&quot;)public class TestAnnotaion {    private String name;    @Test    @MyAnnotation(arrayAttr={2,3,4}, jdbcUrl = &quot;jdbc:mysql://localhost:3306/test3&quot;)    public void test() {    }    @SuppressWarnings(&quot;deprecation&quot;)    public static void main(String[] args) {        System.runFinalizersOnExit(true);        if (TestAnnotaion.class.isAnnotationPresent(MyAnnotation.class)) { // 类上是否有注解，默认情况下返回false            MyAnnotation annotation = TestAnnotaion.class.getAnnotation(MyAnnotation.class);            System.out.println(annotation.jdbcUrl());             System.out.println(annotation.user);        }        System.out.println(&quot;运行结束&quot;);    }}//上面并没有返回System.out.println(annotation.jdbcUrl())结果,要设置生命周期,在注解类上加@Retention(RetentionPolicy.RUNTIME)输出:           jdbc:mysql://localhost:3306/test2        root        运行结束//表示获取到TestAnnotaion类上的注解@MyAnnotation的信息//可以认定@MyAnnotation(driverClass = &quot;&quot;, jdbcUrl = &quot;jdbc:mysql://localhost:3306/test2&quot;)是MyAnnotation类的实例对象//这里是通过反射获得MyAnnotation对象//其实@MyAnnotation()相当于new了一个对象//如果数组属性中只有一个元素，这时候属性值部分可以省略大括号。可以加上@Target({ElementType.METHOD,ElementType.TYPE})表示只能在方法和类上加此注解枚举类型注解属性    在注解类中添加 MyEnum season() default MyEnum.Winter;    则被注解类可添加 @MyAnnotation(season = MyEnum.Autumn)</code></pre>]]></content>
      
      
      <categories>
          
          <category> java语言基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
            <tag> 元数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象在HotSpot虚拟机中</title>
      <link href="/2020/01/15/201703092017_%E5%AF%B9%E8%B1%A1%E5%9C%A8HotSpot%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD/"/>
      <url>/2020/01/15/201703092017_%E5%AF%B9%E8%B1%A1%E5%9C%A8HotSpot%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="对象的建立位置"><a href="#对象的建立位置" class="headerlink" title="对象的建立位置"></a>对象的建立位置</h2><h3 id="对象在HotSpot虚拟机内存中存储分为三个区域"><a href="#对象在HotSpot虚拟机内存中存储分为三个区域" class="headerlink" title="对象在HotSpot虚拟机内存中存储分为三个区域"></a>对象在HotSpot虚拟机内存中存储分为三个区域</h3><pre><code>1.对象头(Hearder)    头中包含两部分信息:对象的运行时数据(官方叫Mark Word)以及类型指针;2.实例数据(Instance Data)3.对齐填充(Padding)</code></pre><blockquote><h6 id="对象运行时数据有很多-但是对象头信息是与数据无关的额外信息-为了提高空间利用率-其数据结构不固定-会根据对象状态复用自身的存储空间"><a href="#对象运行时数据有很多-但是对象头信息是与数据无关的额外信息-为了提高空间利用率-其数据结构不固定-会根据对象状态复用自身的存储空间" class="headerlink" title="对象运行时数据有很多,但是对象头信息是与数据无关的额外信息,为了提高空间利用率,其数据结构不固定,会根据对象状态复用自身的存储空间"></a>对象运行时数据有很多,但是对象头信息是与数据无关的额外信息,为了提高空间利用率,其数据结构不固定,会根据对象状态复用自身的存储空间</h6><h6 id="类型指针是对象指向其类元数据的指针-虚拟机通过其确定对象是哪个类的实例-不是每个对象都有"><a href="#类型指针是对象指向其类元数据的指针-虚拟机通过其确定对象是哪个类的实例-不是每个对象都有" class="headerlink" title="类型指针是对象指向其类元数据的指针,虚拟机通过其确定对象是哪个类的实例(不是每个对象都有)"></a><strong>类型指针</strong>是对象指向其类元数据的指针,虚拟机通过其确定对象是哪个类的实例(不是每个对象都有)</h6><h6 id="如果是数组-对象头中还有一块区域存放数组长度-一般对象可根据类型获得"><a href="#如果是数组-对象头中还有一块区域存放数组长度-一般对象可根据类型获得" class="headerlink" title="如果是数组,对象头中还有一块区域存放数组长度(一般对象可根据类型获得)"></a>如果是数组,对象头中还有一块区域存放数组长度(一般对象可根据类型获得)</h6></blockquote><blockquote><h6 id="实例数据是真正的对象的有效信息-这些信息的顺序受到虚拟机分配策略参数的影响"><a href="#实例数据是真正的对象的有效信息-这些信息的顺序受到虚拟机分配策略参数的影响" class="headerlink" title="实例数据是真正的对象的有效信息,这些信息的顺序受到虚拟机分配策略参数的影响"></a>实例数据是真正的对象的有效信息,这些信息的顺序受到虚拟机分配策略参数的影响</h6><pre><code>默认分配策略:     longs/doubles,ints,shorts/chars,bytes/booleans/oops(一般对象指针)    父类定义的变量在子类之前    相同宽度的字段总是被分配的一起</code></pre></blockquote><a id="more"></a><h2 id="对象的访问-方式"><a href="#对象的访问-方式" class="headerlink" title="对象的访问(方式)"></a>对象的访问(方式)</h2><pre><code>1.句柄方式:         虚拟机在java堆中划分出一块叫句柄池,reference中存储对象的句柄地址,句柄中包含了对象实例数据和类型数据的地址信息    优点: 稳定,即使对象被移动,只改变句柄中的实例数据指针,reference不变</code></pre><img src="/2020/01/15/201703092017_对象在HotSpot虚拟机中/object.jpg" title="通过句柄访问对象图 alt:通过句柄访问对象图 extend:?imageView2/2/w/600"><pre><code>2.直接指针方式:    reference中存储的就是对象的地址    优点:速度快,节省一次指针定位的开销(HotSpot使用)</code></pre><img src="/2020/01/15/201703092017_对象在HotSpot虚拟机中/1bda289.jpg" title="通过句柄访问对象图 alt:通过句柄访问对象图 extend:?imageView2/2/w/600"><blockquote><h6 id="reference-存在栈中-用来操作堆中的具体对象-存储了对象的引用-句柄地址或直接地址"><a href="#reference-存在栈中-用来操作堆中的具体对象-存储了对象的引用-句柄地址或直接地址" class="headerlink" title="reference:存在栈中,用来操作堆中的具体对象,存储了对象的引用(句柄地址或直接地址)"></a>reference:存在栈中,用来操作堆中的具体对象,存储了对象的引用(句柄地址或直接地址)</h6></blockquote>]]></content>
      
      
      <categories>
          
          <category> java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入了解java虚拟机 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis 高级结果映射 ResultMap Association Collection</title>
      <link href="/2017/06/19/20170619_Mybatis/"/>
      <url>/2017/06/19/20170619_Mybatis/</url>
      
        <content type="html"><![CDATA[<p>转自 <a href="http://blog.csdn.net/ilovejava_2010/article/details/8180521" target="_blank" rel="noopener">http://blog.csdn.net/ilovejava_2010/article/details/8180521</a></p><h1 id="高级结果映射"><a href="#高级结果映射" class="headerlink" title="高级结果映射"></a>高级结果映射</h1><blockquote><p>MyBatis的创建基于这样一个思想：数据库并不是您想怎样就怎样的。虽然我们希望所有的数据库遵守第三范式或BCNF（修正的第三范式），但它们不是。如果有一个数据库能够完美映射到所有应用程序，也将是非常棒的，但也没有。结果集映射就是MyBatis为解决这些问题而提供的解决方案。例如，我们如何映射下面这条语句？</p></blockquote><a id="more"></a><pre><code>&lt;!-- Very Complex Statement --&gt;  &lt;select id=&quot;selectBlogDetails&quot; parameterType=&quot;int&quot; resultMap=&quot;detailedBlogResultMap&quot;&gt;  select  B.id as blog_id,  B.title as blog_title,  B.author_id as blog_author_id,  A.id as author_id,  A.username as author_username,  A.password as author_password,  A.email as author_email,  A.bio as author_bio,  A.favourite_section as author_favourite_section,  P.id as post_id,  P.blog_id as post_blog_id,  P.author_id as post_author_id,  P.created_on as post_created_on,  P.section as post_section,  P.subject as post_subject,  P.draft as draft,  P.body as post_body,  C.id as comment_id,  C.post_id as comment_post_id,  C.name as comment_name,  C.comment as comment_text,  T.id as tag_id,  T.name as tag_name  from Blog B  left outer join Author A on B.author_id = A.id  left outer join Post P on B.id = P.blog_id  left outer join Comment C on P.id = C.post_id  left outer join Post_Tag PT on PT.post_id = P.id  left outer join Tag T on PT.tag_id = T.id  where B.id = #{id}  &lt;/select&gt;  &lt;wbr&gt;  </code></pre><blockquote><p>您可能想要把它映射到一个智能的对象模型，包括由一个作者写的一个博客，有许多文章（Post，帖子），每个文章由0个或者多个评论和标签。下面是一个复杂ResultMap 的完整例子（假定作者、博客、文章、评论和标签都是别名）。仔细看看这个例子，但是不用太担心，我们会一步步地来分析，一眼看上去可能让人沮丧，但是实际上非常简单的</p></blockquote><pre><code>&lt;!-- Very Complex Result Map --&gt;  &lt;resultMap id=&quot;detailedBlogResultMap&quot; type=&quot;Blog&quot;&gt;  &lt;constructor&gt;  &lt;idArg column=&quot;blog_id&quot; javaType=&quot;int&quot;/&gt;  &lt;/constructor&gt;  &lt;result property=&quot;title&quot; column=&quot;blog_title&quot;/&gt;  &lt;association property=&quot;author&quot; column=&quot;blog_author_id&quot; javaType=&quot; Author&quot;&gt;  &lt;id property=&quot;id&quot; column=&quot;author_id&quot;/&gt;  &lt;result property=&quot;username&quot; column=&quot;author_username&quot;/&gt;  &lt;result property=&quot;password&quot; column=&quot;author_password&quot;/&gt;  &lt;result property=&quot;email&quot; column=&quot;author_email&quot;/&gt;  &lt;result property=&quot;bio&quot; column=&quot;author_bio&quot;/&gt;  &lt;result property=&quot;favouriteSection&quot; column=&quot;author_favourite_section&quot;/&gt;  &lt;/association&gt;  &lt;collection property=&quot;posts&quot; ofType=&quot;Post&quot;&gt;  &lt;id property=&quot;id&quot; column=&quot;post_id&quot;/&gt;  &lt;result property=&quot;subject&quot; column=&quot;post_subject&quot;/&gt;  &lt;association property=&quot;author&quot; column=&quot;post_author_id&quot; javaType=&quot;Author&quot;/&gt;  &lt;collection property=&quot;comments&quot; column=&quot;post_id&quot; ofType=&quot; Comment&quot;&gt;  &lt;id property=&quot;id&quot; column=&quot;comment_id&quot;/&gt;  &lt;/collection&gt;  &lt;collection property=&quot;tags&quot; column=&quot;post_id&quot; ofType=&quot; Tag&quot; &gt;  &lt;id property=&quot;id&quot; column=&quot;tag_id&quot;/&gt;  &lt;/collection&gt;  &lt;discriminator javaType=&quot;int&quot; column=&quot;draft&quot;&gt;  &lt;case value=&quot;1&quot; resultType=&quot;DraftPost&quot;/&gt;  &lt;/discriminator&gt;  &lt;/collection&gt;  &lt;/resultMap&gt; &lt;wbr&gt;  </code></pre><p>这个resultMap 的元素的子元素比较多，讨论起来比较宽泛。下面我们从概念上概览一下这个resultMap的元素。</p><ul><li>resultMap<ul><li>constructor–实例化的时候通过构造器将结果集注入到类中<ul><li>oidArg– ID 参数; 将结果集标记为ID，以方便全局调用</li><li>oarg–注入构造器的结果集</li></ul></li><li>id–结果集ID，将结果集标记为ID，以方便全局调用</li><li>result–注入一个字段或者javabean属性的结果</li><li>association–复杂类型联合;许多查询结果合成这个类型<ul><li>嵌套结果映射– associations能引用自身,或者从其它地方引用</li></ul></li><li>collection–复杂类型集合<ul><li>嵌套结果映射– collections能引用自身,或者从其它地方引用</li></ul></li><li>discriminator–使用一个结果值以决定使用哪个resultMap<ul><li>ocase–基于不同值的结果映射</li><li>§嵌套结果映射–case也能引用它自身, 所以也能包含这些同样的元素。它也可以从外部引用resultMap</li></ul></li></ul></li></ul><blockquote><p>最佳实践:逐步地生成resultMap，单元测试对此非常有帮助。如果您尝试一下子就生成像上面这样巨大的resultMap，可能会出错，并且工作起来非常吃力。从简单地开始，再一步步地扩展，并且进行单元测试。使用框架开发有一个缺点，它们有时像是一个黑合。为了确保达到您所预想的行为，最好的方式就是进行单元测试。这对提交bugs 也非常有用。</p></blockquote><p>下一节，我们一步步地查看这些细节。</p><hr><h3 id="id-result元素"><a href="#id-result元素" class="headerlink" title="id, result元素"></a>id, result元素</h3><pre><code>&lt;id property=&quot;id&quot; column=&quot;post_id&quot;/&gt;&lt;result property=&quot;subject&quot; column=&quot;post_subject&quot;/&gt;</code></pre><blockquote><p>这是最基本的结果集映射。id 和result 将列映射到属性或简单的数据类型字段(String, int, double, Date等)。<br>这两者唯一不同的是，在比较对象实例时id 作为结果集的标识属性。这有助于提高总体性能，特别是应用缓存和嵌套结果映射的时候。</p></blockquote><p>Id、result属性如下：</p><table><thead><tr><th>Attribute</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td>property</td><td style="text-align:center">映射数据库列的字段或属性。如果JavaBean 的属性与给定的名称匹配，就会使用匹配的名字。<br>否则，MyBatis 将搜索给定名称的字段。两种情况下您都可以使用逗点的属性形式。比如，您可以映射到“username”，也可以映射到“address.street.number”。</td></tr><tr><td>column</td><td style="text-align:center">数据库的列名或者列标签别名。与传递给resultSet.getString(columnName)的参数名称相同。</td></tr><tr><td>javaType</td><td style="text-align:center">完整Java类名或别名(参考上面的内置别名列表)。<br>如果映射到一个JavaBean，那MyBatis 通常会自行检测到。然而，如果映射到一个HashMap，<br>那您应该明确指定javaType 来确保所需行为</td></tr><tr><td>jdbcType</td><td style="text-align:center">这张表下面支持的JDBC类型列表列出的JDBC类型。<br>这个属性只在insert，update 或delete 的时候针对允许空的列有用。JDBC 需要这项，但MyBatis 不需要。<br>如果您直接编写JDBC代码，在允许为空值的情况下需要指定这个类型。</td></tr><tr><td>typeHandler</td><td style="text-align:center">我们已经在文档中讨论过默认类型处理器。<br>使用这个属性可以重写默认类型处理器。它的值可以是一个TypeHandler实现的完整类名，也可以是一个类型别名。</td></tr></tbody></table><blockquote><p>支持的JDBC类型 MyBatis支持如下的JDBC类型：</p></blockquote><img src="/2017/06/19/20170619_Mybatis/blog_mybatis.png" title="图片标题"><blockquote><p>Constructor元素</p></blockquote><pre><code>&lt;constructor&gt;    &lt;idArg column=&quot;id&quot; javaType=&quot;int&quot;/&gt;    &lt;arg column=”username” javaType=”String”/&gt;&lt;/constructor&gt;</code></pre><p>当属性与DTO，或者与您自己的域模型一起工作的时候，许多场合要用到不变类。通常，包含引用，或者查找的数据很少或者数据不会改变的的表，适合映射到不变类中。构造器注入允许您在类实例化后给类设值，这不需要通过public方法。MyBatis同样也支持private属性和JavaBeans的私有属性达到这一点，但是一些用户可能更喜欢使用构造器注入。构造器元素可以做到这点。</p><pre><code>考虑下面的构造器：public class User {    //…    public User(int id, String username) {        //…    }    //…}</code></pre><p>为了将结果注入构造器，MyBatis需要使用它的参数类型来标记构造器。Java没有办法通过参数名称来反射获得。因此当创建constructor 元素，确保参数是按顺序的并且指定了正确的类型。</p><pre><code>&lt;constructor&gt;    &lt;idArg column=&quot;id&quot; javaType=&quot;int&quot;/&gt;    &lt;arg column=”username” javaType=”String”/&gt;&lt;/constructor&gt;</code></pre><p>其它的属性与规则与id、result元素的一样。</p><table><thead><tr><th>Attribute</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td>column</td><td style="text-align:center">数据库的列名或者列标签别名。<br>与传递给resultSet.getString(columnName)的参数名称相同。</td></tr><tr><td>javaType</td><td style="text-align:center">完整Java类名或别名(参考上面的内置别名列表)。<br>如果映射到一个JavaBean，那MyBatis 通常会自行检测到。<br>然而，如果映射到一个HashMap，那您应该明确指定javaType 来确保所需行为</td></tr><tr><td>jdbcType</td><td style="text-align:center">这张表下面支持的JDBC类型列表列出的JDBC类型。<br>这个属性只在insert，update 或delete 的时候针对允许空的列有用。<br>JDBC 需要这项，但MyBatis 不需要。<br>如果您直接编写JDBC代码，在允许为空值的情况下需要指定这个类型。</td></tr><tr><td>typeHandler</td><td style="text-align:center">我们已经在文档中讨论过默认类型处理器。<br>使用这个属性可以重写默认类型处理器。它的值可以是一个TypeHandler实现的完整类名，也可以是一个类型别名。</td></tr></tbody></table><blockquote><p>Association元素</p></blockquote><pre><code>&lt;association property=&quot;author&quot; column=&quot;blog_author_id&quot; javaType=&quot; Author&quot;&gt;    &lt;id property=&quot;id&quot; column=&quot;author_id&quot;/&gt;    &lt;result property=&quot;username&quot; column=&quot;author_username&quot;/&gt;&lt;/association&gt;</code></pre><p>Association元素处理“has-one”（一对一）这种类型关系。比如在我们的例子中，一个Blog有一个Author。联合映射与其它的结果集映射工作方式差不多，指定property、column、javaType（通常MyBatis会自动识别）、jdbcType（如果需要）、typeHandler。</p><p>不同的地方是您需要告诉MyBatis 如何加载一个联合查询。MyBatis使用两种方式来加载：</p><ul><li>Nested Select:通过执行另一个返回预期复杂类型的映射SQL语句（即引用外部定义好的SQL语句块）。</li><li>Nested Results:通过嵌套结果映射（nested result mappings）来处理联接结果集（joined results）的重复子集。</li></ul><p>首先，让我们检查一下元素属性。正如您看到的，它不同于普通只有select和resultMap属性的结果映射。</p><table><thead><tr><th>Attribute</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td>property</td><td style="text-align:center">映射数据库列的字段或属性。如果JavaBean 的属性与给定的名称匹配，就会使用匹配的名字。<br>否则，MyBatis 将搜索给定名称的字段。两种情况下您都可以使用逗点的属性形式。<br>比如，您可以映射到“username”，也可以映射到“address.street.number”。</td></tr><tr><td>column</td><td style="text-align:center">数据库的列名或者列标签别名。<br>与传递给resultSet.getString(columnName)的参数名称相同。</td></tr><tr><td>javaType</td><td style="text-align:center">完整Java类名或别名(参考上面的内置别名列表)。如果映射到一个JavaBean，那MyBatis 通常会自行检测到。<br>然而，如果映射到一个HashMap，那您应该明确指定javaType 来确保所需行为</td></tr><tr><td>jdbcType</td><td style="text-align:center">这张表下面支持的JDBC类型列表列出的JDBC类型。这个属性只在insert，update 或delete 的时候针对允许空的列有用。<br> JDBC 需要这项，但MyBatis 不需要。<br> 如果您直接编写JDBC代码，在允许为空值的情况下需要指定这个类型。</td></tr><tr><td>typeHandler</td><td style="text-align:center">我们已经在文档中讨论过默认类型处理器。使用这个属性可以重写默认类型处理器。<br>它的值可以是一个TypeHandler实现的完整类名，也可以是一个类型别名。</td></tr><tr><td>select 联合嵌套选择（Nested Select for Association）</td><td style="text-align:center">通过这个属性，通过ID引用另一个加载复杂类型的映射语句。<br>从指定列属性中返回的值，将作为参数设置给目标select 语句。表格下方将有一个例子。<br>注意：在处理组合键时，您可以使用column=”{prop1=col1,prop2=col2}”这样的语法，<br>设置多个列名传入到嵌套语句。这就会把prop1和prop2设置到目标嵌套语句的参数对象中。</td></tr></tbody></table><p> 例如:  </p><pre><code>&lt;resultMap id=”blogResult” type=”Blog”&gt;      &lt;association property=&quot;author&quot; column=&quot;blog_author_id&quot; javaType=&quot;Author&quot;          select=”selectAuthor”/&gt;  &lt;/resultMap&gt;  &lt;select id=”selectBlog” parameterType=”int” resultMap=”blogResult”&gt;  SELECT * FROM BLOG WHERE ID = #{id}  &lt;/select&gt;  &lt;select id=”selectAuthor” parameterType=”int” resultType=&quot;Author&quot;&gt;  SELECT * FROM AUTHOR WHERE ID = #{id}  &lt;/select&gt;  &lt;wbr&gt;  </code></pre><hr><p>我们使用两个select语句：一个用来加载Blog，另一个用来加载Author。Blog的resultMap 描述了使用“selectAuthor”语句来加载author的属性。<br>如果列名和属性名称相匹配的话，所有匹配的属性都会自动加载。</p><pre><code>译者注：上面的例子，首先执行&lt;select id=“selectBlog”&gt;，执行结果存放到&lt;resultMap id=“blogResult”&gt;结果映射中。“blogResult”是一个Blog类型，从&lt;select id=“selectBlog”&gt;查出的数据都会自动赋值给”blogResult”的与列名匹配的属性，这时blog_id，title等就被赋值了。同时“blogResult”还有一个关联属性&quot;Author&quot;，执行嵌套查询select=”selectAuthor”后，Author对象的属性id，username，password，email，bio也被赋于数据库匹配的值。Blog{blog_id;title;Author author{id;username;password;email;bio;}}</code></pre><blockquote><p>虽然这个方法简单，但是对于大数据集或列表查询，就不尽如人意了。这个问题被称为“N+1 选择问题”（N+1 Selects Problem）。概括地说，N+1选择问题是这样产生的：</p></blockquote><ul><li>您执行单条SQL语句去获取一个列表的记录( “+1”)。</li><li>对列表中的每一条记录，再执行一个联合select 语句来加载每条记录更加详细的信息(“N”)。<br>这个问题会导致成千上万的SQL语句的执行，因此并非总是可取的。</li></ul><p>上面的例子，MyBatis可以使用延迟加载这些查询，因此这些查询立马可节省开销。然而，如果您加载一个列表后立即迭代访问嵌套的数据，这将会调用所有的延迟加载，因此性能会变得非常糟糕。<br>鉴于此，这有另外一种方式。<br>联合嵌套结果集（Nested Results for Association)</p><blockquote><p>resultMap<br>一个可以映射联合嵌套结果集到一个适合的对象视图上的ResultMap 。这是一个替代的方式去调用另一个select 语句。它允许您去联合多个表到一个结果集里。这样的结果集可能包括冗余的、重复的需要分解和正确映射到一个嵌套对象视图的数据组。简言之，MyBatis 让您把结果映射‘链接’到一起，用来处理嵌套结果。举个例子会更好理解，例子在表格下方。</p></blockquote><p>您已经在上面看到了一个非常复杂的嵌套联合的例子，接下的演示的例子会更简单一些。我们把Blog和Author表联接起来查询，而不是执行分开的查询语句：</p><pre><code>&lt;select id=&quot;selectBlog&quot; parameterType=&quot;int&quot; resultMap=&quot;blogResult&quot;&gt;  select  B.id as blog_id,  B.title as blog_title,  B.author_id as blog_author_id,  A.id as author_id,  A.username as author_username,  A.password as author_password,  A.email as author_email,  A.bio as author_bio  from Blog B left outer join Author A on B.author_id = A.id  where B.id = #{id}  &lt;/select&gt; &lt;wbr&gt;  注意到这个连接（join），要确保所有的别名都是唯一且无歧义的。这使映射容易多了，现在我们来映射结果集：&lt;resultMap id=&quot;blogResult&quot; type=&quot;Blog&quot;&gt;  &lt;id property=”blog_id” column=&quot;id&quot; /&gt;  &lt;result property=&quot;title&quot; column=&quot;blog_title&quot;/&gt;  &lt;association property=&quot;author&quot; column=&quot;blog_author_id&quot; javaType=&quot;Author&quot;  resultMap=”authorResult”/&gt;  &lt;/resultMap&gt;  &lt;resultMap id=&quot;authorResult&quot; type=&quot;Author&quot;&gt;  &lt;id property=&quot;id&quot; column=&quot;author_id&quot;/&gt;  &lt;result property=&quot;username&quot; column=&quot;author_username&quot;/&gt;  &lt;result property=&quot;password&quot; column=&quot;author_password&quot;/&gt;  &lt;result property=&quot;email&quot; column=&quot;author_email&quot;/&gt;  &lt;result property=&quot;bio&quot; column=&quot;author_bio&quot;/&gt;  &lt;/resultMap&gt; &lt;wbr&gt;  </code></pre><p>在上面的例子中，您会看到Blog的作者（“author”）联合一个“authorResult”结果映射来加载Author实例。<br><strong>重点提示</strong> :id元素在嵌套结果映射中扮演了非常重要的角色，您应该总是指定一个或多个属性来唯一标识这个结果集。事实上，如果您没有那样做，MyBatis也会工作，但是会导致严重性能开销。选择尽量少的属性来唯一标识结果，而使用主键是最明显的选择（即使是复合主键）。<br>上面的例子使用一个扩展的resultMap 元素来联合映射。这可使Author结果映射可重复使用。然后，如果您不需要重用它，您可以直接嵌套这个联合结果映射。下面例子就是使用这样的方式： </p><pre><code>&lt;resultMap id=&quot;blogResult&quot; type=&quot;Blog&quot;&gt;  &lt;id property=”blog_id” column=&quot;id&quot; /&gt;  &lt;result property=&quot;title&quot; column=&quot;blog_title&quot;/&gt;  &lt;association property=&quot;author&quot; column=&quot;blog_author_id&quot; javaType=&quot;Author&quot;&gt;  &lt;id property=&quot;id&quot; column=&quot;author_id&quot;/&gt;  &lt;result property=&quot;username&quot; column=&quot;author_username&quot;/&gt;  &lt;result property=&quot;password&quot; column=&quot;author_password&quot;/&gt;  &lt;result property=&quot;email&quot; column=&quot;author_email&quot;/&gt;  &lt;result property=&quot;bio&quot; column=&quot;author_bio&quot;/&gt;  &lt;/association&gt;  &lt;/resultMap&gt; &lt;wbr&gt;  </code></pre><p>在上面的例子中您已经看到如果处理“一对一”（“has one”）类型的联合查询。但是对于“一对多”（“has many”）的情况如果处理呢？这个问题在下一节讨论。</p><h3 id="Collection元素"><a href="#Collection元素" class="headerlink" title="Collection元素"></a>Collection元素</h3><pre><code>&lt;collection property=&quot;posts&quot; ofType=&quot;domain.blog.Post&quot;&gt;  &lt;id property=&quot;id&quot; column=&quot;post_id&quot;/&gt;  &lt;result property=&quot;subject&quot; column=&quot;post_subject&quot;/&gt;  &lt;result property=&quot;body&quot; column=&quot;post_body&quot;/&gt;  &lt;/collection&gt;  &lt;wbr&gt;</code></pre><blockquote><p>collection元素的作用差不多和association元素的作用一样。事实上，它们非常相似，以至于再对相似点进行描述会显得冗余，因此我们只关注它们的不同点。</p></blockquote><p>继续我们上面的例子，一个Blog只有一个Author。但一个Blog有许多帖子（文章）。在Blog类中，会像下面这样定义相应属性： </p><pre><code>private List&lt;Post&gt; posts;</code></pre><blockquote><p>映射一个嵌套结果集到一个列表，我们使用collection元素。就像association 元素那样，我们使用嵌套查询，或者从连接中嵌套结果集。<br>集合嵌套选择（Nested Select for Collection）</p></blockquote><p>首先我们使用嵌套选择来加载Blog的文章。 </p><pre><code>&lt;resultMap id=”blogResult” type=”Blog”&gt;  &lt;collection property=&quot;posts&quot; javaType=”ArrayList” column=&quot;blog_id&quot;  ofType=&quot;Post&quot; select=”selectPostsForBlog”/&gt;  &lt;/resultMap&gt;  &lt;select id=”selectBlog” parameterType=”int” resultMap=”blogResult”&gt;  SELECT * FROM BLOG WHERE ID = #{id}  &lt;/select&gt;  &lt;select id=”selectPostsForBlog” parameterType=”int” resultType=&quot;Author&quot;&gt;  SELECT * FROM POST WHERE BLOG_ID = #{id}  &lt;/select&gt; &lt;wbr&gt;  </code></pre><p>一看上去这有许多东西需要注意，但大部分看起与我们在association元素中学过的相似。首先，您会注意到我们使用了collection元素，然后会注意到一个新的属性“ofType”。这个元素是用来区别JavaBean属性（或者字段）类型和集合所包括的类型。因此您会读到下面这段代码。</p><pre><code>&lt;collection property=&quot;posts&quot; javaType=”ArrayList” column=&quot;blog_id&quot;ofType=&quot;Post&quot; select=”selectPostsForBlog”/&gt;</code></pre><ul><li>理解为:“一个名为posts，类型为Post的ArrayList集合（A collection of posts in an ArrayList of type Post）” 。</li></ul><p>javaType属性不是必须的，通常MyBatis 会自动识别，所以您通常可以简略地写成：</p><pre><code>&lt;collection property=&quot;posts&quot; column=&quot;blog_id&quot; ofType=&quot;Post&quot;select=”selectPostsForBlog”/&gt;</code></pre><h4 id="集合的嵌套结果集（Nested-Results-for-Collection）"><a href="#集合的嵌套结果集（Nested-Results-for-Collection）" class="headerlink" title="集合的嵌套结果集（Nested Results for Collection）"></a>集合的嵌套结果集（Nested Results for Collection）</h4><p>这时候，您可能已经猜出嵌套结果集是怎样工作的了，因为它与association非常相似，只不过多了一个属性“ofType”。</p><p>让我们看下这个SQL： </p><pre><code>&lt;select id=&quot;selectBlog&quot; parameterType=&quot;int&quot; resultMap=&quot;blogResult&quot;&gt;  select  B.id as blog_id,  B.title as blog_title,  B.author_id as blog_author_id,  P.id as post_id,  P.subject as post_subject,  P.body as post_body,  from Blog B  left outer join Post P on B.id = P.blog_id  where B.id = #{id}  &lt;/select&gt;  &lt;wbr&gt;  </code></pre><p>同样，我们把Blog和Post两张表连接在一起，并且也保证列标签名在映射的时候是唯一且无歧义的。现在将Blog和Post的集合映射在一起是多么简单：</p><pre><code>&lt;resultMap id=&quot;blogResult&quot; type=&quot;Blog&quot;&gt;  &lt;id property=”id” column=&quot;blog_id&quot; /&gt;  &lt;result property=&quot;title&quot; column=&quot;blog_title&quot;/&gt;  &lt;collection property=&quot;posts&quot; ofType=&quot;Post&quot;&gt;  &lt;id property=&quot;id&quot; column=&quot;post_id&quot;/&gt;  &lt;result property=&quot;subject&quot; column=&quot;post_subject&quot;/&gt;  &lt;result property=&quot;body&quot; column=&quot;post_body&quot;/&gt;  &lt;/collection&gt;  &lt;/resultMap&gt;  </code></pre><p>再次强调一下，id 元素是非常重要的。如果您忘了或者不知道id 元素的作用，请先读一下上面association 一节。</p><p>如果希望结果映射有更好的可重用性，您可以使用下面的方式：</p><pre><code>&lt;resultMap id=&quot;blogResult&quot; type=&quot;Blog&quot;&gt;  &lt;id property=”id” column=&quot;blog_id&quot; /&gt;  &lt;result property=&quot;title&quot; column=&quot;blog_title&quot;/&gt;  &lt;collection property=&quot;posts&quot; ofType=&quot;Post&quot; resultMap=”blogPostResult”/&gt;  &lt;/resultMap&gt;  &lt;resultMap id=&quot;blogPostResult&quot; type=&quot;Post&quot;&gt;  &lt;id property=&quot;id&quot; column=&quot;post_id&quot;/&gt;  &lt;result property=&quot;subject&quot; column=&quot;post_subject&quot;/&gt;  &lt;result property=&quot;body&quot; column=&quot;post_body&quot;/&gt;  &lt;/resultMap&gt;  </code></pre><ul><li>Note:在您的映射中没有深度、宽度、联合和集合数目的限制。但应该谨记，在进行映射的时候也要考虑性能的因素。应用程序的单元测试和性能测试帮助您发现最好的方式可能要花很长时间。但幸运的是，MyBatis允许您以后可以修改您的想法，这时只需要修改少量代码就行了。</li></ul><p>关于高级联合和集合映射是一个比较深入的课题，文档只能帮您了解到这里，多做一些实践，一切将很快变得容易理解。</p><h3 id="Discriminator元素"><a href="#Discriminator元素" class="headerlink" title="Discriminator元素"></a>Discriminator元素</h3><pre><code>&lt;discriminator javaType=&quot;int&quot; column=&quot;draft&quot;&gt;&lt;case value=&quot;1&quot; resultType=&quot;DraftPost&quot;/&gt;&lt;/discriminator&gt;</code></pre><blockquote><p>有时候一条数据库查询可能会返回包括各种不同的数据类型的结果集。Discriminator（识别器）元素被设计来处理这种情况，以及其它像类继承层次情况。识别器非常好理解，它就像java里的switch语句。</p></blockquote><p>Discriminator定义要指定column和javaType属性。列是MyBatis将要取出进行比较的值，javaType用来确定适当的测试是否正确运行（虽然String在大部分情况下都可以工作），例：  </p><pre><code>&lt;resultMap id=&quot;vehicleResult&quot; type=&quot;Vehicle&quot;&gt;  &lt;id property=”id” column=&quot;id&quot; /&gt;  &lt;result property=&quot;vin&quot; column=&quot;vin&quot;/&gt;  &lt;result property=&quot;year&quot; column=&quot;year&quot;/&gt;  &lt;result property=&quot;make&quot; column=&quot;make&quot;/&gt;  &lt;result property=&quot;model&quot; column=&quot;model&quot;/&gt;  &lt;result property=&quot;color&quot; column=&quot;color&quot;/&gt;  &lt;discriminator javaType=&quot;int&quot; column=&quot;vehicle_type&quot;&gt;  &lt;case value=&quot;1&quot; resultMap=&quot;carResult&quot;/&gt;  &lt;case value=&quot;2&quot; resultMap=&quot;truckResult&quot;/&gt;  &lt;case value=&quot;3&quot; resultMap=&quot;vanResult&quot;/&gt;  &lt;case value=&quot;4&quot; resultMap=&quot;suvResult&quot;/&gt;  &lt;/discriminator&gt;  &lt;/resultMap&gt;  &lt;wbr&gt; </code></pre><p>在这个例子中，MyBatis将会从结果集中取出每条记录，然后比较它的vehicle type的值。如果匹配任何discriminator中的case，它将使用由case指定的resultMap。这是排它性的，换句话说，其它的case的resultMap将会被忽略（除非使用我们下面说到的extended）。如果没有匹配到任何case，MyBatis只是简单的使用定义在discriminator块外面的resultMap。所以，如果carResult像下面这样定义：</p><pre><code>&lt;resultMap id=&quot;carResult&quot; type=&quot;Car&quot;&gt;&lt;result property=”doorCount” column=&quot;door_count&quot; /&gt;&lt;/resultMap&gt;</code></pre><p>那么，只有doorCount属性会被加载。这样做是为了与识别器cases群组完全独立开来，哪怕它与上一层的resultMap 一点关系都没有。在刚才的例子里我们当然知道cars和vehicles的关系，a Car is-a Vehicle。因此，我们也要把其它属性加载进来。我们要稍稍改动一下resultMap：</p><pre><code>&lt;resultMap id=&quot;carResult&quot; type=&quot;Car&quot;extends=”vehicleResult”&gt;&lt;result property=”doorCount” column=&quot;door_count&quot; /&gt;&lt;/resultMap&gt;</code></pre><p>现在，vehicleResult和carResult的所有属性都会被加载。<br>可能有人会认为这样扩展映射定义有一点单调了，所以还有一种可选的更加简单明了的映射风格语法。例如：</p><pre><code>&lt;resultMap id=&quot;vehicleResult&quot; type=&quot;Vehicle&quot;&gt;  &lt;id property=”id” column=&quot;id&quot; /&gt;  &lt;result property=&quot;vin&quot; column=&quot;vin&quot;/&gt;  &lt;result property=&quot;year&quot; column=&quot;year&quot;/&gt;  &lt;result property=&quot;make&quot; column=&quot;make&quot;/&gt;  &lt;result property=&quot;model&quot; column=&quot;model&quot;/&gt;  &lt;result property=&quot;color&quot; column=&quot;color&quot;/&gt;  &lt;discriminator javaType=&quot;int&quot; column=&quot;vehicle_type&quot;&gt;  &lt;case value=&quot;1&quot; resultType=&quot;carResult&quot;&gt;  &lt;result property=”doorCount” column=&quot;door_count&quot; /&gt;  &lt;/case&gt;  &lt;case value=&quot;2&quot; resultType=&quot;truckResult&quot;&gt;  &lt;result property=”boxSize” column=&quot;box_size&quot; /&gt;  &lt;result property=”extendedCab” column=&quot;extended_cab&quot; /&gt;  &lt;/case&gt;  &lt;case value=&quot;3&quot; resultType=&quot;vanResult&quot;&gt;  &lt;result property=”powerSlidingDoor” column=&quot;power_sliding_door&quot; /&gt;  &lt;/case&gt;  &lt;case value=&quot;4&quot; resultType=&quot;suvResult&quot;&gt;  &lt;result property=”allWheelDrive” column=&quot;all_wheel_drive&quot; /&gt;  &lt;/case&gt;  &lt;/discriminator&gt;  &lt;/resultMap&gt; &lt;wbr&gt;  </code></pre><ul><li>记住：对于这么多的结果映射，如果您不指定任何的结果集，那么MyBatis 会自动地将列名与属性相匹配。所以上面所举的例子比实际中需要的要详细。尽管如此，大部分数据库有点复杂，并且它并不是所有情况都是完全可以适用的。</li></ul><h4 id="Cache元素"><a href="#Cache元素" class="headerlink" title="Cache元素"></a>Cache元素</h4><blockquote><p>MyBatis包含一个强大的、可配置、可定制的查询缓存机制。MyBatis 3 的缓存实现有了许多改进，使它更强大更容易配置。默认的情况，缓存是没有开启，除了会话缓存以外，它可以提高性能，且能解决循环依赖。开启二级缓存，您只需要在SQL映射文件中加入简单的一行：</p></blockquote><pre><code>&lt;cache/&gt;</code></pre><p>这句简单的语句作用如下：</p><ul><li><p>所有映射文件里的select语句的结果都会被缓存。</p></li><li><p>所有映射文件里的insert、update和delete语句执行都会清空缓存。</p></li><li><p>缓存使用最近最少使用算法(LRU)来回收。</p></li><li><p>缓存不会被设定的时间所清空。</p></li><li><p>每个缓存可以存储1024 个列表或对象的引用（不管查询方法返回的是什么）。</p></li><li><p>缓存将作为“读/写”缓存，意味着检索的对象不是共享的且可以被调用者安全地修改，而不会被其它调用者或者线程干扰。</p></li></ul><p>所有这些特性都可以通过cache元素进行修改。例如：</p><pre><code>&lt;cacheeviction=&quot;FIFO&quot;flushInterval=&quot;60000&quot;size=&quot;512&quot;readOnly=&quot;true&quot;/&gt;</code></pre><p>这种高级的配置创建一个每60秒刷新一次的FIFO 缓存，存储512个结果对象或列表的引用，并且返回的对象是只读的。因此在不用的线程里的调用者修改它们可能会引用冲突。</p><p>可用的回收算法如下：</p><ul><li><p>LRU–最近最少使用：移出最近最长时间内都没有被使用的对象。</p></li><li><p>FIFO–先进先出：移除最先进入缓存的对象。</p></li><li><p>SOFT–软引用: 基于垃圾回收机制和软引用规则来移除对象（空间内存不足时才进行回收）。</p></li><li><p>WEAK–弱引用:基于垃圾回收机制和弱引用规则（垃圾回收器扫描到时即进行回收）。</p></li></ul><p>默认使用LRU。</p><blockquote><p>flushInterval：设置任何正整数，代表一个以毫秒为单位的合理时间。默认是没有设置，因此没有刷新间隔时间被使用，在语句每次调用时才进行刷新。</p></blockquote><blockquote><p>Size：属性可以设置为一个正整数，您需要留意您要缓存对象的大小和环境中可用的内存空间。默认是1024。</p></blockquote><blockquote><p>readOnly：属性可以被设置为true 或false。只读缓存将对所有调用者返回同一个实例。因此这些对象都不能被修改，这可以极大的提高性能。可写的缓存将通过序列化来返回一个缓存对象的拷贝。这会比较慢，但是比较安全。所以默认值是false。</p></blockquote><p>使用自定义缓存</p><p>除了上面已经定义好的缓存方式，您能够通过您自己的缓存实现来完全重写缓存行为，或者通过创建第三方缓存解决方案的适配器。</p><pre><code>&lt;cache type=”com.domain.something.MyCustomCache”/&gt;</code></pre><p>这个例子演示了如果自定义缓存实现。由type指定的类必须实现org.mybatis.cache.Cache接口。这个接口是MyBatis框架比较复杂的接口之一，先给个示例：</p><pre><code>public interface Cache {String getId();int getSize();void putObject(Object key, Object value);Object getObject(Object key);boolean hasKey(Object key);Object removeObject(Object key);void clear();ReadWriteLock getReadWriteLock();}</code></pre><p>要配置您的缓存，简单地添加一个公共的JavaBeans 属性到您的缓存实现中，然后通过cache 元素设置属性进行传递，下面示例，将在您的缓存实现上调用一个setCacheFile(String file)方法。</p><pre><code>&lt;cache type=”com.domain.something.MyCustomCache”&gt;&lt;property name=”cacheFile” value=”/tmp/my-custom-cache.tmp”/&gt;&lt;/cache&gt;</code></pre><p>您可以使用所有简单的JavaBeans属性，MyBatis会自动进行转换。</p><p>需要牢记的是一个缓存配置和缓存实例都绑定到一个SQL Map 文件命名空间。因此，所有的这个相同命名空间的语句也都和这个缓存绑定。语句可以修改如何与这个缓存相匹配，或者使用两个简单的属性来完全排除它们自己。默认情况下，语句像下面这样来配置：</p><pre><code>&lt;select ... flushCache=”false” useCache=”true”/&gt;&lt;insert ... flushCache=”true”/&gt;&lt;update ... flushCache=”true”/&gt;&lt;delete ... flushCache=”true”/&gt; </code></pre><p>因为有默认值，所以您不需要使用这种方式明确地配置这些语句。如果您想改变默认的动作，只需要设置flushCache和useCache 属性即可。举个例子来说，在许多的场合下您可能排除缓存中某些特定的select语句。或者您想用select语句清空缓存。同样的，您也可能有一些update 语句在执行的时候不需要清空缓存。</p><h4 id="cache-ref元素"><a href="#cache-ref元素" class="headerlink" title="cache-ref元素"></a>cache-ref元素</h4><p>回想上一节，我们仅仅只是讨论在某一个命名空间里使用或者刷新缓存。但有可能您想要在不同的命名空间里共享同一个缓存配置或者实例。在这种情况下，您就可以使用cache-ref 元素来引用另外一个缓存。</p><pre><code>&lt;cache-ref namespace=”com.someone.application.data.SomeMapper”/&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 框架相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis入门学习</title>
      <link href="/2017/06/16/20170616_Mybatis/"/>
      <url>/2017/06/16/20170616_Mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-MyBatis-？"><a href="#什么是-MyBatis-？" class="headerlink" title="什么是 MyBatis ？"></a>什么是 MyBatis ？</h2><blockquote><p>官方文档: <a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/zh/index.html</a></p></blockquote><blockquote><p>MyBatis 一个基于Java的持久层框架; 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将代理接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p></blockquote><h6 id="与hibernate不同的是-mybatis是通过xml映射文件实现代理接口来实现操作数据库的功能"><a href="#与hibernate不同的是-mybatis是通过xml映射文件实现代理接口来实现操作数据库的功能" class="headerlink" title="与hibernate不同的是: mybatis是通过xml映射文件实现代理接口来实现操作数据库的功能"></a><em>与hibernate不同的是: mybatis是通过xml映射文件实现代理接口来实现操作数据库的功能</em></h6><a id="more"></a><h3 id="基本的步骤"><a href="#基本的步骤" class="headerlink" title="基本的步骤:"></a>基本的步骤:</h3><h4 id="1-引入dependency"><a href="#1-引入dependency" class="headerlink" title="1. 引入dependency"></a>1. 引入dependency</h4><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;    &lt;version&gt;3.4.1&lt;/version&gt;&lt;/dependency&gt;</code></pre><hr><h4 id="2-mybatis核心配置文件-在resources目录下的-mybatis-conf-xml"><a href="#2-mybatis核心配置文件-在resources目录下的-mybatis-conf-xml" class="headerlink" title="2. mybatis核心配置文件 #在resources目录下的 mybatis/conf.xml"></a>2. mybatis核心配置文件 #在resources目录下的 mybatis/conf.xml</h4><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;!--可以读取数据库配置文件 用EL表达式获取参数--&gt;    &lt;!--&lt;properties resource=&quot;classpath:mybatis/db.properties&quot;/&gt;--&gt;    &lt;!--        development : 开发模式        work : 工作模式     --&gt;    &lt;environments default=&quot;development&quot;&gt;        &lt;environment id=&quot;development&quot;&gt;            &lt;transactionManager type=&quot;JDBC&quot;/&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;                &lt;property name=&quot;url&quot;                          value=&quot;jdbc:mysql://localhost:3306/test?zeroDateTimeBehavior=convertToNull&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&quot;/&gt;                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;                &lt;property name=&quot;password&quot; value=&quot;fangshuoit&quot;/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;!--映射文件所在位置 不能使用通配符(和spring整合时候可以使用)--&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;com/mybatis/test1/pojo/MyUserMapper.xml&quot;/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><h2 id="如果需要-或者测试没日志-可以引入log4j的包和配置文件-方便测试"><a href="#如果需要-或者测试没日志-可以引入log4j的包和配置文件-方便测试" class="headerlink" title="如果需要(或者测试没日志)可以引入log4j的包和配置文件 方便测试"></a><em>如果需要(或者测试没日志)可以引入log4j的包和配置文件 方便测试</em></h2><h4 id="3-新建实体类–MyUser-java-对应数据库中表my-user"><a href="#3-新建实体类–MyUser-java-对应数据库中表my-user" class="headerlink" title="3. 新建实体类–MyUser.java 对应数据库中表my_user"></a>3. 新建实体类–MyUser.java 对应数据库中表my_user</h4><pre><code>//三个属性private int id;private String name;private int age;</code></pre><hr><h4 id="4-新建Mapper映射文件–MyUserMapper-xml-要和实体放到一个目录下"><a href="#4-新建Mapper映射文件–MyUserMapper-xml-要和实体放到一个目录下" class="headerlink" title="4. 新建Mapper映射文件–MyUserMapper.xml(要和实体放到一个目录下)"></a>4. 新建Mapper映射文件–MyUserMapper.xml(要和实体放到一个目录下)</h4><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.mybatis.test1.pojo.MyUserMapper&quot;&gt;    &lt;!--        根据id查询得到一个user对象 其中sql语句中的表名,查询参数名,where语句中 键都是数据库中表的写法, 要传入的参数占位符是书体属性名     --&gt;    &lt;select id=&quot;getUser&quot; parameterType=&quot;int&quot; resultType=&quot;com.mybatis.test1.pojo.MyUser&quot;&gt;        SELECT *        FROM my_user        WHERE id = #{id}    &lt;/select&gt;&lt;/mapper&gt;</code></pre><p><em>maven项目运行时找不到映射文件:Could not find resource;(原因是maven在构建的时候不会识别src下的配置文件,见生成的class目录)所以有两种方法解决</em></p><pre><code>1.在resources下新建目录,目录结构和java下的一致(因为需要保证映射文件和实体在同一个目录下),到时候生成的.class就会和配置文件放到一起,就可以找到了2.(推荐), 添加设置资源目录: 在pom的build下加入:            &lt;resources&gt;                &lt;resource&gt;                    &lt;directory&gt;src/main/java&lt;/directory&gt;                    &lt;includes&gt;                        &lt;include&gt;**/*.xml&lt;/include&gt;                    &lt;/includes&gt;                    &lt;filtering&gt;false&lt;/filtering&gt;                &lt;/resource&gt;            &lt;/resources&gt;</code></pre><hr><h4 id="5-可以测试啦-添加测试类–MainTest-java"><a href="#5-可以测试啦-添加测试类–MainTest-java" class="headerlink" title="5.可以测试啦: 添加测试类–MainTest.java"></a>5.可以测试啦: 添加测试类–MainTest.java</h4><pre><code>    private SqlSession util(){        //配置文件        String resource = &quot;mybatis/conf.xml&quot;;        //加载配置mybatis文件        InputStream input = MainTest.class.getClassLoader().getResourceAsStream(resource);//      Reader reader = Resources.getResourceAsReader(resource); //也可以使用这个加载配置        //构建sqlSession工厂        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(input);        //得到能执行映射文件中sql语句的sqlSession(等同于jdbc中的PreparedStatement)        SqlSession session = sqlSessionFactory.openSession(true);//设置自动提交事务        return session;    }    @Test    public void testSelect() {        SqlSession session = util();        //映射sql的标识符字符串(映射文件全类名 + 映射节点id)        String statement = &quot;com.mybatis.test1.pojo.MyUserMapper.getUser&quot;;        //执行sql语句返回结果        MyUser user = session.selectOne(statement, 12);//两个参数 statement和占位符要填写的参数        System.out.println(user);    }</code></pre><hr><h4 id="6-大功告成"><a href="#6-大功告成" class="headerlink" title="6. 大功告成 !"></a>6. 大功告成 !</h4><hr><h4 id="7-其他操作-CURD"><a href="#7-其他操作-CURD" class="headerlink" title="7. 其他操作 : CURD"></a>7. 其他操作 : CURD</h4><blockquote><p>增删改查实现方法, 1. 增加映射文件内容; </p></blockquote><pre><code>&lt;!--        插入一个用户    --&gt;    &lt;insert id=&quot;addUser&quot; parameterType=&quot;com.mybatis.test1.pojo.MyUser&quot;&gt;        INSERT INTO my_user (id, name, age) VALUES (#{id}, #{name}, #{age})    &lt;/insert&gt;    &lt;!--        根据id删除一个用户    --&gt;    &lt;delete id=&quot;delUser&quot; parameterType=&quot;int&quot;&gt;        DELETE FROM my_user        WHERE id = #{id}    &lt;/delete&gt;    &lt;!--        更新用户信息    --&gt;    &lt;update id=&quot;editUser&quot; parameterType=&quot;com.mybatis.test1.pojo.MyUser&quot;&gt;        UPDATE my_user        SET name = #{name}, age = #{age}        WHERE id = #{id}    &lt;/update&gt;    &lt;!--        根据id查询得到一个user对象     --&gt;    &lt;select id=&quot;getUser&quot; parameterType=&quot;int&quot; resultType=&quot;com.mybatis.test1.pojo.MyUser&quot;&gt;        SELECT *        FROM my_user        WHERE id = #{id}    &lt;/select&gt;    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.mybatis.test1.pojo.MyUser&quot;&gt;        SELECT *        FROM my_user    &lt;/select&gt;</code></pre><blockquote><p>2.调用sqlSession的各种方法(方法名基本上是个人都能看出来干嘛的,你就直接试); 比如</p></blockquote><pre><code>int result = session.delete(statement, 1);List&lt;MyUser&gt; users = session.selectList(statement);....</code></pre><hr><h4 id="8-基于接口的写法"><a href="#8-基于接口的写法" class="headerlink" title="8. 基于接口的写法:"></a>8. 基于接口的写法:</h4><blockquote><p>基于接口有两种具体实现 1.基于注解:不需要自己写实现类,实现类自己”生成”; 2:基于xml文件,需要把xml文件和接口放在同一个目录下</p></blockquote><h5 id="基于注解"><a href="#基于注解" class="headerlink" title="基于注解"></a>基于注解</h5><p>1.新建一个代理接口–MyUserMapper.java</p><pre><code>public interface MyUserMapper {    @Insert(&quot;INSERT INTO my_user (id, name, age) VALUES (#{id}, #{name}, #{age})&quot;)    public int add(MyUser user);    @Delete(&quot;DELETE FROM my_user WHERE id = #{id}&quot;)    public int del(int id);    @Update(&quot;UPDATE my_user SET name = #{name}, age = #{age} WHERE id = #{id}&quot;)    public int edit(MyUser user);    @Select(&quot;SELECT * FROM my_user WHERE id = #{id}&quot;)    public MyUser find(int id);    @Select(&quot;SELECT * FROM my_user&quot;)    public List&lt;MyUser&gt; getAll();}</code></pre><p>2.”注册”到mybatis配置文件–在conf.xml中mappers节点下添加</p><pre><code>&lt;mapper class=&quot;com.mybatis.test2.pojo.MyUserMapper&quot;/&gt;</code></pre><p>3.测试</p><pre><code>String resource = &quot;mybatis/conf.xml&quot;;InputStream input = MainTest.class.getClassLoader().getResourceAsStream(resource);SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(input);SqlSession session = sqlSessionFactory.openSession(true);//获取接口动态产生的实现类 再调用方法MyUserMapper myUserMapper = session.getMapper(MyUserMapper.class);MyUser user = myUserMapper.find(12);System.out.println(user);</code></pre><hr><h5 id="基于配置文件"><a href="#基于配置文件" class="headerlink" title="基于配置文件"></a>基于配置文件</h5><ol><li>和实现xml文件–MyUserMapper.java &amp; MyUserMapper.xml</li></ol><pre><code>public interface MyUserMapper {    //方法要求 类名必须与.xml名相同; 方法名必须与MyUserMapper.xml中对应的id相同; 并且参数要一一对应    public List&lt;MyUser&gt; getAll();}&lt;select id=&quot;getAllUser&quot; resultType=&quot;com.mybatis.test2.pojo.MyUser&quot;&gt;    SELECT *    FROM my_user&lt;/select&gt;</code></pre><ol start="2"><li>“注册”到mybatis配置文件–在conf.xml中mappers节点下添加(二选一, 只要有一个就可定位Mapper)</li></ol><pre><code>&lt;mapper class=&quot;com.mybatis.test2.pojo.MyUserMapper&quot;/&gt;&lt;mapper resource=&quot;com/mybatis/test2/pojo/MyUserMapper.xml&quot;/&gt;</code></pre><ol start="3"><li>测试(方法不变 只需改方法)</li></ol><hr><h4 id="9-优化"><a href="#9-优化" class="headerlink" title="9.优化"></a>9.优化</h4><blockquote><p>1.数据库文件: 把数据库信息配置到一个文件: db.properties,然后在conf.xml中引入,调用使用EL表达式</p></blockquote><pre><code>&lt;properties resource=&quot;classpath:mybatis/db.properties&quot;/&gt;</code></pre><blockquote><p>2.配置别名: 在映射文件中写全类名很长很麻烦,可以在conf.xml中配置别名 alias为别名; 则可以在映射xml文件中写别名表示此类</p></blockquote><pre><code>&lt;typeAliases&gt;    &lt;typeAlias type=&quot;com.mybatis.test2.pojo.MyUser&quot; alias=&quot;_MyUser&quot;/&gt;&lt;/typeAliases&gt;</code></pre><blockquote><p>2.配置别名2: 为整个包下类取别名 则别名为此类类名(比如: MyUser)</p></blockquote><pre><code>&lt;typeAliases&gt;    &lt;package name=&quot;com.mybatis.test2.pojo&quot;/&gt;&lt;/typeAliases&gt;</code></pre><hr><h4 id="10-对于数据表字段名和实体属性名不一致的问题"><a href="#10-对于数据表字段名和实体属性名不一致的问题" class="headerlink" title="10.对于数据表字段名和实体属性名不一致的问题"></a>10.对于数据表字段名和实体属性名不一致的问题</h4><blockquote><p>当表字段名和实体属性名不同 就会无法获取数据(区分大小写), 对应的属性即为null(相关类型默认值) 原因是查到的数据无法映射到对应的result实体上,所以只要创建一个映射关系就能解决这个问题</p></blockquote><ol><li>方法一: 指定字段别名(sql语句的方法, 直接指定字段别名为实体属性名)</li></ol><pre><code>&lt;select id=&quot;getOrder&quot; parameterType=&quot;int&quot; resultType=&quot;Order&quot;&gt;    SELECT order_id id, order_no orderNo, order_price orderPrice    FROM `order`    WHERE order_id = #{id}&lt;/select&gt;</code></pre><ol start="2"><li>方法二: mybatis提供resultMap用于结果映射; like this</li></ol><pre><code>&lt;!--        type: 映射实体类型 id主键 property实体属性名  column字段名    --&gt;&lt;resultMap id=&quot;order&quot; type=&quot;Order&quot;&gt;    &lt;id property=&quot;id&quot; column=&quot;order_id&quot;/&gt;    &lt;result property=&quot;orderNo&quot; column=&quot;order_no&quot;/&gt;    &lt;result property=&quot;orderPrice&quot; column=&quot;order_price&quot;/&gt;&lt;/resultMap&gt;&lt;select id=&quot;getOrder&quot; parameterType=&quot;int&quot; resultMap=&quot;order&quot;&gt;    SELECT *    FROM `order`    WHERE order_id = #{id}&lt;/select&gt;</code></pre><hr><h4 id="11-一对一和一对多的实现"><a href="#11-一对一和一对多的实现" class="headerlink" title="11.一对一和一对多的实现"></a>11.一对一和一对多的实现</h4><blockquote><p>对于涉及到多表查询, 一般有两种方式: 1.一个表一个表查询,用第一个表查到的数据组成第二个查询语句(也叫嵌套查询); 2.sql关联查询,一条语句,一次查询,语句比较复杂(也叫嵌套结果);</p></blockquote><blockquote><p>为了尽可能的减少代码量(当然,去掉不必要的”体积”的麻烦),而且效率上 嵌套结果&gt;存储过程&gt;嵌套查询;</p></blockquote><h5 id="嵌套结果示例"><a href="#嵌套结果示例" class="headerlink" title="嵌套结果示例:"></a>嵌套结果示例:</h5><ol><li>一对一</li></ol><blockquote><p>两个实体类以及一个结果封装类(由于不能仅仅用一个实体接收查询的所有的字段, so其用于封装查询的结果)</p></blockquote><pre><code>// 对应数据库中表: order (字段有所不同,参考查询语句)public class Order {    private int id;    private String orderNo;    private float orderPrice;    private User user;    ... //构造方法, setter, getter, toString等方法}// 对应数据库中表: userpublic class User {    private int id;    private String name;    private int age;    ...}// 结果封装类 id为user的id, 属性包含其他两个实体类(由于是一对一,则参数也可以把实体的参数复制过来,那查询mapper中resultMap有所不同)public class UserOrder {    private String id;    private User user;    private Order order;    ...}</code></pre><blockquote><p>映射文件中查询的编写:</p></blockquote><pre><code>&lt;!-使用resultMap封装查询到的所有数据--&gt;&lt;select id=&quot;getOrderInfo&quot; parameterType=&quot;int&quot; resultMap=&quot;uo&quot;&gt;    SELECT *    FROM user u, `order` o    WHERE u.id = #{id} AND u.id = o.user_id&lt;/select&gt;&lt;!-column是查询输出结果的字段名, 如果查询的表之间没有同名字段则column是字段名,如果有字段冲突,则会有所变化(一般是&quot;表别名_字段名&quot;),以防万一要多测试--&gt;&lt;!-property是实体属性名--&gt;&lt;!-association:复杂类型联合,把多个字段映射联合映射为一个对象或其他 需要书写javaType表示要映射的类型 property表示映射类型的属性名--&gt;&lt;resultMap id=&quot;uo&quot; type=&quot;UserOrder&quot;&gt;    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;    &lt;association property=&quot;user&quot; javaType=&quot;User&quot;&gt;        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;        &lt;result property=&quot;age&quot; column=&quot;age&quot;/&gt;    &lt;/association&gt;    &lt;association property=&quot;order&quot; javaType=&quot;Order&quot;&gt;        &lt;id property=&quot;id&quot; column=&quot;order_id&quot;/&gt;        &lt;result property=&quot;orderNo&quot; column=&quot;order_no&quot;/&gt;        &lt;result property=&quot;orderPrice&quot; column=&quot;order_price&quot;/&gt;    &lt;/association&gt;&lt;/resultMap&gt;&lt;!-记得书写代理接口--&gt;</code></pre><blockquote><p>测试类:</p></blockquote><pre><code>...UserOrder order = orderMapper.getOrderInfo(12);System.out.println(order);</code></pre><ol><li>一对多</li></ol><blockquote><p>一的一方同上,多的一方就需要一个新的类封装实体对象的集合,并且需要修改mapper写法</p></blockquote><pre><code>// 实体类不变 结果封装类为:public class UserOrder2 {    private String id;    private User user;    private List&lt;Order&gt; orders;}</code></pre><blockquote><p>映射文件:</p></blockquote><pre><code>&lt;!-如果你在mysql中输入sql语句,查看结果就会发现:user只有一种但是每条数据的字段数据都有并且相同,order的字段数据每条都不一样--&gt;&lt;!-collection:复杂类型集合,--&gt;&lt;select id=&quot;getOrderInfo2&quot; parameterType=&quot;int&quot; resultMap=&quot;uo2&quot;&gt;    SELECT *    FROM user u, `order` o    WHERE u.id = #{id} AND u.id = o.user_id&lt;/select&gt;&lt;!--collection: 封装字段为集合类型 property: 类中的属性名 内容是集合数据的类型的属性--&gt;&lt;!--oftype: 集合中元素对象类型--&gt;&lt;resultMap id=&quot;uo2&quot; type=&quot;UserOrder2&quot;&gt;    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;    &lt;association property=&quot;user&quot; javaType=&quot;User&quot;&gt;        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;        &lt;result property=&quot;age&quot; column=&quot;age&quot;/&gt;    &lt;/association&gt;    &lt;collection property=&quot;orders&quot; ofType=&quot;Order&quot;&gt;        &lt;id property=&quot;id&quot; column=&quot;order_id&quot;/&gt;        &lt;result property=&quot;orderNo&quot; column=&quot;order_no&quot;/&gt;        &lt;result property=&quot;orderPrice&quot; column=&quot;order_price&quot;/&gt;    &lt;/collection&gt;&lt;/resultMap&gt;</code></pre><p><em>高级结果映射详细简介见: <a href="http://zj2626.github.io/2017/06/19/20170619_Mybatis/">http://zj2626.github.io/2017/06/19/20170619_Mybatis/</a></em></p><blockquote><p>测试类</p></blockquote><pre><code>UserOrder2 order2 = orderMapper.getOrderInfo2(12);System.out.println(order2);</code></pre><h4 id="12-一级缓存与二级缓存"><a href="#12-一级缓存与二级缓存" class="headerlink" title="12.一级缓存与二级缓存"></a>12.一级缓存与二级缓存</h4><blockquote><p>与hibernate相似, mybatis也存在缓存并且默认开启一级缓存,mybatis一级缓存是session级别的,而二级缓存是namespace(statement)级别的(即每个mapper文件就是一个二级缓存范围,需要配置)</p></blockquote><blockquote><p>配置二级缓存</p></blockquote><pre><code>&lt;cache/&gt;or&lt;cache eviction=&quot;LRU&quot; flushInterval=&quot;60000&quot; size=&quot;512&quot;/&gt;</code></pre><h4 id="13-与spring集成"><a href="#13-与spring集成" class="headerlink" title="13.与spring集成"></a>13.与spring集成</h4><blockquote><p>引入依赖</p></blockquote><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;    &lt;version&gt;1.3.0&lt;/version&gt;&lt;/dependency&gt;</code></pre><blockquote><p>配置mapper 同上</p></blockquote><blockquote><p>配置spring配置文件:</p></blockquote><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;     xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:p=&quot;http://www.springframework.org/schema/p&quot;     xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;    xsi:schemaLocation=&quot;        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context-3.2.xsd        http://www.springframework.org/schema/tx        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd&quot;&gt;    &lt;!-- 1. 数据源 : DriverManagerDataSource --&gt;    &lt;bean id=&quot;datasource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis&quot;/&gt;        &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;        &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;    &lt;/bean&gt;    &lt;!--         2. mybatis的SqlSession的工厂: SqlSessionFactoryBean             dataSource / typeAliasesPackage    --&gt;    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;datasource&quot;/&gt;        &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com/mybatis/test3/bean&quot;/&gt;    &lt;/bean&gt;    &lt;!--         3. mybatis自动扫描加载Sql映射文件(即接口) : MapperScannerConfigurer             sqlSessionFactory / basePackage    --&gt;    &lt;bean id=&quot;config&quot; class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;        &lt;property name=&quot;basePackage&quot; value=&quot;com/mybatis/test3/mapper&quot;/&gt;        &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;/&gt;    &lt;/bean&gt;    &lt;!-- 4. 事务管理 : DataSourceTransactionManager --&gt;    &lt;bean id=&quot;manager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;datasource&quot;/&gt;    &lt;/bean&gt;    &lt;!-- 5. 使用声明式事务 --&gt;    &lt;tx:annotation-driven transaction-manager=&quot;manager&quot; /&gt;&lt;/beans&gt;</code></pre><blockquote><p>配置mybatis配置文件 里面没有配置内容(但是必须要)</p></blockquote><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;&lt;/configuration&gt;</code></pre><h4 id="n-分页插件-—-PageHelper-一个分页插件-支持多种数据库-原理大概是在执行sql语句之前-拦截器-进行了操作改写了sql语句-实现分页"><a href="#n-分页插件-—-PageHelper-一个分页插件-支持多种数据库-原理大概是在执行sql语句之前-拦截器-进行了操作改写了sql语句-实现分页" class="headerlink" title="n.分页插件 — PageHelper: 一个分页插件,支持多种数据库,原理大概是在执行sql语句之前(拦截器)进行了操作改写了sql语句,实现分页"></a>n.分页插件 — PageHelper: 一个分页插件,支持多种数据库,原理大概是在执行sql语句之前(拦截器)进行了操作改写了sql语句,实现分页</h4><ol><li>导入依赖</li></ol><pre><code>&lt;dependency&gt;    &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;    &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><ol start="2"><li>配置插件–拦截器(在mybatis的配置文件中), 笔者在spring中集成了mybatis的配置</li></ol><pre><code>&lt;plugins&gt;    &lt;!--配置PageHelper插件--&gt;    &lt;plugin interceptor=&quot;com.github.pagehelper.PageHelper&quot;&gt;        &lt;!--配置方言(数据库识别)--&gt;        &lt;property name=&quot;dialect&quot; value=&quot;mysql&quot;/&gt;    &lt;/plugin&gt;&lt;/plugins&gt;</code></pre><ol start="3"><li>测试分页</li></ol><pre><code>@Testpublic void testPage() {    //初始化Spring容器    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;classpath:spring/applicationContext-dao.xml&quot;);    //获取代理对象    TbItemMapper itemMapper = applicationContext.getBean(TbItemMapper.class);    //执行sql语句前设置分页信息使用PageHelper的startPage方法    PageHelper.startPage(1, 10);    //查询    TbItemExample example = new TbItemExample();    List&lt;TbItem&gt; list = itemMapper.selectByExample(example);    //取分页信息PageInfo 总记录数 总页数 当前页    PageInfo&lt;TbItem&gt; pageInfo = new PageInfo&lt;&gt;(list);    System.out.println(pageInfo.getTotal());    System.out.println(pageInfo.getEndRow());    System.out.println(pageInfo.getFirstPage());    System.out.println(pageInfo.getLastPage());    System.out.println(pageInfo.getList());    System.out.println(pageInfo.getNavigatePages());    System.out.println(pageInfo.getNextPage());    System.out.println(pageInfo.getPageNum());    System.out.println(pageInfo.getPages());    System.out.println(pageInfo.getPageSize());    System.out.println(pageInfo.getPrePage());    System.out.println(pageInfo.getSize());    System.out.println(pageInfo.getStartRow());}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 框架相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记</title>
      <link href="/2017/03/01/2017_e/"/>
      <url>/2017/03/01/2017_e/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-js-是一套构建用户界面的-渐进式框架-JavaScript-MVVM库-它是以数据驱动和组件化的思想构建的-无需手动操作DOM"><a href="#Vue-js-是一套构建用户界面的-渐进式框架-JavaScript-MVVM库-它是以数据驱动和组件化的思想构建的-无需手动操作DOM" class="headerlink" title="Vue.js 是一套构建用户界面的 渐进式框架 JavaScript MVVM库 它是以数据驱动和组件化的思想构建的,无需手动操作DOM."></a>Vue.js 是一套构建用户界面的 渐进式框架 JavaScript MVVM库 它是以数据驱动和组件化的思想构建的,无需手动操作DOM.</h2><h1 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h1><h2 id="Model-View-ViewModel"><a href="#Model-View-ViewModel" class="headerlink" title="Model-View-ViewModel"></a>Model-View-ViewModel</h2><p>ViewModel是Vue.js的核心，它是一个Vue实例。Vue实例是作用于某一个HTML元素上的，这个元素可以是HTML的body元素，也可以是指定了id的某个元素。</p><p>当创建了ViewModel后，双向绑定是如何达成的呢？</p><p>首先，我们将DOM Listeners和Data Bindings看作两个工具，它们是实现双向绑定的关键。<br>从View侧看，ViewModel中的DOM Listeners工具会帮我们监测页面上DOM元素的变化，如果有变化，则更改Model中的数据；<br>从Model侧看，当我们更新Model中的数据时，Data Bindings工具会帮我们更新页面中的DOM元素。<br>&lt;摘自: <a href="http://www.cnblogs.com/rik28/p/6024425.html&gt;" target="_blank" rel="noopener">http://www.cnblogs.com/rik28/p/6024425.html&gt;</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架相关 </category>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongodb安装与启动</title>
      <link href="/2017/03/01/2017_Mongodb/"/>
      <url>/2017/03/01/2017_Mongodb/</url>
      
        <content type="html"><![CDATA[<h2 id="MongoDB-是一个基于分布式文件存储的数据库。由C-语言编写-是一个介于关系数据库和非关系数据库之间的产品"><a href="#MongoDB-是一个基于分布式文件存储的数据库。由C-语言编写-是一个介于关系数据库和非关系数据库之间的产品" class="headerlink" title="MongoDB 是一个基于分布式文件存储的数据库。由C++语言编写;是一个介于关系数据库和非关系数据库之间的产品"></a><strong>MongoDB</strong> 是一个基于分布式文件存储的数据库。由C++语言编写;是一个介于关系数据库和非关系数据库之间的产品</h2><h2 id="其支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。"><a href="#其支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。" class="headerlink" title="其支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。"></a>其支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</h2><h1 id="使用原理"><a href="#使用原理" class="headerlink" title="使用原理 :"></a>使用原理 :</h1><blockquote><p><strong>面向集合</strong>: 数据被分组存储在数据集中，被称为一个集合（Collection),每个集合在数据库中都有一个唯一的标识名，并且可以包含无限数目的文档 (类似于传统数据库中的 表(table))</p></blockquote><blockquote><p><strong>模式自由</strong>: 意味着对于存储在mongodb数据库中的文件，我们不需要知道它的任何结构定义;存储在集合中的文档，</p></blockquote><blockquote><p><strong>键-值对的形式</strong>:键用于唯一标识一个文档，为字符串类型，而值则可以是各种复杂的文件类型。我们称这种存储形式为BSON（Binary Serialized Document Format）</p></blockquote><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li>环境:CentOs6.5 64位 远程工具 xsell</li><li><p>下载:官网下载 <a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank" rel="noopener">https://www.mongodb.com/download-center?jmp=nav#community</a> 或者<br> 输入命令: &gt; curl -O <a href="https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz" target="_blank" rel="noopener">https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz</a></p></li><li><p>解压: &gt; tar -zxvf mongodb-linux-x86_64-3.0.6.tgz</p></li><li>移动到目录 mv  mongodb-linux-x86_64-3.0.6/ /usr/local/mongodb</li><li>把bin目录添加到环境变量PATH中 : vim /etc/profile<br> 添加或修改为: export PATH=”/usr/local/mongodb/bin:$PATH”</li><li>配置自己的数据,日志等目录<br> I.   &gt; cd /usr/local/mongodb<br> II. &gt; mkdir data<br> III. &gt; mkdir log<br> IV. &gt; mkdir conf<br> V. &gt; cd conf<br> VI. &gt; touch mongodb.conf<br> VII. &gt; vim mongodb.conf</li></ol><pre><code>port = 27017dbpath = datalogpath = log/mongod.logfork = true</code></pre><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><ol start="7"><li>配置完毕 启动服务 <ol><li>可以使用自己的配置文件中的配置 /usr/local/mongodb/bin/mongod -f /usr/local/mongodb/conf/mongodb.conf</li><li>也可以输入配置目录启动 /usr/local/mongodb/bin/mongod –dbpath=/usr/local/mongodb/data/  –port=12345  –fork –logpath=/usr/local/mongodb/log/mongodb.log</li></ol></li><li>启动之后 输入 &gt; mongo 127.0.0.1:12345/admin 连接mongodb服务<br> 目前没有设置用户名密码 所以需要无认证启动, so先设置用户名密码</li><li>mongodb中用户是归属于数据库的 ,可以说是为数据库设置自己的用户,并设置权限,一般一个用户只是管理一个数据库<br> (当然,可以设置一个超级管理员用来管理所有的数据库)<br> <em>下面的意思是为admin数据库设置一个用户名为”root”,密码为”root”的用户,用户权限(角色) 是root(超级管理员)</em></li></ol><pre><code>&gt; use admin&gt; db.createUser(...   {...     user: &quot;root&quot;,...     pwd: &quot;root&quot;,...     roles: [ { role: &quot;root&quot;, db: &quot;admin&quot; } ]...   }... )</code></pre><p><em>上面是mongodb3.0的新建用户方式, 2.x的方式有所不同,自行查阅</em></p><p>下面是mongodb内置的角色</p><pre><code>1. 数据库用户角色：read、readWrite;2. 数据库管理角色：dbAdmin、dbOwner、userAdmin；3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；4. 备份恢复角色：backup、restore；5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase6. 超级用户角色：root  // 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）7. 内部角色：__system</code></pre><p>Read：允许用户读取指定数据库<br>readWrite：允许用户读写指定数据库<br>dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile<br>userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户<br>clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。<br>readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限<br>readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限<br>userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限<br>dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。<br>root：只在admin数据库中可用。超级账号，超级权限</p><pre><code>也可以创建角色:&gt; db.createRole(... {...     role: &quot;manageOpRole&quot;,...     privileges: [ ...         { resource: { cluster: true }, actions: [ &quot;killop&quot;, &quot;inprog&quot; ] }, ...         { resource: { db: &quot;my_test&quot;, collection: &quot;my_collection&quot; }, ...            actions: [ &quot;insert&quot;, &quot;update&quot;, &quot;remove&quot;, &quot;compact&quot;] } ...                 ],...     roles: [] ...     }... ){    &quot;role&quot; : &quot;manageOpRole&quot;,    &quot;privileges&quot; : [        {            &quot;resource&quot; : {                &quot;cluster&quot; : true            },            &quot;actions&quot; : [                &quot;killop&quot;,                &quot;inprog&quot;            ]        },        {            &quot;resource&quot; : {                &quot;db&quot; : &quot;my_test&quot;,                &quot;collection&quot; : &quot;my_collection&quot;            },            &quot;actions&quot; : [                &quot;insert&quot;,                 &quot;update&quot;,                 &quot;remove&quot;,                 &quot;compact&quot;            ]        }    ],    &quot;roles&quot; : [ ]}&gt; </code></pre><p><em>可以添加几个其他角色的用户来测试权限</em></p><ol start="10"><li><p>要用用户登录的服务 so先关闭服务: &gt; db.shutdownServer()</p></li><li><p>启动带权限验证的mongodb服务: </p></li></ol><pre><code>    &gt; /usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data/  --port=12345  --fork --logpath=/usr/local/mongodb/log/mongodb.log -auth如果报错too many positional options是由于--的原因,需要写英文的两个-</code></pre><ol start="12"><li>连接 &gt; mongo 127.0.0.1:12345/admin</li><li>使用数据库 use admin</li><li>进行一些数据库操作 比如 &gt; show dbs 此时就会报错 用用户名密码验证权限</li></ol><pre><code>    &gt; db.auth(&apos;root&apos;,&apos;anyao112233&apos;)返回1表示成功 返回0表示失败 ; 此时再输入:</code></pre><blockquote><p>show dbs<br>show collections</p></blockquote><pre><code>就会返回正常结果;</code></pre><h1 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h1><h5 id="注意-gt-use-test-用来切换别的数据库"><a href="#注意-gt-use-test-用来切换别的数据库" class="headerlink" title="注意 : &gt; use test   //用来切换别的数据库"></a><em>注意</em> : &gt; use test   //用来切换别的数据库</h5><h5 id="此时如果登录的用户没有操作此数据库的权限-show-dbs就会报错"><a href="#此时如果登录的用户没有操作此数据库的权限-show-dbs就会报错" class="headerlink" title="此时如果登录的用户没有操作此数据库的权限 show dbs就会报错"></a>此时如果登录的用户没有操作此数据库的权限 show dbs就会报错</h5><pre><code>#####*注意* : 此时关闭服务&gt;  db.shutdownServer() 可能会报错,它提示没有shutdown的权限    解决方法: &gt; db.grantRolesToUser( &quot;root&quot; , [ { role: &quot;hostManager&quot;, db: &quot;admin&quot; } ])为用户root赋予hostManager角色的权限,然后就可以关闭了</code></pre><ol start="15"><li><p>输入&gt; exit 退出界面</p><p><em>注</em>:可以用浏览器访问 127.0.0.1:27017<br><em>注</em>:有时候shutdown以后 无法再启动 报错</p><pre><code>原因:1. mongodb没有正常关闭         解决方法:删除mongodb的data目录下的mongod.lock (不能解决就把log目录中日志删除)     2.上面试了还是无法启动,那就是mongodb服务可能没有访问data,log等目录的权限         解决方法:&gt; chmod -R 777 /usr/local/mongodb/</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongodb的基础操作详解</title>
      <link href="/2017/03/01/2017_Mongodb_curd/"/>
      <url>/2017/03/01/2017_Mongodb_curd/</url>
      
        <content type="html"><![CDATA[<h2 id="对数据库的操作"><a href="#对数据库的操作" class="headerlink" title="对数据库的操作"></a>对数据库的操作</h2><pre><code>&gt;show dbs   显示所有数据库&gt;use admin 切换数据库(数据库可以自动新建)&gt;db.auth(&apos;username&apos;,&apos;password&apos;) 验证用户权限&gt;db.dropDatabase() 删除数据库</code></pre><h2 id="对集合-collection-的操作-也就是对表的操作"><a href="#对集合-collection-的操作-也就是对表的操作" class="headerlink" title="对集合(collection)的操作(也就是对表的操作)"></a>对集合(collection)的操作(也就是对表的操作)</h2><pre><code>&gt;db.集合名.drop() 删除表&gt;show collections 显示所有的collection&gt;show tables  显示所有的collection</code></pre><a id="more"></a><h2 id="对数据的操作"><a href="#对数据的操作" class="headerlink" title="对数据的操作"></a>对数据的操作</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><pre><code>&gt;db.集合名.find()      查询数据库中某个集合的数据&gt;db.集合名.find({x:1})      查询数据库 查询包含参数json字符串的数据&gt;db.集合名.find().count()      查询数据库中数据的个数(可带参数 表条件)&gt;db.集合名.find().skip(5).limit(10).sort({x:1,y:1})        查询条件:skip:跳过数据的个数;limit:查询条数;sort:按照某个字段排序(这里是先按x排序,再按y排序, 1表示正像排序,-1代表反向)&gt;db.集合名.find({y:{$exists:true}})  //查询y字段存在的数据&gt;db.集合名.find({x:1}).explain()       //带详细信息的查询</code></pre><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><pre><code>&gt;db.集合名.insert({x:1})     插入数据(参数格式为json格式,集合名可以自动新建) 插入时会自动生成id(名叫&quot;_id&quot;的字段)&gt;db.集合名.insert({x:1, _id:1})     带id的插入(需要保证_id全局唯一,不可重复)&gt;for(i=0;i&lt;100;i++)     db.集合名.insert({x:i+200}) 使用循环插入数据库</code></pre><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><pre><code>Update有4个参数：(默认更新一条数据)        第一个selector(查询条件)，        第二个newValue(要更新的数据)， $set、$inc、$push        第三个upserts， true:查到就更新,没查到就新建        第四个multipleUpdate,  true:批量更新&gt; db.集合名.update({x:10},{x:100})        更新方法: 第一个json:更新条件 ;第二个json:更新结果 (把x=1的数据更新为x=10)&gt; db.集合名.update({x:10},$set:{y:100}})    部分更新: 只更新第二个json所改变的字段(不加set操作符,会把原来的所有的字段覆盖为更新结果)&gt; db.集合名.update({x:10},{x:100}, true)  更新或插入: 如果更新的数据不存在就插入一条数据(upsert = true)&gt; db.集合名.update({x:10},$set:{y:100}}, false, true) 批量更新: 为防止误操作,必须使用set操作,(upsert = false,)</code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><pre><code>(默认删除查到的所有数据)&gt; db.集合名.remove({x:200}) 删除操作:必须有参数</code></pre><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><pre><code>&gt;db.collection.getIndexes()     //每个collection都会创建默认的一个索引 _id</code></pre><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><pre><code>&gt;db.collection.ensureIndex({x:1})  1表示正像排序,-1代表反向 (最好在存在大量数据之前就已经添加好索引)&gt;db.collection.ensureIndex({x:1},{name:&quot;&quot;my_index})  自定义命名索引名</code></pre><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><pre><code>&gt;db.collection.dropIndex(&quot;index_name&quot;)  //参数是索引名</code></pre><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><pre><code>1. _id索引(默认的唯一索引)2.单键索引: 普通索引(值为一个字符串,数字,日期等) db.collection.ensureIndex({x:1})3.多键索引: 当索引的字段为数组时，创建出的索引称为多key索引如果存在一个多值的字段如: { &quot;_id&quot; : ObjectId(&quot;58bbcfeb48e281d3bc2a95b9&quot;), &quot;x&quot; : [ 1, 2, 3, 4, 5, 6 ] }那么在这条记录创建时候 会自动建立多键索引(或手动创建 db.collection.createIndex( {x: 1} )  )查询: db.collection.find({x: 1}) 或者  db.collection.find({x: 3})4.复合索引: 相当于多个单键索引 创建方式: db.collection.ensureIndex({x:1,y:1})5.过期索引: (TTL) 一段时间后会过期(删除数据)的索引 (过期时间 单位是秒)    创建方式: db.collection.ensureIndex({x:1},{expireAfterSeconds:10})    注意:   1.存储在过期索引字段的值必须是ISODate或ISODate数组,不能是其他,否则无法删除            2.如果是Date数组就按照时间从小到大删            3.不能是复合索引            4.删除不是准时的,而是60s的一个定时进程执行的删除            5.全文索引                db.collection.ensureIndex({&quot;key&quot;:&quot;text&quot;})                db.collection.ensureIndex({&quot;key&quot;:&quot;text&quot;,&quot;key2&quot;:&quot;text&quot;})                db.collection.ensureIndex({&quot;$**&quot;:&quot;text&quot;})</code></pre><p><em>其中key表示原来的”字段名”,键; text表示的不是原来的正序或倒序,而是要检索的内容(创建索引要写”text”)</em><br><em>一个collection只能创建一个全文索引</em></p><pre><code>全文索引测试:    创建内容:   &gt; db.test.insert({&quot;x&quot;:&quot;aaa ccc&quot;})               &gt; db.test.insert({&quot;x&quot;:&quot;bbb&quot;})               &gt; db.test.insert({&quot;y&quot;:&quot;ccc&quot;})               &gt; db.test.insert({&quot;z&quot;:&quot;ccc&quot;})               &gt; db.test.insert({&quot;x&quot;:&quot;aaa111&quot;})               &gt; db.test.insert({&quot;y&quot;:&quot;aaa111&quot;})               &gt; db.test.insert({&quot;x&quot;:&quot;aaa222&quot;,&quot;y&quot;:&quot;ccc&quot;})    查看创建的内容:  db.test.find()   //6条    创建索引:   db.test.ensureIndex({&quot;x&quot;:&quot;text&quot;})    查看所有索引:db.test.getIndexes()    //2个,第一个是默认的索引    查询:                       &gt; db.test.find({$text:{$search:&quot;aaa&quot;}})           //没找到数据                &gt; db.test.find({$text:{$search:&quot;aaa111&quot;}})        //查到一条(全部匹配)                { &quot;_id&quot; : ObjectId(&quot;58bcb92118bc95b8f476def1&quot;), &quot;x&quot; : &quot;aaa111&quot; }                &gt; db.test.find({$text:{$search:&quot;ccc&quot;}})                { &quot;_id&quot; : ObjectId(&quot;58bf535ae830c0c5f89055e7&quot;), &quot;x&quot; : &quot;aaa ccc&quot; }                &gt; db.test.find({$text:{$search:&quot;aaa111 aaa&quot;}})    //或查询 用户空格分开                { &quot;_id&quot; : ObjectId(&quot;58bf535ae830c0c5f89055e7&quot;), &quot;x&quot; : &quot;aaa ccc&quot; }                { &quot;_id&quot; : ObjectId(&quot;58bcb92118bc95b8f476def1&quot;), &quot;x&quot; : &quot;aaa111&quot; }                &gt; db.test.find({$text:{$search:&quot;aaa111 aaa -ccc&quot;}})  //或查询,其中&apos;-&apos;表示不包含                 { &quot;_id&quot; : ObjectId(&quot;58bcb92118bc95b8f476def1&quot;), &quot;x&quot; : &quot;aaa111&quot; }                &gt; db.test.find({$text:{$search:&quot;\&quot;aaa\&quot; \&quot;aaa111\&quot;&quot;}}) //与查询 1条                &gt; db.test.find({$text:{$search:&quot;\&quot;aaa222\&quot;&quot;}})          //1条                &gt; db.test.find({$text:{$search:&quot;\&quot;aaa\&quot; \&quot;aa\&quot;&quot;}})      //1条                &gt; db.test.find({$text:{$search:&quot;\&quot;aaa\&quot; \&quot;aa\&quot;&quot;}})      //1条                &gt; db.test.find({$text:{$search:&quot;\&quot;aaa222\&quot; \&quot;aa\&quot;&quot;}})   //1条            *全文索引相似度查询 返回查询到的结果与要查询的数据的相似度                {score:{$meta:&quot;textScore&quot;}}   得到的数越大表示相似度越高                &gt; db.test.find({$text:{$search:&quot;aaa222&quot;}},{score:{$meta:&quot;textScore&quot;}})                { &quot;_id&quot; : ObjectId(&quot;58bcb92518bc95b8f476def2&quot;), &quot;x&quot; : &quot;aaa222&quot;, &quot;y&quot; : &quot;ccc&quot;, &quot;score&quot; : 1.1 }                &gt; db.test.find({$text:{$search:&quot;aaa&quot;}},{score:{$meta:&quot;textScore&quot;}})                { &quot;_id&quot; : ObjectId(&quot;58bf535ae830c0c5f89055e7&quot;), &quot;x&quot; : &quot;aaa ccc&quot;, &quot;score&quot; : 0.75 }                //用相似度排序                &gt; db.test.find({$text:{$search:&quot;bbb&quot;}},{score:{$meta:&quot;textScore&quot;}}).sort({score:{$meta:&quot;textScore&quot;}})            *全文索引限制:                1.一次只能指定一个$text查询                2.$text不能使用$nor查询                3.查询中包含$text,则hint(强制指定索引)无效                4.目前已经支持中文查询(版本3.0.6)            6.地理位置索引                 1. 2D索引:平面地理位置索引                    创建索引: db.collection.ensureIndex({w:&quot;2d&quot;})                        位置表示方法:经纬度[经度, 纬度]    //经度:-180 -&gt; 180; 纬度:-90 -&gt; 90    1.插入数据(插入数据超过范围时可能会有不可预知的错误)        &gt; db.mytest4.find()        { &quot;_id&quot; : ObjectId(&quot;58bfa69dbf18b69568aedc5c&quot;), &quot;w&quot; : [ 1, 1 ] }        { &quot;_id&quot; : ObjectId(&quot;58bfa6a1bf18b69568aedc5d&quot;), &quot;w&quot; : [ 1, 3 ] }        { &quot;_id&quot; : ObjectId(&quot;58bfa6aabf18b69568aedc5e&quot;), &quot;w&quot; : [ 10, 30 ] }        { &quot;_id&quot; : ObjectId(&quot;58bfa780bf18b69568aedc64&quot;), &quot;w&quot; : [ 180, 90 ] }        { &quot;_id&quot; : ObjectId(&quot;58bfa723bf18b69568aedc62&quot;), &quot;w&quot; : [ -100, 90 ] }        { &quot;_id&quot; : ObjectId(&quot;58bfa728bf18b69568aedc63&quot;), &quot;w&quot; : [ -150, 90 ] }    2.查询        1.普通查询        &gt; db.mytest4.find({w:{$near:[1,1]}})   //默认返回100个距离所求点最近的点的位置        2.查询某个距离内的点        &gt; db.mytest4.find({w:{$near:[1,1],$maxDistance:10}})  //$maxDistance设置最远距离(直线距离)(不支持$minDistance)        { &quot;_id&quot; : ObjectId(&quot;58bfa69dbf18b69568aedc5c&quot;), &quot;w&quot; : [ 1, 1 ] }        { &quot;_id&quot; : ObjectId(&quot;58bfa6a1bf18b69568aedc5d&quot;), &quot;w&quot; : [ 1, 3 ] }        3.查询某个形状范围内的点            1.矩形: $geoWithin + $box (查询[0,0],[100,10]内的点)                &gt; db.mytest4.find({w:{$geoWithin:{$box:[[0,0],[100,10]]}}})                { &quot;_id&quot; : ObjectId(&quot;58bfa69dbf18b69568aedc5c&quot;), &quot;w&quot; : [ 1, 1 ] }                { &quot;_id&quot; : ObjectId(&quot;58bfa6a1bf18b69568aedc5d&quot;), &quot;w&quot; : [ 1, 3 ] }            2.圆形: $geoWithin + $center (查询圆心为[0,0],半径为140内的点)                &gt; db.mytest4.find({w:{$geoWithin:{$center:[[0,0],140]}}})                { &quot;_id&quot; : ObjectId(&quot;58bfa723bf18b69568aedc62&quot;), &quot;w&quot; : [ -100, 90 ] }                { &quot;_id&quot; : ObjectId(&quot;58bfa69dbf18b69568aedc5c&quot;), &quot;w&quot; : [ 1, 1 ] }                { &quot;_id&quot; : ObjectId(&quot;58bfa6a1bf18b69568aedc5d&quot;), &quot;w&quot; : [ 1, 3 ] }                { &quot;_id&quot; : ObjectId(&quot;58bfa6aabf18b69568aedc5e&quot;), &quot;w&quot; : [ 10, 30 ] }            3.多边形: $geoWithin + $polygon (查询这几个点围成的多边形内的点,写至少是三个点)                &gt; db.mytest4.find({w:{$geoWithin:{$polygon:[[0,0],[80,91],[-45,70]]}}})                { &quot;_id&quot; : ObjectId(&quot;58bfa6a1bf18b69568aedc5d&quot;), &quot;w&quot; : [ 1, 3 ] }                { &quot;_id&quot; : ObjectId(&quot;58bfa6aabf18b69568aedc5e&quot;), &quot;w&quot; : [ 10, 30 ] }    #查询方式2           geoNear:要查询的collection名;        near:基点;        minDistance:搜索的最小距离;        maxDistance:搜索的最大距离;        num:查询数量            &gt; db.runCommand({geoNear:&quot;mytest4&quot;,near:[1,5],maxDistance:10,num:2})            {                &quot;results&quot; : [                    {                        &quot;dis&quot; : 2,                        &quot;obj&quot; : {                            &quot;_id&quot; : ObjectId(&quot;58bfa6a1bf18b69568aedc5d&quot;),                            &quot;w&quot; : [                                1,                                3                            ]                        }                    },                    {                        &quot;dis&quot; : 4,                        &quot;obj&quot; : {                            &quot;_id&quot; : ObjectId(&quot;58bfa69dbf18b69568aedc5c&quot;),                            &quot;w&quot; : [                                1,                                1                            ]                        }                    }                ],                &quot;stats&quot; : {                    &quot;nscanned&quot; : 3,                           &quot;objectsLoaded&quot; : 2,                    &quot;avgDistance&quot; : 3,                        &quot;maxDistance&quot; : 4,                    &quot;time&quot; : 0                              },                 &quot;ok&quot; : 1            }                2. 2Dsphere索引:球面地理位置索引:geoNear查询 使用runCommand命令进行使用                    1. 创建                        db.collection.ensureIndex({w:&quot;2dsphere&quot;})                            位置表示方法:GeoJSON:可以描述一个点,线或各种形状等 {type:&quot;&quot;,coordinates:[&lt;coordinates&gt;]}                    2. 查询                 //待续... </code></pre><h3 id="索引属性"><a href="#索引属性" class="headerlink" title="索引属性"></a>索引属性</h3><pre><code>1.name:   db.collection.ensureIndex({x:1},{name:&quot;my_index&quot;}) 指定索引名称2.unique: db.collection.ensureIndex({y:1},{unique:true})  设置为true,则不允许在同一个collection中插入有相同唯一索引的字段(索引的数值不能重复)    注意:如果插入的数据没有指定的索引字段,则只能插入一条这样的数据,再插入则会报错(相当于重复)3.sparse: db.collection.ensureIndex({y:1},{sparse:true})  设置为true,则不会在没有的字段的数据上创建索引        &gt; db.collection.find({y:{$exists:true}})  //查询y字段存在的数据    测试: 先插入6条数据,其中1条包含有y字段         &gt; db.test3.ensureIndex({y:1},{name:&quot;mytest_y&quot;},{sparse:false})  //创建索引        &gt; db.test3.find({y:{$exists:false}})   //查询不存在y的数据 5条(数据库并没有为这5条数据建立y的索引,而是数据库优化的结果,这里查询并没有用上面的索引,so查到了)        { &quot;_id&quot; : ObjectId(&quot;58bf69ced52555dec4840312&quot;), &quot;x&quot; : 1 }        { &quot;_id&quot; : ObjectId(&quot;58bf6c00d52555dec4840319&quot;), &quot;x&quot; : 2111313, &quot;k&quot; : 1 }        { &quot;_id&quot; : ObjectId(&quot;58bf6c13d52555dec484031a&quot;), &quot;x&quot; : 2111313, &quot;k&quot; : 2 }        { &quot;_id&quot; : ObjectId(&quot;58bf6c15d52555dec484031b&quot;), &quot;x&quot; : 2111313, &quot;k&quot; : 3 }        { &quot;_id&quot; : ObjectId(&quot;58bf6c19d52555dec484031c&quot;), &quot;x&quot; : 2111313, &quot;z&quot; : 3 }        &gt; db.test3.find({y:{$exists:false}}).hint(&quot;mytest_y&quot;)     //强制指定索引,使用指定的索引查询,就无法查到不包含y的数据        &gt;                                                         //没有查到数据4.expireAfterSeconds 是否定时删除TTL(过期索引)         &gt; db.collection.ensureIndex({x:1},{expireAfterSeconds:10})</code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><pre><code>1. mongodb可以通过profile来监控数据，进行优化。    查看当前是否开启profile功能用命令    &gt; db.getProfilingLevel()    0    开启profile功能     &gt; db.setProfilingLevel(2)  //0代表关闭，1代表记录慢命令，2代表全部    { &quot;was&quot; : 0, &quot;slowms&quot; : 100, &quot;ok&quot; : 1 }    查看当前的监控日志    db.system.profile.find() </code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mongodb </tag>
            
            <tag> CRUD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate配置以及实体映射配置</title>
      <link href="/2017/02/27/2017_Hibernate/"/>
      <url>/2017/02/27/2017_Hibernate/</url>
      
        <content type="html"><![CDATA[<h1 id="Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装-，它将POJO与数据库表建立映射关系"><a href="#Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装-，它将POJO与数据库表建立映射关系" class="headerlink" title="Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装,，它将POJO与数据库表建立映射关系"></a><strong>Hibernate</strong>是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装,，它将POJO与数据库表建立映射关系</h1><h1 id="Hibernate是一个全自动的orm框架，hibernate可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库"><a href="#Hibernate是一个全自动的orm框架，hibernate可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库" class="headerlink" title="Hibernate是一个全自动的orm框架，hibernate可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库"></a><strong>Hibernate</strong>是一个全自动的orm框架，hibernate可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库</h1><hr><h2 id="下面是测试用实体1—Student-java"><a href="#下面是测试用实体1—Student-java" class="headerlink" title="下面是测试用实体1—Student.java"></a>下面是测试用实体1—Student.java</h2><a id="more"></a><pre><code>package com.em.entity;/** * Created by zhangjin on 2017/2/27. */public class Student {    private Integer id;    private String name;    private Integer age;    private Double score;    private Course course;    public Student() {    }    public Student(String name, Integer age, Double score) {        this.name = name;        this.age = age;        this.score = score;    }    public Student(String name, Integer age, Double score, Course course) {        this.name = name;        this.age = age;        this.score = score;        this.course = course;    }    public Integer getId() {        return id;    }    public void setId(Integer id) {        this.id = id;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public Integer getAge() {        return age;    }    public void setAge(Integer age) {        this.age = age;    }    public Double getScore() {        return score;    }    public void setScore(Double score) {        this.score = score;    }    public Course getCourse() {        return course;    }    public void setCourse(Course course) {        this.course = course;    }    @Override    public String toString() {        return &quot;Student{&quot; +                &quot;id=&quot; + id +                &quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +                &quot;, age=&quot; + age +                &quot;, course=&quot; + course +                &apos;}&apos;;    }}</code></pre><h2 id="其所对应的Hibernate映射文件为-Student-hbm-xml"><a href="#其所对应的Hibernate映射文件为-Student-hbm-xml" class="headerlink" title="其所对应的Hibernate映射文件为 Student.hbm.xml"></a>其所对应的Hibernate映射文件为 Student.hbm.xml</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;        &quot;http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd&quot;&gt;&lt;!-- package:包名--&gt;&lt;hibernate-mapping package=&quot;com.em.entity&quot;&gt;    &lt;class name=&quot;Student&quot; table=&quot;STUDENT&quot;&gt;        &lt;!--表的主键--&gt;        &lt;id name=&quot;id&quot; type=&quot;java.lang.Integer&quot;&gt;            &lt;column name=&quot;ID&quot;/&gt;            &lt;!--主键的生成方式--&gt;            &lt;!--    antive:数据库本地的方式(数据库自己生成主键的方式)   increment:Hiernate以递增的方式生成(只测试时候用 因为有并发的问题)                    identity:由底层数据库负责生成标识符(数据库必须支持主键自增) sequence:利用底层数据库提供的序列生成标识符                    hilo:Hibernate通过高低算法生成标识符                     --&gt;            &lt;generator class=&quot;native&quot;/&gt;        &lt;/id&gt;        &lt;!--属性映射 name:实体属性名--&gt;        &lt;!--length:限制长度 但是我测试了好几次都不起作用 无论是String还是Integer--&gt;        &lt;property name=&quot;name&quot; type=&quot;java.lang.String&quot; length=&quot;100&quot;&gt;            &lt;!--column: 数据库中列名--&gt;            &lt;column name=&quot;NAME&quot;/&gt;        &lt;/property&gt;        &lt;property name=&quot;age&quot; type=&quot;java.lang.Integer&quot; length=&quot;10&quot;&gt;            &lt;column name=&quot;AGE&quot;/&gt;        &lt;/property&gt;        &lt;!--index: 为SCORE列添加索引 索引名:score_index--&gt;        &lt;property name=&quot;score&quot; type=&quot;java.lang.Double&quot; index=&quot;score_index&quot;&gt;            &lt;column name=&quot;SCORE&quot;/&gt;        &lt;/property&gt;        &lt;!--映射关联关系(即外键) class:外键对应的类名 column:外键列名--&gt;        &lt;many-to-one name=&quot;course&quot; class=&quot;Course&quot; column=&quot;COURSE_ID&quot;/&gt;        &lt;!--匿名查询使用的查询语句(可以把部分查询语句配置在配置文件中 方便修改)--&gt;        &lt;query name=&quot;findByName&quot;&gt;&lt;![CDATA[from Student where name like :name and score &gt; :score]]&gt;&lt;/query&gt;    &lt;/class&gt;&lt;/hibernate-mapping&gt;</code></pre><hr><h2 id="下面是测试用实体2—Course-java"><a href="#下面是测试用实体2—Course-java" class="headerlink" title="下面是测试用实体2—Course.java"></a>下面是测试用实体2—Course.java</h2><pre><code>package com.em.entity;import java.sql.Timestamp;import java.util.HashSet;import java.util.Set;/** * Created by zhangjin on 2017/2/27. */public class Course {    private Integer id;    private String courseName;    private Timestamp courseTime;    Set&lt;Student&gt; stuSet = new HashSet&lt;&gt;();    public Course() {    }    public Course(String courseName, Timestamp courseTime) {        this.courseName = courseName;        this.courseTime = courseTime;    }    public Integer getId() {        return id;    }    public void setId(Integer id) {        this.id = id;    }    public String getCourseName() {        return courseName;    }    public void setCourseName(String courseName) {        this.courseName = courseName;    }    public Timestamp getCourseTime() {        return courseTime;    }    public void setCourseTime(Timestamp courseTime) {        this.courseTime = courseTime;    }    public Set&lt;Student&gt; getStuSet() {        return stuSet;    }    public void setStuSet(Set&lt;Student&gt; stuSet) {        this.stuSet = stuSet;    }    @Override    public String toString() {        return &quot;Course{&quot; +                &quot;id=&quot; + id +                &quot;, courseName=&apos;&quot; + courseName + &apos;\&apos;&apos; +                &quot;, courseTime=&quot; + courseTime +                &apos;}&apos;;    }}</code></pre><h2 id="其所对应的Hibernate映射文件为-Course-hbm-xml"><a href="#其所对应的Hibernate映射文件为-Course-hbm-xml" class="headerlink" title="其所对应的Hibernate映射文件为 Course.hbm.xml"></a>其所对应的Hibernate映射文件为 Course.hbm.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-mapping</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.em.entity"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    dynamic-insert:动态插入: 设置插入只插入非空的属性(默认为false)</span></span><br><span class="line"><span class="comment">            设置之后insert语句只包含非空的参数,</span></span><br><span class="line"><span class="comment">            没有值的字段不会出现在insert语句中</span></span><br><span class="line"><span class="comment">    dynamic-update:动态更新: 同上,换成更新(默认false)</span></span><br><span class="line"><span class="comment">        动态update对性能有一个重大的影响，就是打开了以后，不同的对象的sql语句会不一样，</span></span><br><span class="line"><span class="comment">        如果你一次更新多条记录，hibernate将不能使用 executeBatch进行批量更新，这样效率降低很多。</span></span><br><span class="line"><span class="comment">        同时，在这种情况下，多条sql意味着数据库要做多次sql语句编译。</span></span><br><span class="line"><span class="comment">    select-before-update 设置在每次更新操作前都查询一次,(默认false)</span></span><br><span class="line"><span class="comment">            如果查询的数据库中数据与要更新的实体相同就不会执行更新语句,但是无论是否更新都会先执行查询,效率低</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Course"</span> <span class="attr">table</span>=<span class="string">"COURSE"</span> <span class="attr">dynamic-insert</span>=<span class="string">"true"</span> <span class="attr">dynamic-update</span>=<span class="string">"false"</span> <span class="attr">select-before-update</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">length</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"ID"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"courseName"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">length</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"COURSE_NAME"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"courseTime"</span> <span class="attr">type</span>=<span class="string">"java.sql.Timestamp"</span> <span class="attr">index</span>=<span class="string">"time_index"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"COURSE_TIME"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--映射一对多的集合属性--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--属性:fetch</span></span><br><span class="line"><span class="comment">                select(默认): 延迟检索</span></span><br><span class="line"><span class="comment">                join : 迫切采用做外连接的方式初始化n关联的1的一端的属性</span></span><br><span class="line"><span class="comment">            属性:lazy</span></span><br><span class="line"><span class="comment">                proxy : 延迟检索</span></span><br><span class="line"><span class="comment">                false : 立即检索</span></span><br><span class="line"><span class="comment">            属性:inverse:设置true的一方(Set端设置)放弃维护关联关系,可减少维护次数,减少内存消耗</span></span><br><span class="line"><span class="comment">            属性:cascade:设置级联操作(默认none)</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"stuSet"</span> <span class="attr">inverse</span>=<span class="string">"true"</span> <span class="attr">fetch</span>=<span class="string">"select"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"COURSE_ID"</span>/&gt;</span><span class="comment">&lt;!--多的一端的数据库外键名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"Student"</span>/&gt;</span><span class="comment">&lt;!--一对多对应的类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="hibernate-cfg-xml"><a href="#hibernate-cfg-xml" class="headerlink" title="hibernate.cfg.xml"></a>hibernate.cfg.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-configuration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接数据库配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>fangshuoit<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/test<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--hibernate信息配置--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--hibernate使用的数据库方言--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQL57InnoDBDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--操作时是否在控制台打印sql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--是否对sql进行格式化--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定自动生成数据表的策略--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--create:每次重新生成数据表    create-drop:每次重新生成表,SessionFactory关闭就删表</span></span><br><span class="line"><span class="comment">            update:每次只是更新,不改变数据    validate:不一样就抛异常,不修改表--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置事务隔离级别--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.isolation"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置删除对象后 使其OID置为null--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"use_identifier_rollback"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--c3p0连接池配置--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接池最大连接数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.max_size"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接池最小连接数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.min_size"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接池的连接耗尽时,一次向再获取多少个数据库连接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.acquire_increment"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接对象在多久未使用,会被销毁 2s--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.idle_test_period"</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--多久时间检测一次连接超时情况--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.timeout"</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--缓存Statement对象数量--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.max_statements"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mysql无效 oracle有效--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设定jdbc的Statement读取数据的时候每次从数据库中取出多少记录条数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbc.fetch_size"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设定对数据库进行批量操作(增删改)时 一次操作的条数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbc.batch_size"</span>&gt;</span>50<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--启用二级缓存--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cache.use_second_level_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.region.factory_class"</span>&gt;</span>org.hibernate.cache.ehcache.EhCacheRegionFactory</span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启用查询缓存--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cache.use_query_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                配置管理session的方式 就是配置session绑定到某一运行环境</span></span><br><span class="line"><span class="comment">        (将getCurrentSession()返回的session绑定到当前运行线程中 此session的上下文是thread)</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注意：Spring3.x不能为thread，否则报错:org.hibernate.HibernateException: save is not valid without active transaction ，</span></span><br><span class="line"><span class="comment">               以上配置在 增加、删除、修改 操作时，都能正确执行，事务也正常执行！</span></span><br><span class="line"><span class="comment">               当执行 查询 操作时，不需要事务的支持，问题来了，报错:org.hibernate.HibernateException: No Session found for current thread</span></span><br><span class="line"><span class="comment">               意思是必须在transcation.isActive()条件下才能执行，</span></span><br><span class="line"><span class="comment">               可以解决办法是：当方法不需要事务支持的时候，使用 Session session = sessionFactory.openSession()来获得Session对象，问题解决！</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="current_session_context_class"&gt;thread&lt;/property&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--指定关联的.hbm.xml文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/em/entity/Student.hbm.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/em/entity/Course.hbm.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--设置使用二级缓存的类(类级别的二级缓存) 以及使用二级缓存的策略usage--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class-cache</span> <span class="attr">class</span>=<span class="string">"com.em.entity.Student"</span> <span class="attr">usage</span>=<span class="string">"read-write"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class-cache</span> <span class="attr">class</span>=<span class="string">"com.em.entity.Course"</span> <span class="attr">usage</span>=<span class="string">"read-write"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置使用二级缓存的类(集合级别的二级缓存) 以及使用二级缓存的策略usage--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection-cache</span> <span class="attr">collection</span>=<span class="string">"com.em.entity.Course.stuSet"</span> <span class="attr">usage</span>=<span class="string">"read-write"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.em.hibernate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.service.ServiceRegistry;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.service.ServiceRegistryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zhangjin on 2017/2/27.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SessionFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">//        .configuere()方法中参数为hibernate.cfg.xml配置文件位置 不填写表示取src目录下</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">        ServiceRegistry serviceRegistry = <span class="keyword">new</span> ServiceRegistryBuilder()</span><br><span class="line">                .applySettings(configuration.getProperties()).buildServiceRegistry();</span><br><span class="line">        factory = configuration.buildSessionFactory(serviceRegistry);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Session <span class="title">getSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> factory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//junit运行创建数据库表以及表结构</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>彻底理解ThreadLocal(转载)</title>
      <link href="/2017/02/15/2017_ThreadLocal/"/>
      <url>/2017/02/15/2017_ThreadLocal/</url>
      
        <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/lufeng20/article/details/24314381" target="_blank" rel="noopener">http://blog.csdn.net/lufeng20/article/details/24314381</a></p><h2 id="ThreadLocal是什么"><a href="#ThreadLocal是什么" class="headerlink" title="ThreadLocal是什么"></a>ThreadLocal是什么</h2><p>　　早在JDK 1.2的版本中就提供Java.lang.ThreadLocal，ThreadLocal为解决多线程程序的并发问题提供了一种新的思路。使用这个工具类可以很简洁地编写出优美的多线程程序。<br>　　当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。<br>　　从线程的角度看，目标变量就象是线程的本地变量，这也是类名中“Local”所要表达的意思。<br>　　所以，在Java中编写线程局部变量的代码相对来说要笨拙一些，因此造成线程局部变量没有在Java开发者中得到很好的普及。<br>ThreadLocal的接口方法<br>ThreadLocal类接口很简单，只有4个方法，我们先来了解一下：<br>void set(Object value)设置当前线程的线程局部变量的值。<br>public Object get()该方法返回当前线程所对应的线程局部变量。<br>public void remove()将当前线程局部变量的值删除，目的是为了减少内存的占用，该方法是JDK 5.0新增的方法。需要指出的是，当线程结束后，对应该线程的局部变量将自动被垃圾回收，所以显式调用该方法清除线程的局部变量并不是必须的操作，但它可以加快内存回收的速度。<br>protected Object initialValue()返回该线程局部变量的初始值，该方法是一个protected的方法，显然是为了让子类覆盖而设计的。这个方法是一个延迟调用方法，在线程第1次调用get()或set(Object)时才执行，并且仅执行1次。ThreadLocal中的缺省实现直接返回一个null。<br>　　值得一提的是，在JDK5.0中，ThreadLocal已经支持泛型，该类的类名已经变为ThreadLocal<t>。API方法也相应进行了调整，新版本的API方法分别是void set(T value)、T get()以及T initialValue()。<br>　　ThreadLocal是如何做到为每一个线程维护变量的副本的呢？其实实现的思路很简单：在ThreadLocal类中有一个Map，用于存储每一个线程的变量副本，Map中元素的键为线程对象，而值对应线程的变量副本。我们自己就可以提供一个简单的实现版本：<br>[java] view plain copy print?在CODE上查看代码片派生到我的代码片</t></p><a id="more"></a><pre><code>package com.test;  public class TestNum {      // ①通过匿名内部类覆盖ThreadLocal的initialValue()方法，指定初始值      private static ThreadLocal&lt;Integer&gt; seqNum = new ThreadLocal&lt;Integer&gt;() {          public Integer initialValue() {              return 0;          }      };      // ②获取下一个序列值      public int getNextNum() {          seqNum.set(seqNum.get() + 1);          return seqNum.get();      }      public static void main(String[] args) {          TestNum sn = new TestNum();          // ③ 3个线程共享sn，各自产生序列号          TestClient t1 = new TestClient(sn);          TestClient t2 = new TestClient(sn);          TestClient t3 = new TestClient(sn);          t1.start();          t2.start();          t3.start();      }      private static class TestClient extends Thread {          private TestNum sn;          public TestClient(TestNum sn) {              this.sn = sn;          }          public void run() {              for (int i = 0; i &lt; 3; i++) {                  // ④每个线程打出3个序列值                  System.out.println(&quot;thread[&quot; + Thread.currentThread().getName() + &quot;] --&gt; sn[&quot;                           + sn.getNextNum() + &quot;]&quot;);              }          }      }  }  </code></pre><p> 通常我们通过匿名内部类的方式定义ThreadLocal的子类，提供初始的变量值，如例子中①处所示。TestClient线程产生一组序列号，在③处，我们生成3个TestClient，它们共享同一个TestNum实例。运行以上代码，在控制台上输出以下的结果：<br>thread[Thread-0] –&gt; sn[1]<br>thread[Thread-1] –&gt; sn[1]<br>thread[Thread-2] –&gt; sn[1]<br>thread[Thread-1] –&gt; sn[2]<br>thread[Thread-0] –&gt; sn[2]<br>thread[Thread-1] –&gt; sn[3]<br>thread[Thread-2] –&gt; sn[2]<br>thread[Thread-0] –&gt; sn[3]<br>thread[Thread-2] –&gt; sn[3]<br>考察输出的结果信息，我们发现每个线程所产生的序号虽然都共享同一个TestNum实例，但它们并没有发生相互干扰的情况，而是各自产生独立的序列号，这是因为我们通过ThreadLocal为每一个线程提供了单独的副本。</p><p>Thread同步机制的比较<br>　　ThreadLocal和线程同步机制相比有什么优势呢？ThreadLocal和线程同步机制都是为了解决多线程中相同变量的访问冲突问题。<br>　　在同步机制中，通过对象的锁机制保证同一时间只有一个线程访问变量。这时该变量是多个线程共享的，使用同步机制要求程序慎密地分析什么时候对变量进行读写，什么时候需要锁定某个对象，什么时候释放对象锁等繁杂的问题，程序设计和编写难度相对较大。<br>　　而ThreadLocal则从另一个角度来解决多线程的并发访问。ThreadLocal会为每一个线程提供一个独立的变量副本，从而隔离了多个线程对数据的访问冲突。因为每一个线程都拥有自己的变量副本，从而也就没有必要对该变量进行同步了。ThreadLocal提供了线程安全的共享对象，在编写多线程代码时，可以把不安全的变量封装进ThreadLocal。<br>　　由于ThreadLocal中可以持有任何类型的对象，低版本JDK所提供的get()返回的是Object对象，需要强制类型转换。但JDK 5.0通过泛型很好的解决了这个问题，在一定程度地简化ThreadLocal的使用，代码清单 9 2就使用了JDK 5.0新的ThreadLocal<t>版本。<br>　　概括起来说，对于多线程资源共享的问题，同步机制采用了“以时间换空间”的方式，而ThreadLocal采用了“以空间换时间”的方式。前者仅提供一份变量，让不同的线程排队访问，而后者为每一个线程都提供了一份变量，因此可以同时访问而互不影响。<br>　　spring使用ThreadLocal解决线程安全问题我们知道在一般情况下，只有无状态的Bean才可以在多线程环境下共享，在Spring中，绝大部分Bean都可以声明为singleton作用域。就是因为Spring对一些Bean（如RequestContextHolder、TransactionSynchronizationManager、LocaleContextHolder等）中非线程安全状态采用ThreadLocal进行处理，让它们也成为线程安全的状态，因为有状态的Bean就可以在多线程中共享了。<br>　　一般的Web应用划分为展现层、服务层和持久层三个层次，在不同的层中编写对应的逻辑，下层通过接口向上层开放功能调用。在一般情况下，从接收请求到返回响应所经过的所有程序调用都同属于一个线程，如图9‑2所示：<br>通通透透理解ThreadLocal<br>　　同一线程贯通三层这样你就可以根据需要，将一些非线程安全的变量以ThreadLocal存放，在同一次请求响应的调用线程中，所有关联的对象引用到的都是同一个变量。<br>　　下面的实例能够体现Spring对有状态Bean的改造思路：<br>代码清单3 TestDao：非线程安全<br>[java] view plain copy print?在CODE上查看代码片派生到我的代码片</t></p><pre><code>package com.test;  import java.sql.Connection;  import java.sql.SQLException;  import java.sql.Statement;  public class TestDao {      private Connection conn;// ①一个非线程安全的变量      public void addTopic() throws SQLException {          Statement stat = conn.createStatement();// ②引用非线程安全变量          // …      }  }  </code></pre><p>由于①处的conn是成员变量，因为addTopic()方法是非线程安全的，必须在使用时创建一个新TopicDao实例（非singleton）。下面使用ThreadLocal对conn这个非线程安全的“状态”进行改造：<br>代码清单4 TestDao：线程安全</p><pre><code>package com.test;  import java.sql.Connection;  import java.sql.SQLException;  import java.sql.Statement;  public class TestDaoNew {      // ①使用ThreadLocal保存Connection变量      private static ThreadLocal&lt;Connection&gt; connThreadLocal = new ThreadLocal&lt;Connection&gt;();      public static Connection getConnection() {          // ②如果connThreadLocal没有本线程对应的Connection创建一个新的Connection，          // 并将其保存到线程本地变量中。          if (connThreadLocal.get() == null) {              Connection conn = getConnection();              connThreadLocal.set(conn);              return conn;          } else {              return connThreadLocal.get();// ③直接返回线程本地变量          }      }      public void addTopic() throws SQLException {          // ④从ThreadLocal中获取线程对应的Connection          Statement stat = getConnection().createStatement();      }  }  </code></pre><p>不同的线程在使用TopicDao时，先判断connThreadLocal.get()是否是null，如果是null，则说明当前线程还没有对应的Connection对象，这时创建一个Connection对象并添加到本地线程变量中；如果不为null，则说明当前的线程已经拥有了Connection对象，直接使用就可以了。这样，就保证了不同的线程使用线程相关的Connection，而不会使用其它线程的Connection。因此，这个TopicDao就可以做到singleton共享了。<br>当然，这个例子本身很粗糙，将Connection的ThreadLocal直接放在DAO只能做到本DAO的多个方法共享Connection时不发生线程安全问题，但无法和其它DAO共用同一个Connection，要做到同一事务多DAO共享同一Connection，必须在一个共同的外部类使用ThreadLocal保存Connection。</p><p>ConnectionManager.java</p><pre><code>package com.test;  import java.sql.Connection;  import java.sql.DriverManager;  import java.sql.SQLException;  public class ConnectionManager {      private static ThreadLocal&lt;Connection&gt; connectionHolder = new ThreadLocal&lt;Connection&gt;() {          @Override          protected Connection initialValue() {              Connection conn = null;              try {                  conn = DriverManager.getConnection(                          &quot;jdbc:mysql://localhost:3306/test&quot;, &quot;username&quot;,                          &quot;password&quot;);              } catch (SQLException e) {                  e.printStackTrace();              }              return conn;          }      };      public static Connection getConnection() {          return connectionHolder.get();      }      public static void setConnection(Connection conn) {          connectionHolder.set(conn);      }  }  </code></pre><p>java.lang.ThreadLocal<t>的具体实现<br>那么到底ThreadLocal类是如何实现这种“为每个线程提供不同的变量拷贝”的呢？先来看一下ThreadLocal的set()方法的源码是如何实现的：<br>[java] view plain copy print?在CODE上查看代码片派生到我的代码片</t></p><pre><code>/**     * Sets the current thread&apos;s copy of this thread-local variable     * to the specified value.  Most subclasses will have no need to     * override this method, relying solely on the {@link #initialValue}     * method to set the values of thread-locals.     *     * @param value the value to be stored in the current thread&apos;s copy of     *        this thread-local.     */     public void set(T value) {         Thread t = Thread.currentThread();         ThreadLocalMap map = getMap(t);         if (map != null)             map.set(this, value);         else             createMap(t, value);     }  </code></pre><p>在这个方法内部我们看到，首先通过getMap(Thread t)方法获取一个和当前线程相关的ThreadLocalMap，然后将变量的值设置到这个ThreadLocalMap对象中，当然如果获取到的ThreadLocalMap对象为空，就通过createMap方法创建。</p><p>线程隔离的秘密，就在于ThreadLocalMap这个类。ThreadLocalMap是ThreadLocal类的一个静态内部类，它实现了键值对的设置和获取（对比Map对象来理解），每个线程中都有一个独立的ThreadLocalMap副本，它所存储的值，只能被当前线程读取和修改。ThreadLocal类通过操作每一个线程特有的ThreadLocalMap副本，从而实现了变量访问在不同线程中的隔离。因为每个线程的变量都是自己特有的，完全不会有并发错误。还有一点就是，ThreadLocalMap存储的键值对中的键是this对象指向的ThreadLocal对象，而值就是你所设置的对象了。</p><p>为了加深理解，我们接着看上面代码中出现的getMap和createMap方法的实现：<br>[java] view plain copy print?在CODE上查看代码片派生到我的代码片</p><pre><code>/**  * Get the map associated with a ThreadLocal. Overridden in  * InheritableThreadLocal.  *  * @param  t the current thread  * @return the map  */  ThreadLocalMap getMap(Thread t) {      return t.threadLocals;  }  /**  * Create the map associated with a ThreadLocal. Overridden in  * InheritableThreadLocal.  *  * @param t the current thread  * @param firstValue value for the initial entry of the map  * @param map the map to store.  */  void createMap(Thread t, T firstValue) {      t.threadLocals = new ThreadLocalMap(this, firstValue);  }  </code></pre><p>接下来再看一下ThreadLocal类中的get()方法:<br>[java] view plain copy print?在CODE上查看代码片派生到我的代码片</p><pre><code>/**  * Returns the value in the current thread&apos;s copy of this  * thread-local variable.  If the variable has no value for the  * current thread, it is first initialized to the value returned  * by an invocation of the {@link #initialValue} method.  *  * @return the current thread&apos;s value of this thread-local  */  public T get() {      Thread t = Thread.currentThread();      ThreadLocalMap map = getMap(t);      if (map != null) {          ThreadLocalMap.Entry e = map.getEntry(this);          if (e != null)              return (T)e.value;      }      return setInitialValue();  }  </code></pre><p>再来看setInitialValue()方法：</p><pre><code>/**     * Variant of set() to establish initialValue. Used instead     * of set() in case user has overridden the set() method.     *     * @return the initial value     */     private T setInitialValue() {         T value = initialValue();         Thread t = Thread.currentThread();         ThreadLocalMap map = getMap(t);         if (map != null)             map.set(this, value);         else             createMap(t, value);         return value;     }  </code></pre><p>　　获取和当前线程绑定的值时，ThreadLocalMap对象是以this指向的ThreadLocal对象为键进行查找的，这当然和前面set()方法的代码是相呼应的。</p><p>　　进一步地，我们可以创建不同的ThreadLocal实例来实现多个变量在不同线程间的访问隔离，为什么可以这么做？因为不同的ThreadLocal对象作为不同键，当然也可以在线程的ThreadLocalMap对象中设置不同的值了。通过ThreadLocal对象，在多线程中共享一个值和多个值的区别，就像你在一个HashMap对象中存储一个键值对和多个键值对一样，仅此而已。</p><p>小结<br>　　ThreadLocal是解决线程安全问题一个很好的思路，它通过为每个线程提供一个独立的变量副本解决了变量并发访问的冲突问题。在很多情况下，ThreadLocal比直接使用synchronized同步机制解决线程安全问题更简单，更方便，且结果程序拥有更高的并发性。<br>ConnectionManager.java</p><pre><code>package com.test;  import java.sql.Connection;  import java.sql.DriverManager;  import java.sql.SQLException;  public class ConnectionManager {      private static ThreadLocal&lt;Connection&gt; connectionHolder = new ThreadLocal&lt;Connection&gt;() {          @Override          protected Connection initialValue() {              Connection conn = null;              try {                  conn = DriverManager.getConnection(                          &quot;jdbc:mysql://localhost:3306/test&quot;, &quot;username&quot;,                          &quot;password&quot;);              } catch (SQLException e) {                  e.printStackTrace();              }              return conn;          }      };      public static Connection getConnection() {          return connectionHolder.get();      }      public static void setConnection(Connection conn) {          connectionHolder.set(conn);      }  }  </code></pre>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadLocal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dbcp, c3p0, druid工具类</title>
      <link href="/2017/02/14/2017_dcd/"/>
      <url>/2017/02/14/2017_dcd/</url>
      
        <content type="html"><![CDATA[<h1>DBCP工具类</h1><pre><code>public class DBCPUtils {    private static DataSource dataSource = null;    static {        Properties properties = new Properties();        try {            properties.load(DBCPUtils.class.getClassLoader().getResourceAsStream("com/jdbc/jdbc.properties"));            dataSource = BasicDataSourceFactory.createDataSource(properties);        } catch (Exception e) {            e.printStackTrace();        }    }    public DBCPUtils() {    }    public static Connection getConnetcion(){        Connection connection = null;        try {            connection = dataSource.getConnection();        } catch (SQLException e) {            e.printStackTrace();        }        return connection;    }    public static void releaseConnecion(Connection connection){        if(null != connection){            try {                connection.close();            } catch (SQLException e) {                e.printStackTrace();            }        }    }}</code></pre><a id="more"></a><pre><code>#驱动driverClassName=com.mysql.jdbc.Driver#数据库连接地址url=jdbc:mysql://127.0.0.1:3306/test?zeroDateTimeBehavior=convertToNull&amp;useUnicode=true&amp;characterEncoding=UTF-8#用户名username=root#密码password=anyao112233#初始化连接initialSize=10#连接池的最大数据库连接数。设为0表示无限制maxTotal=50##最小空闲连接minIdle=10#最大空闲数，数据库连接的最大空闲数。超过空闲时间，数据库连接将被标记为不可用，然后被释放。设为0表示无限制#空闲连接:意思就是连接了数据库而最大的没有向数据库发送请求的连接maxIdle=50#超过时间限制，回收没有用(废弃)的连接（默认为 300秒） 以秒为单位removeAbandonedTimeout=60#超过removeAbandonedTimeout时间后，是否进行没用连接（废弃）的回收（默认为false，调整为true)removeAbandoned=true#最大建立连接等待时间 超过此时间将异常 设为-1表示无限制 以毫秒为单位maxWaitMillis=60000#在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. 如果设置为非正数,则不运行空闲连接回收器线程(每60秒运行一次空闲连接回收器)timeBetweenEvictionRunsMillis=60000#连接在池中保持空闲而不被空闲连接回收器线程(如果有)回收的最小时间值，单位毫秒(池中的连接空闲30s后被回收,默认值就是30分钟)minEvictableIdleTimeMillis=300000</code></pre><h1>C3P0工具类</h1><pre><code>public class C3P0Utils {    private static DataSource dataSource = null;    private static ThreadLocal<connection> threadLocal = new ThreadLocal<connection>();    static {        //自动加载src下c3p0的配置文件【c3p0-config.xml】        dataSource = new ComboPooledDataSource("myApp");    }    public C3P0Utils() {    }    public static void beginTransaction(Connection connection) {            try {                    connection.setAutoCommit(false);            } catch (SQLException e) {                    e.printStackTrace();            }    }    public static void commitTransaction(Connection connection) {            try {                    connection.commit();            } catch (SQLException e) {                    e.printStackTrace();            }    }    public static Connection getConnetcion() {        Connection connection = threadLocal.get();//得到当前线程上绑定的连接        try {            if (connection == null || !connection.isClosed()) {                //当前没有绑定连接                connection = dataSource.getConnection();//新建连接                threadLocal.set(connection);//将局部变量connection的值设置为conn            }        } catch (SQLException e) {            e.printStackTrace();        }        return connection;    }    public static void releaseConnecion() {        Connection connection = threadLocal.get();        try {            if (null != connection && !connection.isClosed()) {                connection.close();                //从线程局部变量中移除conn，如果没有移除掉，下次还会用这个已经关闭的连接，就会出错                threadLocal.remove();            }        } catch (SQLException e) {            e.printStackTrace();        }    }}</connection></connection></code></pre><pre><code>    &lt;c3p0-config&gt;    &lt;default-config&gt;        &lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;        &lt;property name=&quot;password&quot;&gt;anyao112233&lt;/property&gt;        &lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;        &lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql://localhost:3306/test&lt;/property&gt;        &lt;property name=&quot;initialPoolSize&quot;&gt;10&lt;/property&gt;        &lt;property name=&quot;maxIdleTime&quot;&gt;30&lt;/property&gt;        &lt;property name=&quot;maxPoolSize&quot;&gt;100&lt;/property&gt;        &lt;property name=&quot;minPoolSize&quot;&gt;10&lt;/property&gt;    &lt;/default-config&gt;    &lt;named-config name=&quot;myApp&quot;&gt;        &lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;        &lt;property name=&quot;password&quot;&gt;anyao112233&lt;/property&gt;        &lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;        &lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql://localhost:3306/test&lt;/property&gt;        &lt;property name=&quot;initialPoolSize&quot;&gt;10&lt;/property&gt;        &lt;property name=&quot;maxIdleTime&quot;&gt;30&lt;/property&gt;        &lt;property name=&quot;maxPoolSize&quot;&gt;100&lt;/property&gt;        &lt;property name=&quot;minPoolSize&quot;&gt;10&lt;/property&gt;    &lt;/named-config&gt;&lt;/c3p0-config&gt;</code></pre><h1>DRUID工具类</h1><p><code></code></p>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBCP </tag>
            
            <tag> C3P0 </tag>
            
            <tag> DRUID </tag>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c3p0参数解释(转载)</title>
      <link href="/2017/02/14/2017_c3p0/"/>
      <url>/2017/02/14/2017_c3p0/</url>
      
        <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/xb12369/article/details/41517409" target="_blank" rel="noopener">http://blog.csdn.net/xb12369/article/details/41517409</a></p><p>#最常用配置</p><p>#initialPoolSize：连接池初始化时创建的连接数,default : 3，取值应在minPoolSize与maxPoolSize之间<br>c3p0.initialPoolSize=10</p><p>#minPoolSize：连接池保持的最小连接数,default : 3<br>c3p0.minPoolSize=10</p><p>#maxPoolSize：连接池中拥有的最大连接数，如果获得新连接时会使连接总数超过这个值则不会再获取新连接，而是等待其他连接释放，所以这个值有可能会设计地很大,default : 15<br>c3p0.maxPoolSize=50</p><p>#acquireIncrement：连接池在无空闲连接可用时一次性创建的新数据库连接数,default : 3<br>c3p0.acquireIncrement=5</p><a id="more"></a><p>#管理连接池的大小和连接的生存时间</p><p>#maxIdleTime：连接的最大空闲时间，如果超过这个时间，某个数据库连接还没有被使用，则会断开掉这个连接。如果为0，则永远不会断开连接,即回收此连接。default : 0 单位 s<br>c3p0.maxIdleTime=600</p><p>#idleConnectionTestPeriod：每900秒检查所有连接池中的空闲连接<br>c3p0.idleConnectionTestPeriod=900</p><p>#配置PreparedStatement缓存</p><p>#连接池为数据源缓存的PreparedStatement的总数。由于PreparedStatement属于单个Connection,所以这个数量应该根据应用中平均连接数乘以每个连接的平均PreparedStatement</p><p>#来计算。同时maxStatementsPerConnection的配置无效。default : 0（不建议使用）<br>c3p0.maxStatements=500</p><p>#连接池为数据源单个Connection缓存的PreparedStatement数，这个配置比maxStatements更有意义，因为它缓存的服务对象是单个数据连接，</p><p>#如果设置的好，肯定是可以提高性能的。为0的时候不缓存。default : 0（看情况而论）<br>c3p0.maxStatementsPerConnection=30</p><p>#重连相关配置 </p><p>#acquireRetryAttempts：连接池在获得新连接失败时重试的次数，如果小于等于0则无限重试直至连接获得成功。default : 30（建议使用）<br>c3p0.acquireRetryAttempts=5</p><p>#acquireRetryDelay:两次连接中间隔时间，单位毫秒，连接池在获得新连接时的间隔时间。default : 1000 单位ms（建议使用）<br>c3p0.acquireRetryDelay=1000</p><p>#breakAfterAcquireFailure：如果为true，则当连接获取失败时自动关闭数据源，除非重新启动应用程序。所以一般不用。default : false（不建议使用）<br>c3p0.breakAfterAcquireFailure=false</p><p>#checkoutTimeout：配置当连接池所有连接用完时应用程序getConnection的等待时间。为0则无限等待直至有其他连接释放或者创建新的连接，</p><p>#不为0则当时间到的时候如果仍没有获得连接，则会抛出SQLException。其实就是acquireRetryAttempts*acquireRetryDelay。default : 0（与上面两个，有重复，选择其中两个都行）<br>c3p0.checkoutTimeout=100</p><p>#其他</p><p>#autoCommitOnClose：连接池在回收数据库连接时是否自动提交事务。如果为false，则会回滚未提交的事务，如果为true，则会自动提交事务。default : false（不建议使用）<br>c3p0.autoCommitOnClose=false</p><p>#c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过多线程实现多个操作同时被执行。Default: 3<br>c3p0.numHelperThreads=10</p>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C3P0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dbcp,c3p0,druid简单实例(包含配置介绍)</title>
      <link href="/2017/02/13/2017_three_pools/"/>
      <url>/2017/02/13/2017_three_pools/</url>
      
        <content type="html"><![CDATA[<h1 id="三种连接池的配置-dbcp、c3p0、druid"><a href="#三种连接池的配置-dbcp、c3p0、druid" class="headerlink" title="三种连接池的配置:dbcp、c3p0、druid"></a><strong>三种连接池的配置:dbcp、c3p0、druid</strong></h1><a id="more"></a><h1 id="dbcp"><a href="#dbcp" class="headerlink" title="dbcp"></a>dbcp</h1><h2 id="1-硬编码方式"><a href="#1-硬编码方式" class="headerlink" title="1.硬编码方式"></a>1.硬编码方式</h2><pre><code>   @Test    public void testDBCPCode() {        //BasicDataSource实现接口DataSource   DBCP连接池核心类        BasicDataSource dataSouce = new BasicDataSource();        dataSouce.setDriverClassName(&quot;com.mysql.jdbc.Driver&quot;);  //驱动        dataSouce.setUrl(&quot;jdbc:mysql://127.0.0.1:3306/test&quot;);   //数据库连接字符串        dataSouce.setUsername(&quot;root&quot;);                          //数据库用户名        dataSouce.setPassword(&quot;anyao112233&quot;);                   //数据库密码        dataSouce.setInitialSize(5);                            //设置初始化连接数        dataSouce.setMaxTotal(5);                               //设置最大连接数        dataSouce.setMaxWaitMillis(10000);                      //设置申请连接最大等待时间        dataSouce.setRemoveAbandonedTimeout(60);                //设置空闲连接时长 超过就回收没用的连接        Connection connection = null;        try {            connection = dataSouce.getConnection();//            connection.prepareStatement(&quot;update student set f_name = &apos;fuk&apos; where f_id = 10&quot;).executeUpdate();            System.out.println(connection.getClass() + &quot;\n&quot; + connection.getMetaData() + &quot;\n&quot;);        } catch (SQLException e) {            e.printStackTrace();        } finally {            // 关闭            if (connection != null) {                try {                    connection.close();                } catch (SQLException e) {                    e.printStackTrace();                }            }        }    }</code></pre><h2 id="2-配置方式"><a href="#2-配置方式" class="headerlink" title="2.配置方式"></a>2.配置方式</h2><p> <em>文件jdbc.properties</em></p><pre><code>#驱动driverClassName=com.mysql.jdbc.Driver#数据库连接地址url=jdbc:mysql://127.0.0.1:3306/test?zeroDateTimeBehavior=convertToNull&amp;useUnicode=true&amp;characterEncoding=UTF-8#用户名username=root#密码password=anyao112233#初始化连接initialSize=10#连接池的最大数据库连接数。设为0表示无限制maxTotal=50##最小空闲连接minIdle=10#最大空闲数，数据库连接的最大空闲数。超过空闲时间，数据库连接将被标记为不可用，然后被释放。设为0表示无限制#空闲连接:意思就是连接了数据库而最大的没有向数据库发送请求的连接maxIdle=50#超过时间限制，回收没有用(废弃)的连接（默认为 300秒） 以秒为单位removeAbandonedTimeout=60#超过removeAbandonedTimeout时间后，是否进行没用连接（废弃）的回收（默认为false，调整为true)removeAbandoned=true#最大建立连接等待时间 超过此时间将异常 设为-1表示无限制 以毫秒为单位maxWaitMillis=60000#在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. 如果设置为非正数,则不运行空闲连接回收器线程(每60秒运行一次空闲连接回收器)timeBetweenEvictionRunsMillis=60000#连接在池中保持空闲而不被空闲连接回收器线程(如果有)回收的最小时间值，单位毫秒(池中的连接空闲30s后被回收,默认值就是30分钟)minEvictableIdleTimeMillis=300000   @Test    public void testDBCPXML() throws Exception {        Connection connection = null;        try {            Properties prop = new Properties();            InputStream inStream = this.getClass().getClassLoader()                        .getResourceAsStream(&quot;jdbc.properties&quot;);            prop.load(inStream);            System.out.println(prop);            // 根据prop配置，直接创建数据源对象(BasicDataSourceFactory工厂)            DataSource dataSouce = BasicDataSourceFactory.createDataSource(prop);            // 获取连接            connection = dataSouce.getConnection();//            connection.prepareStatement(&quot;delete from student where f_id=1&quot;).executeUpdate();        } catch (SQLException e) {            e.printStackTrace();        } finally {            // 关闭            if (connection != null) {                try {                    connection.close();                } catch (SQLException e) {                    e.printStackTrace();                }            }        }    }</code></pre><hr><h1 id="C3P0"><a href="#C3P0" class="headerlink" title=" C3P0"></a><strong> C3P0</strong></h1><h2 id="1-硬编码方式-1"><a href="#1-硬编码方式-1" class="headerlink" title="1.硬编码方式"></a>1.硬编码方式</h2><pre><code>@Test public void testC3P0Code() throws Exception {     // 创建连接池核心工具类     ComboPooledDataSource dataSource = new ComboPooledDataSource();     dataSource.setJdbcUrl(&quot;jdbc:mysql://localhost:3306/test&quot;);     dataSource.setDriverClass(&quot;com.mysql.jdbc.Driver&quot;);     dataSource.setUser(&quot;root&quot;);     dataSource.setPassword(&quot;anyao112233&quot;);     dataSource.setInitialPoolSize(3);//连接池初始化时创建的连接数     dataSource.setMaxPoolSize(6);//连接池中拥有的最大连接数     dataSource.setMaxIdleTime(1000);     Connection connection = null;     try {         connection = dataSource.getConnection();         connection.prepareStatement(&quot;delete from student where f_name like &apos;%name%&apos;&quot;).executeUpdate();     } catch (SQLException e) {         e.printStackTrace();     } finally {         if (connection != null) {             try {                 connection.close();             } catch (SQLException e) {                 e.printStackTrace();             }         }     } }</code></pre><h2 id="2-配置方式-1"><a href="#2-配置方式-1" class="headerlink" title="2.配置方式"></a>2.配置方式</h2><pre><code>&lt;c3p0-config&gt;    &lt;default-config&gt;            &lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;            &lt;property name=&quot;password&quot;&gt;anyao112233&lt;/property&gt;            &lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;            &lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql://localhost:3306/test&lt;/property&gt;            &lt;property name=&quot;initialPoolSize&quot;&gt;10&lt;/property&gt;            &lt;property name=&quot;maxIdleTime&quot;&gt;30&lt;/property&gt;            &lt;property name=&quot;maxPoolSize&quot;&gt;100&lt;/property&gt;            &lt;property name=&quot;minPoolSize&quot;&gt;10&lt;/property&gt;    &lt;/default-config&gt;    &lt;named-config name=&quot;myApp&quot;&gt;            &lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;            &lt;property name=&quot;password&quot;&gt;anyao112233&lt;/property&gt;            &lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;            &lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql://localhost:3306/test&lt;/property&gt;            &lt;property name=&quot;initialPoolSize&quot;&gt;10&lt;/property&gt;            &lt;property name=&quot;maxIdleTime&quot;&gt;30&lt;/property&gt;            &lt;property name=&quot;maxPoolSize&quot;&gt;100&lt;/property&gt;            &lt;property name=&quot;minPoolSize&quot;&gt;10&lt;/property&gt;    &lt;/named-config&gt;&lt;/c3p0-config&gt;  @Testpublic void testC3P0XML() throws Exception {        // 创建c3p0连接池核心工具类        // 自动加载src下c3p0的配置文件【c3p0-config.xml】        //如果要使用default-config无需传参数，        //如果要使用named-config里面配置初始化数据源，则只要使用一个带参数的ComboPooledDataSource构造器就可以了        DataSource dataSource = new ComboPooledDataSource(&quot;myApp&quot;);        Connection connection = null;        try {                connection = dataSource.getConnection();                connection.prepareStatement(&quot;delete from student where f_id = 20&quot;).executeUpdate();        } catch (SQLException e) {                e.printStackTrace();        } finally {                if (connection != null) {                        try {                                connection.close();                        } catch (SQLException e) {                                e.printStackTrace();                        }                }        }    }</code></pre><hr><h1 id="DRUID"><a href="#DRUID" class="headerlink" title=" DRUID"></a><strong> DRUID</strong></h1><h2 id="1-硬编码方式-2"><a href="#1-硬编码方式-2" class="headerlink" title="1.硬编码方式"></a>1.硬编码方式</h2><h2 id="2-配置方式-2"><a href="#2-配置方式-2" class="headerlink" title="2.配置方式"></a>2.配置方式</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库连接池 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBCP </tag>
            
            <tag> C3P0 </tag>
            
            <tag> DRUID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DBCP连接池介绍(转载)</title>
      <link href="/2017/02/12/2017_DBCP/"/>
      <url>/2017/02/12/2017_DBCP/</url>
      
        <content type="html"><![CDATA[<p><em>文章发表时间: 2014-03-07,现在情况可能不同</em>   <a href="http://www.myhack58.com/Article/60/61/2014/42761.htm" target="_blank" rel="noopener">http://www.myhack58.com/Article/60/61/2014/42761.htm</a></p><p> DBCP连接池介绍</p><hr><p>目前 DBCP 有两个版本分别是 1.3 和 1.4。<br>DBCP 1.3 版本需要运行于 JDK 1.4-1.5 ，支持 JDBC 3。<br>DBCP 1.4 版本需要运行于 JDK 1.6 ，支持 JDBC 4。<br>1.3和1.4基于同一套源代码，含有所有的bug修复和新特性。因此在选择DBCP版本的时候，要看你用的是什么JDK版本。<br>DBCP1.2版本性能一般，比c3p0差挺多。DBCP1.4和1.3，配合（依赖）commons pool 1.6的jar包,各方面功能、性能推进到新的高峰。相对1.2版本提高不少。超越(或相当)了c3p0.建议使用DBCP1.4或1.3 +  commons pool 1.6</p><p>Tomcat7 中保留DBCP连接池，以兼容已有应用。并提供了新的Tomcat JDBC pool作为DBCP的可选替代。新出的Tomcat JDBC pool，据说比DBCP 1.4要好，未接触，也不在本文讨论范围内。</p><p>DBCP连接池配置参数讲解</p><hr><a id="more"></a><p>一、Apache官方DBCP文档给出的配置示例：<br>可参见：<a href="http://tomcat.apache.org/tomcat-6.0-doc/jndi-datasource-examples-howto.html" target="_blank" rel="noopener">http://tomcat.apache.org/tomcat-6.0-doc/jndi-datasource-examples-howto.html</a></p><context><br>  <resource name="jdbc/TestDB" auth="Container" type="javax.sql.DataSource" maxactive="100" maxidle="30" maxwait="10000" username="javauser" password="javadude" driverclassname="com.mysql.jdbc.Driver" url="jdbc:mysql://localhost:3306/javatest"><br></resource></context><p>二、常用参数说明：<br>可参见：<a href="http://elf8848.iteye.com/blog/337981" target="_blank" rel="noopener">http://elf8848.iteye.com/blog/337981</a></p><pre><code>&lt;Resource    name=&quot;jdbc/TestDB&quot;  JNDI数据源的name    type=&quot;javax.sql.DataSource&quot;    driverClassName=&quot;com.mysql.jdbc.Driver&quot; JDBC驱动类    url=&quot;&quot;    username=&quot;&quot; 访问数据库用户名    password=&quot;&quot; 访问数据库的密码    maxActive=&quot;80&quot; 最大活动连接 //我使用版本是2.1,最大连接名称变为maxTotal    initialSize=&quot;10&quot;  初始化连接    maxIdle=&quot;60&quot;   最大空闲连接    minIdle=&quot;10&quot;   最小空闲连接    maxWait=&quot;3000&quot; 从池中取连接的最大等待时间，单位ms.    validationQuery = &quot;SELECT 1&quot;  验证使用的SQL语句    testWhileIdle = &quot;true&quot;      指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除.    testOnBorrow = &quot;false&quot;   借出连接时不要测试，否则很影响性能    timeBetweenEvictionRunsMillis = &quot;30000&quot;  每30秒运行一次空闲连接回收器    minEvictableIdleTimeMillis = &quot;1800000&quot;  池中的连接空闲30分钟后被回收    numTestsPerEvictionRun=&quot;3&quot; 在每次空闲连接回收器线程(如果有)运行时检查的连接数量    removeAbandoned=&quot;true&quot;  连接泄漏回收参数，当可用连接数少于3个时才执行    removeAbandonedTimeout=&quot;180&quot;  连接泄漏回收参数，180秒，泄露的连接可以被删除的超时值/&gt;</code></pre><p>DBCP连接池的自我检测</p><hr><p>默认配置的DBCP连接池，是不对池中的连接做测试的，有时连接已断开了，但DBCP连接池不知道，还以为连接是好的呢。<br>应用从池中取出这样的连接访问数据库一定会报错。这也是好多人不喜欢DBCP的原因。</p><p>问题例一：<br>MySQL8小时问题，Mysql服务器默认连接的“wait_timeout”是8小时，也就是说一个connection空闲超过8个小时，Mysql将自动断开该 connection。<br>但是DBCP连接池并不知道连接已经断开了，如果程序正巧使用到这个已经断开的连接，程序就会报错误。</p><p>问题例二：<br>    以前还使用Sybase数据库，由于某种原因，数据库死了后重启、或断网后恢复。<br>    等了约10分钟后，DBCP连接池中的连接还都是不能使用的（断开的），访问数据应用一直报错，最后只能重启Tomcat问题才解决 。</p><p>解决方案：<br>    方案1、定时对连接做测试，测试失败就关闭连接。<br>    方案2、控制连接的空闲时间达到N分钟，就关闭连接，（然后可再新建连接）。<br>    以上两个方案使用任意一个就可以解决以述两类问题。如果只使用方案2，建议 N &lt;= 5分钟。连接断开后最多5分钟后可恢复。<br>    也可混合使用两个方案，建议 N = 30分钟。</p><pre><code>下面就是DBCP连接池，同时使用了以上两个方案的配置配置validationQuery = &quot;SELECT 1&quot;  验证连接是否可用，使用的SQL语句testWhileIdle = &quot;true&quot;      指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除.testOnBorrow = &quot;false&quot;   借出连接时不要测试，否则很影响性能      timeBetweenEvictionRunsMillis = &quot;30000&quot;  每30秒运行一次空闲连接回收器minEvictableIdleTimeMillis = &quot;1800000&quot;  池中的连接空闲30分钟后被回收,默认值就是30分钟。numTestsPerEvictionRun=&quot;3&quot; 在每次空闲连接回收器线程(如果有)运行时检查的连接数量，默认值就是3.解释：配置timeBetweenEvictionRunsMillis = &quot;30000&quot;后，每30秒运行一次空闲连接回收器（独立纯种）。并每次检查3个连接，如果连接空闲时间超过30分钟就销毁。销毁连接后，连接数量就少了，如果小于minIdle数量，就新建连接，维护数量不少于minIdle，过行了新老更替。testWhileIdle = &quot;true&quot; 表示每30秒，取出3条连接，使用validationQuery = &quot;SELECT 1&quot; 中的SQL进行测试 ，测试不成功就销毁连接。销毁连接后，连接数量就少了，如果小于minIdle数量，就新建连接。testOnBorrow = &quot;false&quot; 一定要配置，因为它的默认值是true。false表示每次从连接池中取出连接时，不需要执行validationQuery = &quot;SELECT 1&quot; 中的SQL进行测试。若配置为true,对性能有非常大的影响，性能会下降7-10倍。所在一定要配置为false.每30秒，取出numTestsPerEvictionRun条连接（本例是3，也是默认值），发出&quot;SELECT 1&quot; SQL语句进行测试 ，测试过的连接不算是“被使用”了，还算是空闲的。连接空闲30分钟后会被销毁。</code></pre><hr><p>DBCP连接池配置参数注意事项  </p><p>maxIdle值与maxActive值应配置的接近。<br>因为，当连接数超过maxIdle值后，刚刚使用完的连接（刚刚空闲下来）会立即被销毁。而不是我想要的空闲M秒后再销毁起一个缓冲作用。这一点DBCP做的可能与你想像的不一样。<br>若maxIdle应与maxActive相差较大，在高负载的系统中会导致频繁的创建、销毁连接，连接数在maxIdle与maxActive间快速频繁波动，这不是我想要的。<br>高负载的系统的maxIdle值可以设置为与maxActive相同或设置为-1(-1表示不限制)，让连接数量在minIdle与maxIdle间缓冲慢速波动。</p><p>timeBetweenEvictionRunsMillis建议设置值<br>initialSize=”5”，会在tomcat一启动时，创建5条连接，效果很理想。<br>但同时我们还配置了minIdle=”10”，也就是说，最少要保持10条连接，那现在只有5条连接，哪什么时候再创建少的5条连接呢？<br>1、等业务压力上来了， DBCP就会创建新的连接。<br>2、配置timeBetweenEvictionRunsMillis=“时间”,DBCP会启用独立的工作线程定时检查，补上少的5条连接。销毁多余的连接也是同理。</p><hr><p>连接销毁的逻辑</p><p>DBCP的连接数会在  0 - minIdle - maxIdle - maxActive  之间变化。变化的逻辑描述如下：</p><p>默认未配置initialSize(默认值是0)和timeBetweenEvictionRunsMillis参数时，刚启动tomcat时，连接数是0。当应用有一个并发访问数据库时DBCP创建一个连接。<br>目前连接数量还未达到minIdle，但DBCP也不自动创建新连接已使数量达到minIdle数量（没有一个独立的工作线程来检查和创建）。<br>随着应用并发访问数据库的增多，连接数也增多，但都与minIdle值无关，很快minIdle被超越，minIdle值一点用都没有。<br>直到连接的数量达到maxIdle值，这时的连接都是只增不减的。 再继续发展，连接数再增多并超过maxIdle时，使用完的连接（刚刚空闲下来的）会立即关闭，总体连接的数量稳定在maxIdle但不会超过maxIdle。<br>但活动连接（在使用中的连接）可能数量上瞬间超过maxIdle，但永远不会超过maxActive。<br>这时如果应用业务压力小了，访问数据库的并发少了，连接数也不会减少（没有一个独立的线程来检查和销毁），将保持在maxIdle的数量。</p><p>默认未配置initialSize(默认值是0)，但配置了timeBetweenEvictionRunsMillis=“30000”（30秒）参数时，刚启动tomcat时，连接数是0。马上应用有一个并发访问数据库时DBCP创建一个连接。<br>目前连接数量还未达到minIdle，每30秒DBCP的工作线程检查连接数是否少于minIdle数量，若少于就创建新连接直到达到minIdle数量。<br>随着应用并发访问数据库的增多，连接数也增多，直到达到maxIdle值。这期间每30秒DBCP的工作线程检查连接是否空闲了30分钟，若是就销毁。但此时是业务的高峰期，是不会有长达30分钟的空闲连接的，工作线程查了也是白查，但它在工作。到这里连接数量一直是呈现增长的趋势。<br>当连接数再增多超过maxIdle时，使用完的连接(刚刚空闲下来)会立即关闭，总体连接的数量稳定在maxIdle。停止了增长的趋势。但活动连接（在使用中的连接）可能数量上瞬间超过maxIdle，但永远不会超过maxActive。<br>这时如果应用业务压力小了，访问数据库的并发少了，每30秒DBCP的工作线程检查连接(默认每次查3条)是否空闲达到30分钟(这是默认值)，若连接空闲达到30分钟，就销毁连接。这时连接数减少了，呈下降趋势，将从maxIdle走向minIdle。当小于minIdle值时，则DBCP创建新连接已使数量稳定在minIdle，并进行着新老更替。</p><p>配置initialSize=“10”时，tomcat一启动就创建10条连接。其它同上。</p><p>minIdle要与timeBetweenEvictionRunsMillis配合使用才有用,单独使用minIdle不会起作用。</p><hr><p>Tomcat中配置DBCP连接池</p><p>Tomcat自带DBCP的包，是$CATALINA_HOME/lib/tomcat-dbcp.jar。<br>omcat-dbcp.jar含有commons pool、commons DBCP两个包的内容。但只含有与连接池有关的类。<br>数据源配置在context.xml文件中， 要在tomcat的lib目录中放jdbc 驱动包<br>数据源配置在server.xml的host中，不需要在tomcat的lib目录中放jdbc 驱动包，只使用工程中的jdbc驱动包</p><p>JNDI配置:更改tomcat的server.xml或context.xml</p><pre><code>全局的数据源：如果需要配置全局的 Resource，则在server.xml的GlobalNamingResources节点里加入Resource，再在Context节点里加入ResourceLink的配置。全局的resource只是为了重用，方便所有该tomcat下的web工程的数据源管理，但如果你的tomcat不会同时加载多个web工程，也就是说一个tomcat只加载一个web工程时，是没有必要配置全局的resource的。</code></pre><p>每个web工程一个数据源：<br>在$CATALINA_HOME/conf/context.xml的根节点Context里加入Resource配置。这种配置方法，你在context.xml配置了一个数据源，但Tomcat中有同时运行着5个工程，那了就坏事儿了，这个在Tomcat启动时数据源被创建了5份，每个工程1份数据源。连接数会是你配置的参数的5倍。<br>只有在你的Tomcat只加载一个web工程时,才可以直接以context.xml配置数据源。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">"jdbc/testDB"</span>       //指定的<span class="attr">jndi</span>名称，会用于<span class="attr">spring</span>数据源<span class="attr">bean</span>的配置和<span class="attr">ResourceLink</span>的配置</span></span><br><span class="line"><span class="tag">               <span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span>   //数据源床型，使用标准的<span class="attr">javax.sql.DataSource</span></span></span><br><span class="line"><span class="tag">               <span class="attr">driverClassName</span>=<span class="string">"com.mysql.jdbc.Driver"</span>    //<span class="attr">JDBC</span>驱动器 </span></span><br><span class="line"><span class="tag">               <span class="attr">url</span>=<span class="string">"jdbc:mysql://localhost:3306/test"</span> //数据库<span class="attr">URL</span>地址             </span></span><br><span class="line"><span class="tag">               <span class="attr">username</span>=<span class="string">"test"</span>     //数据库用户名</span></span><br><span class="line"><span class="tag">               <span class="attr">password</span>=<span class="string">"test"</span>   //数据库密码</span></span><br><span class="line"><span class="tag">               <span class="attr">maxIdle</span>=<span class="string">"40"</span>   //最大的空闲连接数</span></span><br><span class="line"><span class="tag">               <span class="attr">maxWait</span>=<span class="string">"4000"</span> //当池的数据库连接已经被占用的时候，最大等待时间</span></span><br><span class="line"><span class="tag">               <span class="attr">maxActive</span>=<span class="string">"40"</span> //连接池当中最大的数据库连接</span></span><br><span class="line"><span class="tag">               <span class="attr">removeAbandoned</span>=<span class="string">"true"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">removeAbandonedTimeout</span>=<span class="string">"180"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">logAbandoned</span>=<span class="string">"true"</span> //被丢弃的数据库连接是否做记录，以便跟踪</span></span><br><span class="line"><span class="tag">               <span class="attr">factory</span>=<span class="string">"org.apache.tomcat.dbcp.dbcp.BasicDataSourceFactory"</span> /&gt;</span></span><br></pre></td></tr></table></figure><pre><code> 这里的factory指的是该Resource 配置使用的是哪个数据源配置类，这里使用的是tomcat自带的标准数据源Resource配置类，这个类也可以自己写，实现javax.naming.spi.ObjectFactory 接口即可。某些地方使用的commons-dbcp.jar中的org.apache.commons.dbcp.BasicDataSourceFactory，如果使用这个就需把commons-dbcp.jar及其依赖的jar包，都放在tomcat的lib下，光放在工程的WEB-INF/lib下是不够的。ResourceLink 的配置有多种：1)tomcat安装目录下的conf/context.xml，把全局的resource直接公开给该tomcat下的所有web工程，在Context节点中加入：</code></pre><p><resourcelink global="jdbc/testMDB" name="jdbc/testMDB" type="javax.sql.DataSource"><br>不建议在此文件中，不使用<resourcelink>，而使用<resource>直接配置数据源，原因上面已说明了。   </resource></resourcelink></resourcelink></p><pre><code>2)tomcat安装目录下的conf/server.xml，该方法可以指定把哪些source绑定到哪个web工程下。</code></pre><!-- 新增，第一行为加载的工程配置，第二行是该工程需要的ResourceLink配置 --><p><context docbase="/web/webapps/phoenix" path reloadable="false"><br>      <resourcelink global="jdbc/testMDB" name="jdbc/testMDB" type="javax.sql.DataSource"><br></resourcelink></context><br>也可在此文件中，不使用<resourcelink>，而使用<resource>直接配置数据源。</resource></resourcelink></p><pre><code>3)安装目录下的conf/localhost/下建立一个xml文件，文件名是&lt;yourAppName&gt;.xml。比如工程名为test，则该xml名为test.xml。</code></pre><p>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</p><p><context><br>    <resourcelink global="jdbc/testMDB" name="jdbc/testMDB" type="javax.sql.DataSource"><br></resourcelink></context><br>也可在此文件中，不使用<resourcelink>，而使用<resource>直接配置数据源。</resource></resourcelink></p><pre><code>4)tomcat安装目录下的\webapps\test\META-INF\context.xml的Context节点中增加:</code></pre><p><resourcelink global="jdbc/testMDB" name="jdbc/testMDB" type="javax.sql.DataSource"><br>也可在此文件中，不使用<resourcelink>，而使用<resource>直接配置数据源。</resource></resourcelink></resourcelink></p><p>本文内容都在tomcat6.0上运行测试过，还下载了commons DBCP的源码，加入了跟踪日志，用于验证本文的理论。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库连接池 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库连接池作用(转载)</title>
      <link href="/2017/02/12/2017_ljc/"/>
      <url>/2017/02/12/2017_ljc/</url>
      
        <content type="html"><![CDATA[<p>连接池的作用就是为了提高性能。</p><pre><code>连接池的作用：连接池是将已经创建好的连接保存在池中，      当有请求来时，直接使用已经创建好的连接对数据库进行访问。      这样省略了创建连接和销毁连接的过程。这样性能上得到了提高。</code></pre><a id="more"></a><p>基本原理是这样的：</p><p>（1）建立数据库连接池对象（服务器启动）。</p><p>（2）按照事先指定的参数创建初始数量的数据库连接（即：空闲连接数）。</p><p>（3）对于一个数据库访问请求，直接从连接池中得到一个连接。如果数据库连接池对象中没有空闲的连接，且连接数没有达到最大（即：最大活跃连接数），创建一个新的数据库连接。</p><p>（4）存取数据库。</p><p>（5）关闭数据库，释放所有数据库连接（此时的关闭数据库连接，并非真正关闭，而是将其放入空闲队列中。如实际空闲连接数大于初始空闲连接数则释放连接）。</p><p>（6）释放数据库连接池对象（服务器停止、维护期间，释放数据库连接池对象，并释放所有连接）。</p><hr><p>1 .连接池的概念和为什么要使用连接池？</p><pre><code>连接池放了N个Connection对象，本质上放在内存当中，在内存中划出一块缓存对象，    应用程序每次从池里获得Connection对象，而不是直接从数据里获得，这样不占用服务器的内存资源。</code></pre><p>2 .如果不使用连接池会出现的情况：</p><pre><code>a.占用服务器的内存资源 b.导致服务器的速度非常慢</code></pre><p>3 .应用连接池的三种方式：</p><pre><code>a.自定义连接池b.使用第三方连接池c.使用服务器自带的连接池</code></pre><hr><p>连接池一般比直接连接更有优越性,因为它提高了性能的同时还保存了宝贵的资源。在整个应用程序的使用过程,当中重复的打开直接连接将导致性能的下降。而池连接只在服务器启动时打开一次，从而消除了这种性能问题。</p><p>连接池主要考虑的是性能，每次获取连接和释放连接都有很大的工作量，会对性能有很大影响；而对资源来说起的是反作用，因为保存一定数量的连接是要消耗内存的。应用程序每次从池里获得Connection对象，而不是直接从数据里获得，这样不占用服务器的内存资源。所以一般要建立连接池，而连接的数量要适当，不能太大，太大会过多消耗资源。(所以，考虑2个方面，一个是内存，另一个是资源)。</p><p>连接池就是为了避免重复多次的打开数据库连接而造成的性能的下降和系统资源的浪费。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库连接池 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Jdbc实现简单的事务处理</title>
      <link href="/2017/02/10/2017_jdbc_transaction/"/>
      <url>/2017/02/10/2017_jdbc_transaction/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><pre><code>package com.jdbc;import org.junit.Test;import java.io.IOException;import java.sql.*;import java.util.Properties;/** * Created by zj on 2017/2/10. */public class ACID {    /*        JDBC实现数据库事务操作        1.原子性(事务不可分割)        2.一致性(一致性状态--&gt;另一个一致性状态)        3.隔离性(类似于加锁, 某一刻一个数据只能被一个事务操作)        4.持久性(事务提交,数据库的改变就是永久的)        要实现 需要多个操作使用同一个连接(Connection)     */    @Test    public void test() {        Connection connection = null;        try {            connection = getConnection(&quot;update student set f_age = f_age + &quot; + 2 + &quot; where f_id = &quot; + 1, null);            connection = getConnection(&quot;update student set f_age = f_age * &quot; + 10 + &quot; where f_id = &quot; + 1, connection);            connection.commit();//如果前面的操作都成功,手动提交事务        } catch (SQLException e) {            if (connection != null) {                try {                    connection.rollback();//有异常就回滚事务                } catch (SQLException e1) {                    e1.printStackTrace();                }            }        } finally {            close(connection, null, null);//关闭        }    }    private Connection getConnection(String sql, Connection connection) throws SQLException {        int result;        PreparedStatement preparedStatement = null;        try {            Properties properties = new Properties();            properties.load(this.getClass().getClassLoader().getResourceAsStream(&quot;com/jdbc/jdbc.properties&quot;));            String dirverClass = properties.getProperty(&quot;driver&quot;);            String url = properties.getProperty(&quot;jdbc_url&quot;);            String user = properties.getProperty(&quot;user&quot;);            String password = properties.getProperty(&quot;password&quot;);            Class.forName(dirverClass);            if (connection == null) {                connection = DriverManager.getConnection(url, user, password);                //取消自动提交(Connection的默认提交行为)                connection.setAutoCommit(false);            }            preparedStatement = connection.prepareStatement(sql);            result = preparedStatement.executeUpdate();            System.out.println(result);        } catch (IOException e) {            throw new RuntimeException();        } catch (ClassNotFoundException e) {            e.printStackTrace();        } finally {            close(null, preparedStatement, null);        }        return connection;    }    private void close(Connection connection, PreparedStatement statement, ResultSet resultSet) {        if (resultSet != null) {            try {                resultSet.close();            } catch (SQLException e) {                e.printStackTrace();            }        }        if (statement != null) {            try {                statement.close();            } catch (SQLException e) {                e.printStackTrace();            }        }        if (null != connection) {            try {                connection.close();            } catch (SQLException e) {                e.printStackTrace();            }        }    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC把文件作为数据对数据库的操作简单示例(Blob类型)</title>
      <link href="/2017/02/10/2017_jdbc_file/"/>
      <url>/2017/02/10/2017_jdbc_file/</url>
      
        <content type="html"><![CDATA[<h1 id="如果是插入某个文件可以用mysql的Blob类型"><a href="#如果是插入某个文件可以用mysql的Blob类型" class="headerlink" title=":如果是插入某个文件可以用mysql的Blob类型"></a>:如果是插入某个文件可以用mysql的Blob类型</h1><h4 id="Blob类型-二进制大对象-用来存储二进制文件-图片等"><a href="#Blob类型-二进制大对象-用来存储二进制文件-图片等" class="headerlink" title="Blob类型,二进制大对象,用来存储二进制文件(图片等)"></a><em>Blob类型,二进制大对象,用来存储二进制文件(图片等)</em></h4><p>下面是简单的示例</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zj on 2017/2/10.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">insertBlob</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">插入BLOB类型数据 (必须使用PreparedStatement)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = <span class="keyword">new</span> FileInputStream(<span class="string">"E:/app/Project/Test_Demo/src/java.jpg"</span>);</span><br><span class="line">            insert(<span class="string">"insert into teacher(name, birth, picture) values (?, ?, ?)"</span>,</span><br><span class="line">                    <span class="string">"fucc"</span>, <span class="keyword">new</span> Date(System.currentTimeMillis()), inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        查询并展示Blob类型数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        query(<span class="string">"SELECT id id, name name, birth birth, picture picture FROM teacher WHERE id = ?"</span>,</span><br><span class="line">                <span class="number">442</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入方法(其实删除,修改也可以使用)</span></span><br><span class="line"><span class="comment">//插入Blob类型(mysql)需要传入InputStream类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(String sql, Object... args)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement state = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = getConnection();</span><br><span class="line">            state = connection.prepareStatement(sql);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                <span class="comment">//专门用来设置blob类型的方法是state.setBlob(InputStream inputstream);</span></span><br><span class="line">                state.setObject(i + <span class="number">1</span>, args[i]); <span class="comment">//遍历设置占位符的值</span></span><br><span class="line">            &#125;</span><br><span class="line">            result = state.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            close(connection, state, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取 读取Blob类型时, 需要用InputStream类型接收在用OutputStream读取到文件中方可访问</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String sql, Object... args)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement state = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = getConnection();</span><br><span class="line">            state = connection.prepareStatement(sql);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                <span class="comment">//专门用来设置blob类型的方法是state.setBlob(InputStream inputstream);</span></span><br><span class="line">                state.setObject(i + <span class="number">1</span>, args[i]); <span class="comment">//遍历设置占位符的值</span></span><br><span class="line">            &#125;</span><br><span class="line">            resultSet = state.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                <span class="keyword">int</span> id = resultSet.getInt(<span class="number">1</span>);</span><br><span class="line">                String name = resultSet.getString(<span class="number">2</span>);</span><br><span class="line">                Date date = resultSet.getDate(<span class="number">3</span>);</span><br><span class="line">                Blob picture = resultSet.getBlob(<span class="number">4</span>);</span><br><span class="line">                System.out.println(id + <span class="string">" "</span> + name + <span class="string">" "</span> + date + <span class="string">" "</span> + picture);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件(Blob-&gt;InputStream-&gt;OutputStream-&gt;文件)</span></span><br><span class="line">inputStream = picture.getBinaryStream();</span><br><span class="line">                outputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"pic.jpg"</span>);</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">50</span>];</span><br><span class="line">                <span class="keyword">int</span> len;</span><br><span class="line">                <span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    outputStream.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(outputStream != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(inputStream != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            close(connection, state, resultSet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//读取文件中的数据库配置信息赋值给各个变量</span></span><br><span class="line">            properties.load(<span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">"com/jdbc/jdbc.properties"</span>));</span><br><span class="line">            String dirverClass = properties.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">            String url = properties.getProperty(<span class="string">"jdbc_url"</span>);</span><br><span class="line">            String user = properties.getProperty(<span class="string">"user"</span>);</span><br><span class="line">            String password = properties.getProperty(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">            Class.forName(dirverClass);</span><br><span class="line">            connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException | IOException | ReflectiveOperationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection connection, PreparedStatement statement, ResultSet resultSet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != connection) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blob </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令</title>
      <link href="/2017/02/09/2017_Linux/"/>
      <url>/2017/02/09/2017_Linux/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><em>不停更新ing</em>   贴一个搜索命令的网站  <a href="http://man.linuxde.net/" target="_blank" rel="noopener">http://man.linuxde.net/</a></p><h1 id="1-各版本Linux安装命令"><a href="#1-各版本Linux安装命令" class="headerlink" title="1.各版本Linux安装命令"></a><strong>1.各版本Linux安装命令</strong></h1><hr><h1 id="2-目录处理及文件处理命令"><a href="#2-目录处理及文件处理命令" class="headerlink" title="2.目录处理及文件处理命令"></a><strong>2.目录处理及文件处理命令</strong></h1><hr><h1 id="3-帮助命令"><a href="#3-帮助命令" class="headerlink" title="3.帮助命令"></a><strong>3.帮助命令</strong></h1><hr><h1 id="4-压缩命令"><a href="#4-压缩命令" class="headerlink" title="4.压缩命令"></a><strong>4.压缩命令</strong></h1><hr><h1 id="5-关机-重启与用户查看命令"><a href="#5-关机-重启与用户查看命令" class="headerlink" title="5.关机,重启与用户查看命令"></a><strong>5.关机,重启与用户查看命令</strong></h1><hr><h1 id="6-挂载命令"><a href="#6-挂载命令" class="headerlink" title="6.挂载命令"></a><strong>6.挂载命令</strong></h1><hr><h1 id="7-挂载命令"><a href="#7-挂载命令" class="headerlink" title="7.挂载命令"></a><strong>7.挂载命令</strong></h1><hr><h1 id="8-Shell常用命令"><a href="#8-Shell常用命令" class="headerlink" title="8.Shell常用命令"></a><strong>8.Shell常用命令</strong></h1><h2 id="1-执行脚本"><a href="#1-执行脚本" class="headerlink" title="1.执行脚本"></a><strong>1.执行脚本</strong></h2><h2 id="2-别名与快捷键"><a href="#2-别名与快捷键" class="headerlink" title="2.别名与快捷键"></a><strong>2.别名与快捷键</strong></h2><h2 id="3-历史命令"><a href="#3-历史命令" class="headerlink" title="3.历史命令"></a><strong>3.历史命令</strong></h2><h2 id="4-输出重定向"><a href="#4-输出重定向" class="headerlink" title="4.输出重定向"></a><strong>4.输出重定向</strong></h2><h2 id="5-管道符"><a href="#5-管道符" class="headerlink" title="5.管道符"></a><strong>5.管道符</strong></h2><h2 id="6-管通配"><a href="#6-管通配" class="headerlink" title="6.管通配"></a><strong>6.管通配</strong></h2><hr>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用命令 </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC工具类-利用java反射机制</title>
      <link href="/2017/02/08/2017_jdbc_reflect/"/>
      <url>/2017/02/08/2017_jdbc_reflect/</url>
      
        <content type="html"><![CDATA[<ol><li>利用java反射机制,动态进行数据库操作</li><li>可以对不同的表(对应相应的实体类)进行数据库操作而不需要修改操作代码</li><li>查询得到的数据通过反射机制已经动态赋值到实体对象中</li></ol><hr><p><img src="http://www.zj2626.github.io/wp-content/uploads/2017/02/jdbc.png" alt></p><a id="more"></a><hr><pre><code>package com.jdbc;import org.junit.Test;import java.io.IOException;import java.lang.reflect.Field;import java.sql.*;import java.util.*;/** * Created by zj2626 on 17-1-19. */public class utilsTest {    @Test    public void test() {&lt;img src=&quot;http://www.zj2626.github.io/wp-content/uploads/2017/02/jdbc-300x115.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;115&quot; class=&quot;alignnone size-medium wp-image-233&quot; /&gt;        /**         * 带占位符和别名的sql语句 查询         * 别名是为了匹配数据库中字段名与实体类中属性的差异(如数据库表中列f_id对应类中id属性)         */        String sql = &quot;SELECT f_id id, f_name name, f_age age FROM student WHERE f_id = ?&quot;;        List&lt;Student&gt; list = query(Student.class, sql, 122);        System.out.println(list != null ? &quot;查询到的数据有&quot; + list.size() + &quot;条&quot; : &quot;没查到!!!&quot;);    }    //&lt;T&gt; List&lt;T&gt;中第一个T是泛型的声明,使T有意义,表示这是一个泛型方法    // (即告诉人们T代表任意类型,每次只能表示一个类型)    private &lt;T&gt; List&lt;T&gt; query(Class&lt;T&gt; clazz, String sql, Object... args) {//使用可变参数表示查询条件        List&lt;T&gt; list = new ArrayList&lt;T&gt;(); //用来存放查询到的结果        Connection connection = null;        PreparedStatement state = null;        ResultSet resultSet = null;        try {            Properties properties = new Properties();            //读取文件中的数据库配置信息赋值给各个变量            properties.load(this.getClass().getClassLoader().getResourceAsStream(&quot;com/jdbc/jdbc.properties&quot;));            String dirverClass = properties.getProperty(&quot;driver&quot;);            String url = properties.getProperty(&quot;jdbc_url&quot;);            String user = properties.getProperty(&quot;user&quot;);            String password = properties.getProperty(&quot;password&quot;);            Class.forName(dirverClass);            connection = DriverManager.getConnection(url, user, password);            state = connection.prepareStatement(sql);            for (int i = 0; i &lt; args.length; i++) {                state.setObject(i + 1, args[i]); //遍历设置占位符的值            }            /*              查询过程:              1.先利用sql语句进行查询              2.利用反射新建类的实体              3.获得sql语句中的别名,(tongg ResultSet的元数据对象--ReslutSetMetaData,其可以从结果集中获得所有信息,包括列名,别名等)              4.确定别名对应的属性并赋值给属性             */            resultSet = state.executeQuery();//查询并返回结果集            ResultSetMetaData metaData = resultSet.getMetaData();//得到结果集的元数据对象            while (resultSet.next()) {                //利用反射新建类的实体                T entity = null;                int len = metaData.getColumnCount();                for (int i = 0; i &lt; len; i++) {                    String columnName = metaData.getColumnName(i + 1);//遍历查看列名(这里并没用到)                    String columnLabel = metaData.getColumnLabel(i + 1);//遍历获取列的别名                    System.out.println(columnName + &quot;--&quot; + columnLabel);                    Object columnValue = resultSet.getObject(columnLabel);//获取指定别名的列所对应的值                    entity = clazz.newInstance();//newInstance()调用newInstance()必须有无参构造方法                    //获取类的指定属性(一切皆对象,属性也是对象,都是Field类的实例)//                    Field field = clazz.getDeclaredField(columnLabel);//注:getField只能获得public字段//                    field.setAccessible(true);//设置为可访问(属性为private 不能直接赋值)//                    field.set(entity, columnValue);//为指定的属性赋值                    //赋值方法2: 以上三行的赋值功能可以用apache提供的一个工具类实现                    BeanUtils.setProperty(entity, columnLabel, columnValue);//该方法是通过实体中的属性的setter方法实现的                }                list.add(entity);            }        } catch (SQLException | IOException | ReflectiveOperationException e) {            e.printStackTrace();        } finally {            close(connection, state, resultSet);        }        return list;    }    private void close(Connection connection, PreparedStatement statement, ResultSet resultSet) {        if (resultSet != null) {            try {                resultSet.close();            } catch (SQLException e) {                e.printStackTrace();            }        }        if (statement != null) {            try {                statement.close();            } catch (SQLException e) {                e.printStackTrace();            }        }        if (null != connection) {            try {                connection.close();            } catch (SQLException e) {                e.printStackTrace();            }        }    }}</code></pre><h2 id="注-如果是插入一条或者多条数据可以用下面的过程获取到插入后自动生成的主键"><a href="#注-如果是插入一条或者多条数据可以用下面的过程获取到插入后自动生成的主键" class="headerlink" title="注:如果是插入一条或者多条数据可以用下面的过程获取到插入后自动生成的主键()"></a>注:如果是插入一条或者多条数据可以用下面的过程获取到插入后自动生成的主键()</h2><pre><code>//上面是获取connection创建PreparedStatement对象 state.executeUpdate();         //获取生成的新所有主键 //返回的resultSet中只有一列--&gt; 列名:GENERATED_KEY resultSet = state.getGeneratedKeys(); while (resultSet.next()) {     System.out.println(resultSet.getObject(1)); }</code></pre>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具类 </tag>
            
            <tag> CRUD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新学习JDBC之获取连接</title>
      <link href="/2017/02/07/2017_jdbc_curd/"/>
      <url>/2017/02/07/2017_jdbc_curd/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.HashedMap;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zj2626 on 17-1-19.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PreparedStatement state = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Integer id = <span class="number">123</span>;</span><br><span class="line">        String name = <span class="string">"name"</span>;</span><br><span class="line">        Integer age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(id);</span><br><span class="line">        list.add(name);</span><br><span class="line">        list.add(age);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作数据库版本一</span></span><br><span class="line">        String sql = <span class="string">"insert into student(id, name, age) values("</span> + id + <span class="string">", '"</span> + name + <span class="string">"', "</span> + age + <span class="string">")"</span>;</span><br><span class="line">        editWayOne(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作数据库版本二(可以防止sql注入)</span></span><br><span class="line">        String sql2 = <span class="string">"insert into student(id, name, age) values(?, ?, ?)"</span>;</span><br><span class="line">        <span class="comment">//editWayTwo(sql2, list);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询</span></span><br><span class="line">        String sql3 = <span class="string">"select id, name, age from student where id = ?"</span>;</span><br><span class="line">        query(sql3, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * low版本的增删改方法 (增删改都可用)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql 普通sql语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 执行成功的记录的条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">editWayOne</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getConnection(sql);</span><br><span class="line">            num = state.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql  带占位符的sql语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 占位符要传入的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 执行成功的记录的条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">editWayTwo</span><span class="params">(String sql, List&lt;Object&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getConnection(sql);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">                <span class="comment">//这里统一用setObject了 其实应该用相对应类型的方法(setString,setInt,setDate...)</span></span><br><span class="line">                state.setObject(i + <span class="number">1</span>, list.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            num = state.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql 查询语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回查询到的所有数据集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Map&lt;String, Object&gt;&gt; query(String sql, Integer id) &#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getConnection(sql);</span><br><span class="line">            state.setObject(<span class="number">1</span>, id);</span><br><span class="line">            <span class="comment">//结果集(ResultSet)是数据中查询结果返回的一种对象 该对象存储了查询出的数据需要遍历取出</span></span><br><span class="line">            resultSet = state.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;<span class="comment">//查看有没有下一条数据</span></span><br><span class="line">                Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap();<span class="comment">//存放每条数据的每个查询到的字段</span></span><br><span class="line">                map.put(<span class="string">"id"</span>, resultSet.getInt(<span class="number">1</span>));<span class="comment">//遍历也可以通过resultSet.getInt("id")更明确</span></span><br><span class="line">                map.put(<span class="string">"name"</span>, resultSet.getString(<span class="number">2</span>));</span><br><span class="line">                map.put(<span class="string">"age"</span>, resultSet.getInt(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">                result.add(map);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"数据条数"</span> + result.size());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getConnection</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(<span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">"com/jdbc/jdbc.properties"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String dirverClass = properties.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">        String url = properties.getProperty(<span class="string">"jdbc_url"</span>);</span><br><span class="line">        String user = properties.getProperty(<span class="string">"user"</span>);</span><br><span class="line">        String password = properties.getProperty(<span class="string">"password"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(dirverClass);</span><br><span class="line">            connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">            state = connection.prepareStatement(sql);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (state != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                state.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != connection) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具类 </tag>
            
            <tag> CRUD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新学习JDBC之获取statement</title>
      <link href="/2017/02/06/2017_jdbc_getStatement/"/>
      <url>/2017/02/06/2017_jdbc_getStatement/</url>
      
        <content type="html"><![CDATA[<h1 id="Statement类"><a href="#Statement类" class="headerlink" title="Statement类 "></a><strong>Statement类 </strong></h1><p>获取connection(见 <a href="http://www.zj2626.github.io/index.php/2017/02/06/cxxxjdbc/" target="_blank" rel="noopener">http://www.zj2626.github.io/index.php/2017/02/06/cxxxjdbc/</a>) 之后, 需要获得sql语句并发送然后执行sql语句,所以有了本章</p><a id="more"></a><blockquote><p>直接看代码</p></blockquote><pre><code>private Connection getConnection(String sql) {        Properties properties = new Properties();        try {                //获取配置文件中的数据库信息                properties.load(this.getClass().getClassLoader().getResourceAsStream(&quot;com/jdbc/jdbc.properties&quot;));        } catch (IOException e) {                e.printStackTrace();        }        String dirverClass = properties.getProperty(&quot;driver&quot;);        String url = properties.getProperty(&quot;jdbc_url&quot;);        String user = properties.getProperty(&quot;user&quot;);        String password = properties.getProperty(&quot;password&quot;);        Connection connection = null;        Statement state = null;        try {            //加载数据库驱动             Class.forName(dirverClass);            //获取数据库连接            connection = DriverManager.getConnection(url, user, password);            //获取Statment对象            state = connection.createStatement();            //执行sql语句            state.execute(sql);        } catch (SQLException | ClassNotFoundException e) {            e.printStackTrace();        }        if (state != null) {//关闭statment对象,释放资源            try {                state.close();            } catch (SQLException e) {                System.out.println(e);            }        }        if (null != connection) {//关闭connction对象,释放资源            try {                connection.close();            } catch (SQLException e) {                e.printStackTrace();            }        }}</code></pre><hr><h1 id="升级"><a href="#升级" class="headerlink" title="升级"></a><strong>升级</strong></h1><p>Statement对象创建之后,没执行一次都会重新编译一次sql语句(sql语句是执行时候参数嘛),这很不好<br>所以我们用其子类PreparedStatement</p><ol><li>创建时的区别： <ol start="2"><li>Statement statement = conn.createStatement();</li><li>PreparedStatement preStatement = conn.prepareStatement(sql); </li></ol></li><li>执行的时候: <ol start="5"><li>ResultSet rSet = statement.executeQuery(sql);</li><li>ResultSet pSet = preStatement.executeQuery();<br>看出，PreparedStatement有预编译的过程,已经绑定sql,之后无论执行多少遍,都不会再去进行编译,效率高</li></ol></li></ol><pre><code>private static Connection connection = null;private static PreparedStatement prep = null;private void getConnection(String sql) {    Properties properties = new Properties();    try {        //获取配置文件中的数据库信息        properties.load(this.getClass().getClassLoader().getResourceAsStream(&quot;com/jdbc/jdbc.properties&quot;));    } catch (IOException e) {        e.printStackTrace();    }    String dirverClass = properties.getProperty(&quot;driver&quot;);    String url = properties.getProperty(&quot;jdbc_url&quot;);    String user = properties.getProperty(&quot;user&quot;);    String password = properties.getProperty(&quot;password&quot;);    try {        //加载数据库驱动        Class.forName(dirverClass);        //获取数据库连接        connection = DriverManager.getConnection(url, user, password);        prep = connection.prepareStatement(sql);        prep.execute();//这里是更新操作的事例 如果是查询等其他则调用方法有不同    } catch (SQLException | ClassNotFoundException e) {        e.printStackTrace();    }}</code></pre><p>//执行数据库操作之后必须关闭各个对象(按顺序)</p><pre><code>public void close(Statement state, Connection connection) {    if (state != null) {        try {            state.close();        } catch (SQLException e) {            System.out.println(e);        }    }    if (null != connection) {        try {            connection.close();        } catch (SQLException e) {            e.printStackTrace();        }    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新学习JDBC之获取连接</title>
      <link href="/2017/02/06/2017_jdbc_getConnection/"/>
      <url>/2017/02/06/2017_jdbc_getConnection/</url>
      
        <content type="html"><![CDATA[<p><strong>JDBC是一种用于执行sql语句的javaAPI, 为多种关系数据库提供统一访问有java编写的类和接口组成</strong></p><p>jdbc其实就是一种规范(基准),根据其可以自己构建更高级的框架,如(hibernate等),<br>编程人员须根据这个规范编写来操作数据库</p><hr><a id="more"></a><h2 id="gt-Driver-提供了一个接口-数据库厂商需要自己的产品编写此接口的实现类-通过创建实现类的对象-注册-加载相应的数据库驱动"><a href="#gt-Driver-提供了一个接口-数据库厂商需要自己的产品编写此接口的实现类-通过创建实现类的对象-注册-加载相应的数据库驱动" class="headerlink" title="&gt;Driver 提供了一个接口 数据库厂商需要自己的产品编写此接口的实现类 通过创建实现类的对象(注册)加载相应的数据库驱动"></a>&gt;<strong>Driver</strong> 提供了一个接口 数据库厂商需要自己的产品编写此接口的实现类 通过创建实现类的对象(注册)加载相应的数据库驱动</h2><h2 id="1-原始的jdbc尝试-获取数据库连接"><a href="#1-原始的jdbc尝试-获取数据库连接" class="headerlink" title="1,原始的jdbc尝试(获取数据库连接)"></a><em>1,原始的jdbc尝试(获取数据库连接)</em></h2><blockquote><p><em>连接需要某个厂商的数据库驱动包 这里连接mysql<br>官网下载地址  <a href="https://dev.mysql.com/downloads/connector/j/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/connector/j/</a>      里面的 mysql-connector-java-</em>.jar文件</p></blockquote><pre><code> @Testpublic void testDriver() throws SQLException {    //创建Driver实现类(这里是mysql的实现类) 同时注册驱动(见下面mysql源码参照1)    Driver driver = new com.mysql.jdbc.Driver();    //Properties类用于读取java的配置文件(.properties) 这里并没有读取文件    String url = &quot;jdbc:mysql://127.0.0.1:3306/test&quot;; //数据库地址    Properties properties = new Properties();    properties.put(&quot;user&quot;, &quot;root&quot;); //数据库用户名    properties.put(&quot;password&quot;, &quot;anyao112233&quot;);//数据库密码    //获取数据库连接 返回一个Connection的mysql的实现类    Connection connection = driver.connect(url, properties);//见下面源码参照2    System.out.println(connection);}</code></pre><blockquote><p><em>mysql的源码参照1</em></p></blockquote><pre><code>package com.mysql.jdbc;//一旦声明了此类的对象就会先调用这里静态代码块中的代码 实现驱动的注册(registerDriver)public class Driver extends NonRegisteringDriver implements java.sql.Driver {        public Driver() throws SQLException {        }        static {                try {                        //其实在注册的时候就已经实例化过一次driver对象 不需要自己new或newInstance                        //但是,由于此实例化为匿名,so只能自己再实例一遍,以获得实例化的对象                        DriverManager.registerDriver(new Driver());                } catch (SQLException var1) {                        throw new RuntimeException(&quot;Can\&apos;t register driver!&quot;);                }        }}</code></pre><blockquote><p><em>mysql的源码参照2</em></p></blockquote><pre><code>package com.mysql.jdbc;public class NonRegisteringDriver implements Driver {    public Connection connect(String url, Properties info) throws SQLException {                    //检测url是否为空(现在URL是jdbc:mysql://127.0.0.1:3306/test)                    if(url != null) {                            //检测url是否以后者开头---否                            if(StringUtils.startsWithIgnoreCase(url, &quot;jdbc:mysql:loadbalance://&quot;)) {                                    return this.connectLoadBalanced(url, info);                            }                            //检测url是否以后者开头---否                            if(StringUtils.startsWithIgnoreCase(url, &quot;jdbc:mysql:replication://&quot;)) {                                    return this.connectReplicationConnection(url, info);                            }                    }                    Properties props = null;                    //获取url中信息存放到props对象中(HOST,user,password,DBNAME)                    if((props = this.parseURL(url, info)) == null) {                            return null;                    } else {                            try {                                    //以props中的信息创建数据库连接 返回代表连接的对象                                    com.mysql.jdbc.Connection ex = ConnectionImpl.getInstance(this.host(props), this.port(props), props, this.database(props), url);                                    //返回连接对象                                    return ex;                                    //下面是各种异常                            } catch (SQLException var6) {                                    throw var6;                            } catch (Exception var7) {                                    SQLException sqlEx = SQLError.createSQLException(Messages.getString(&quot;NonRegisteringDriver.17&quot;) + var7.toString() + Messages.getString(&quot;NonRegisteringDriver.18&quot;), &quot;08001&quot;);                                    sqlEx.initCause(var7);                                    throw sqlEx;                            }                    }            }}</code></pre><h2 id="各位看官-自己可以debug调试看看流程-其实也不难看懂-人家的代码都写得很清楚了"><a href="#各位看官-自己可以debug调试看看流程-其实也不难看懂-人家的代码都写得很清楚了" class="headerlink" title="各位看官, 自己可以debug调试看看流程 其实也不难看懂,人家的代码都写得很清楚了"></a><em>各位看官, 自己可以debug调试看看流程 其实也不难看懂,人家的代码都写得很清楚了</em></h2><h2 id="2-升级版本"><a href="#2-升级版本" class="headerlink" title="2,升级版本"></a><strong>2,升级版本</strong></h2><p>配置文件内容<br><img src="http://www.zj2626.github.io/wp-content/uploads/2017/02/aaa.png" alt>(如图,地址要加字符编码,防止中文乱码)</p><pre><code>@Test    public void test2() {        getConnection();    }    //把获取数据库连接封装为一个类,把数据库的信息存放到配置文件中    //原因:一般程序部署以后就不会再更改代码,如果数据有变,就可以只是更改配置文件,    //    而要是这些信息放在代码中,则需要重新编译运行才能生效    private Connection getConnection() {        String dirverClass;        String url;        String user;        String password;        //读取文件        //getClassLoader返回类的类加载器         //getResourceAsStream把指定目录的内容返回到一个输入流中        InputStream inputStream = getClass().getClassLoader().getResourceAsStream(&quot;com/jdbc/jdbc.properties&quot;);        Properties properties = new Properties();        try {            //读取输入流中的内容到properties对象中            properties.load(inputStream);        } catch (IOException e) {            e.printStackTrace();        }        //按照键值对的形式读取对象中该键所对应的值 获取到数据库信息        dirverClass = properties.getProperty(&quot;driver&quot;);        url = properties.getProperty(&quot;jdbc_url&quot;);        user = properties.getProperty(&quot;user&quot;);        password = properties.getProperty(&quot;password&quot;);        Properties info = new Properties();        info.put(&quot;user&quot;, user);        info.put(&quot;password&quot;, password);        Driver driver;        Connection connection = null;        try {            //forName用于使JVM加载指定的类(全类名,写在配置文件中),即动态加载和创建Class 对象            //所有类都是Class类的对象            //通过刚才加载的Class对象(也就是你需要的)来实例化加载了的所需类的对象,效果同new一个对象            driver = (Driver) Class.forName(dirverClass).newInstance();            //获取连接            connection = driver.connect(url, info);            System.out.println(connection);        } catch (InstantiationException | IllegalAccessException | ClassNotFoundException | SQLException e) {            e.printStackTrace();        } finally {            if (connection != null) {                try {                    connection.close();//关闭连接                } catch (SQLException e) {                    e.printStackTrace();                }            }        }        return null;    }</code></pre><hr><h2 id="3-再次升级版本"><a href="#3-再次升级版本" class="headerlink" title="3,再次升级版本"></a><strong>3,再次升级版本</strong></h2><p>此时发现,通过Driver类直接控制数据库连接太麻烦,于是有了DriverManager</p><blockquote><p>DriverManager用来管理数据库中所有的驱动程序,把driver的创建,获取连接等过程交由DriverManager管理</p></blockquote><pre><code>@Test    public void test() {        Properties properties = new Properties();        try {            properties.load(this.getClass().getClassLoader().getResourceAsStream(&quot;com/jdbc/jdbc.properties&quot;));        } catch (IOException e) {            e.printStackTrace();        }        String dirverClass = properties.getProperty(&quot;driver&quot;);        String url = properties.getProperty(&quot;jdbc_url&quot;);        String user = properties.getProperty(&quot;user&quot;);        String password = properties.getProperty(&quot;password&quot;);        Connection connection = null;        try {            //加载数据库驱动 可以多个驱动程序注册(在注册时候就已经实例化了一个对象,不需要自己新建driver对象)            Class.forName(dirverClass);            //获取数据库连接            //获取的时候会扫描所有的注册的驱动 找到合适的驱动然后获取连接            connection = DriverManager.getConnection(url, user, password);            System.out.println(connection);        } catch (SQLException | ClassNotFoundException e) {            e.printStackTrace();        }    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jaxp解析xml文档实现增删改查</title>
      <link href="/2017/02/05/2017_jaxp/"/>
      <url>/2017/02/05/2017_jaxp/</url>
      
        <content type="html"><![CDATA[<h2 id="这是被解析的示例xml"><a href="#这是被解析的示例xml" class="headerlink" title="这是被解析的示例xml"></a>这是被解析的示例xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">书架</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">书</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">书名</span>&gt;</span>java实战<span class="tag">&lt;/<span class="name">书名</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">作者</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">作者</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">售价</span>&gt;</span>121元<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">售价</span>&gt;</span>12元<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">书</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">书</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">书名</span> <span class="attr">color</span>=<span class="string">"yellow"</span> <span class="attr">name</span>=<span class="string">"XXX"</span>&gt;</span>c测试<span class="tag">&lt;/<span class="name">书名</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">作者</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">作者</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">售价</span> <span class="attr">color</span>=<span class="string">"rrr"</span>&gt;</span>54元<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">售价</span>&gt;</span>12元<span class="tag">&lt;/<span class="name">售价</span>&gt;</span><span class="tag">&lt;/<span class="name">书</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">书架</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>增加</strong></p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.crypto.dsig.Transform;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.*;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.dom.DOMSource;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.stream.StreamResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Element;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03_xml_add</span> </span>&#123;</span><br><span class="line">    <span class="comment">//4.向XML文档中添加节点 &lt;售价&gt;12元&lt;/售价&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">        DocumentBuilder builder =  factory.newDocumentBuilder();</span><br><span class="line">        Document document = builder.parse(<span class="string">"src/cn/xml/book.xml"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在内存中的xml中创造一个节点</span></span><br><span class="line">        Element price = document.createElement(<span class="string">"售价"</span>);<span class="comment">//得到标签</span></span><br><span class="line">        price.setTextContent(<span class="string">"12元"</span>);<span class="comment">//添加标签中内容</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//先得到书节点 转换为标签</span></span><br><span class="line">        Element book = (Element)document.getElementsByTagName(<span class="string">"书"</span>).item(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//把创造的节点添加到xml文档中书标签下</span></span><br><span class="line">        book.appendChild(price);</span><br><span class="line">        <span class="comment">//此时只更新了内存中的XML文档(document对象指向的) 所以要把document对象指向的内存中的xml文档更新到硬盘中的xml文档</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新后的写入XML文档</span></span><br><span class="line">        <span class="comment">//创建工厂实例</span></span><br><span class="line">        TransformerFactory tf = TransformerFactory.newInstance();</span><br><span class="line">        <span class="comment">//通过工厂实例得到Transformer对象(transform方法可以转化来源到目的地)</span></span><br><span class="line">        Transformer tr = tf.newTransformer();</span><br><span class="line">        <span class="comment">//DOMSource是Source的实现类 把Document类型封装为Source类型</span></span><br><span class="line">        Source s = <span class="keyword">new</span> DOMSource(document);</span><br><span class="line">        <span class="comment">//声明输出流对象 指向硬盘中的XML文件</span></span><br><span class="line">        OutputStream f= <span class="keyword">new</span> FileOutputStream(<span class="string">"src/cn/xml/book.xml"</span>);</span><br><span class="line">        <span class="comment">//把输出流对象通过流方法转化为Result对象 Result对象指向硬盘中的XML文件</span></span><br><span class="line">        Result r = <span class="keyword">new</span> StreamResult(f);</span><br><span class="line">        <span class="comment">//transform方法(来源, 目的地) 把s写入r</span></span><br><span class="line">        tr.transform(s, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.向XML文档中指定位置添加节点 &lt;售价&gt;999元&lt;/售价&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">        DocumentBuilder builder =  factory.newDocumentBuilder();</span><br><span class="line">        Document document = builder.parse(<span class="string">"src/cn/xml/book.xml"</span>);</span><br><span class="line"></span><br><span class="line">        Element price = document.createElement(<span class="string">"售价"</span>);</span><br><span class="line">        price.setTextContent(<span class="string">"999元"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到参考节点 即下一个标签(Element是Node的一个子集 Element是Node的扩展)</span></span><br><span class="line">        Element refNode = (Element) document.getElementsByTagName(<span class="string">"售价"</span>).item(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到要插入的节点</span></span><br><span class="line">        Element book = (Element) document.getElementsByTagName(<span class="string">"书"</span>).item(<span class="number">0</span>);    </span><br><span class="line">        <span class="comment">//插入book节点的指定位置 把price节点插入refNode节点之前</span></span><br><span class="line">        book.insertBefore(price, refNode);<span class="comment">//参数也可以是标签  </span></span><br><span class="line"></span><br><span class="line">        TransformerFactory tf = TransformerFactory.newInstance();</span><br><span class="line">        Transformer tr = tf.newTransformer();</span><br><span class="line">        tr.transform(<span class="keyword">new</span> DOMSource(document), <span class="keyword">new</span> StreamResult(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/cn/xml/book.xml"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.向XML文档中添加属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add3</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">        DocumentBuilder builder =  factory.newDocumentBuilder();</span><br><span class="line">        Document document = builder.parse(<span class="string">"src/cn/xml/book.xml"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到节点</span></span><br><span class="line">        Element bookname = (Element) document.getElementsByTagName(<span class="string">"书名"</span>).item(<span class="number">0</span>);</span><br><span class="line">        bookname.setAttribute(<span class="string">"name"</span>, <span class="string">"XXX"</span>);</span><br><span class="line"></span><br><span class="line">        TransformerFactory tf = TransformerFactory.newInstance();</span><br><span class="line">        Transformer tr = tf.newTransformer();</span><br><span class="line">        tr.transform(<span class="keyword">new</span> DOMSource(document), <span class="keyword">new</span> StreamResult(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/cn/xml/book.xml"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Transformer;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.dom.DOMSource;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.stream.StreamResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Element;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03_xml_delete</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">        DocumentBuilder builder =  factory.newDocumentBuilder();</span><br><span class="line">        Document document = builder.parse(<span class="string">"src/cn/xml/book.xml"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到要删除的节点</span></span><br><span class="line">        Element price = (Element) document.getElementsByTagName(<span class="string">"售价"</span>).item(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//得到要删除节点的父节点</span></span><br><span class="line">        Element book = (Element) document.getElementsByTagName(<span class="string">"书"</span>).item(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//通过父节点删除子节点</span></span><br><span class="line">        book.removeChild(price);</span><br><span class="line"></span><br><span class="line">        TransformerFactory tf = TransformerFactory.newInstance();</span><br><span class="line">        Transformer tr = tf.newTransformer();</span><br><span class="line">        tr.transform(<span class="keyword">new</span> DOMSource(document), <span class="keyword">new</span> StreamResult(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/cn/xml/book.xml"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">        DocumentBuilder builder =  factory.newDocumentBuilder();</span><br><span class="line">        Document document = builder.parse(<span class="string">"src/cn/xml/book.xml"</span>);</span><br><span class="line"></span><br><span class="line">        Element price = (Element) document.getElementsByTagName(<span class="string">"售价"</span>).item(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//通过子节点得到父节点再删除自己</span></span><br><span class="line">        price.getParentNode().removeChild(price);</span><br><span class="line">        <span class="comment">//其他:通过子节点得到父节点的父节点的父节点 (删除父节点)...删除整个xml文档中的节点</span></span><br><span class="line">        <span class="comment">//price.getParentNode().getParentNode().getParentNode().removeChild(price.getParentNode().getParentNode());</span></span><br><span class="line">        <span class="comment">//删除指定节点的属性</span></span><br><span class="line">        <span class="comment">//price.removeAttribute("color");</span></span><br><span class="line"></span><br><span class="line">        TransformerFactory tf = TransformerFactory.newInstance();</span><br><span class="line">        Transformer tr = tf.newTransformer();</span><br><span class="line">        tr.transform(<span class="keyword">new</span> DOMSource(document), <span class="keyword">new</span> StreamResult(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/cn/xml/book.xml"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>更新</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Transformer;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.dom.DOMSource;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.stream.StreamResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Element;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03_xml_update</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">        DocumentBuilder builder =  factory.newDocumentBuilder();</span><br><span class="line">        Document document = builder.parse(<span class="string">"src/cn/xml/book.xml"</span>);</span><br><span class="line"></span><br><span class="line">        Element price = (Element) document.getElementsByTagName(<span class="string">"售价"</span>).item(<span class="number">1</span>);</span><br><span class="line">        price.setTextContent(<span class="string">"123.456元"</span>);<span class="comment">//更新标签中内容</span></span><br><span class="line">        price.setAttribute(<span class="string">"color"</span>, <span class="string">"eeed"</span>);<span class="comment">//更新标签属性</span></span><br><span class="line"></span><br><span class="line">        TransformerFactory tf = TransformerFactory.newInstance();</span><br><span class="line">        Transformer tr = tf.newTransformer();</span><br><span class="line">        tr.transform(<span class="keyword">new</span> DOMSource(document), <span class="keyword">new</span> StreamResult(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/cn/xml/book.xml"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Element;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Node;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.NodeList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03_xml_read</span></span>&#123;</span><br><span class="line">                <span class="comment">//使用DOM方式对XML文档进行crud(增删改查)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read1</span><span class="params">()</span>  <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.创建工厂(得到DOM解析器的工厂实例)   ---这个工厂类是抽象类,so用其newInstance方法得到DOM的新实例</span></span><br><span class="line">    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">    <span class="comment">//2.从DOM工厂获得DOM解析器 有了这个实例才可以解析</span></span><br><span class="line">    DocumentBuilder builder =  factory.newDocumentBuilder();</span><br><span class="line">    <span class="comment">//3.将给定URI的内容解析为一个XML文档，并且返回一个新的DOM Document对象</span></span><br><span class="line">    Document document = builder.parse(<span class="string">"src/cn/xml/book.xml"</span>);</span><br><span class="line">    <span class="comment">//4.以后的处理都是对Document对象进行的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.读取XML文档中&lt;书名&gt;....&lt;/书名&gt;节点中的值</span></span><br><span class="line">    NodeList list = document.getElementsByTagName(<span class="string">"书名"</span>);<span class="comment">//按文档顺序返回包含在文档中且具有给定标记名称的所有 Element 的 NodeList。 返回节点集合</span></span><br><span class="line">    Node node = list.item(<span class="number">1</span>);<span class="comment">//取第二个"书名"的节点</span></span><br><span class="line">    String s = node.getTextContent();<span class="comment">//得到节点的文本内容</span></span><br><span class="line">    System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.遍历整个XML文档中的所有节点(标签)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read2</span><span class="params">()</span>  <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">        DocumentBuilder builder =  factory.newDocumentBuilder();</span><br><span class="line">        Document document = builder.parse(<span class="string">"src/cn/xml/book.xml"</span>);</span><br><span class="line">            <span class="comment">//得到根节点</span></span><br><span class="line">        Node root = document.getElementsByTagName(<span class="string">"书架"</span>).item(<span class="number">0</span>);<span class="comment">//得到"书架"节点(根)</span></span><br><span class="line">            <span class="comment">//得到孩子并打印</span></span><br><span class="line">        <span class="keyword">this</span>.glist(root);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">glist</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        <span class="comment">//instanceof 在运行时指出对象是否是特定类的一个实例 返回布尔值</span></span><br><span class="line">        <span class="keyword">if</span>(node <span class="keyword">instanceof</span> Element)&#123;<span class="comment">//判断node是不是标签(元素) (因为xml的空格和换行符也能传进来)</span></span><br><span class="line">            System.out.println(node.getNodeName());<span class="comment">//打印节点名称</span></span><br><span class="line">            NodeList list = node.getChildNodes();<span class="comment">//得到孩子节点 返回孩子节点的集合</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.getLength(); i++) &#123;</span><br><span class="line">                Node child = list.item(i);</span><br><span class="line">                glist(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.得到"书名"标签中属性值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read3</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">        DocumentBuilder builder =  factory.newDocumentBuilder();</span><br><span class="line">        Document document = builder.parse(<span class="string">"src/cn/xml/book.xml"</span>);</span><br><span class="line"></span><br><span class="line">        NodeList list = document.getElementsByTagName(<span class="string">"书名"</span>);</span><br><span class="line">        <span class="comment">//两种方法 第二个不推荐</span></span><br><span class="line">        <span class="comment">//把得到的"书名"节点强行转为标签类型</span></span><br><span class="line">        Element bookname = (Element)list.item(<span class="number">0</span>);</span><br><span class="line">        String s = bookname.getAttribute(<span class="string">"color"</span>);<span class="comment">//此方法可取得属性值</span></span><br><span class="line"><span class="comment">/*    </span></span><br><span class="line"><span class="comment">        Node bookname = list.item(0);</span></span><br><span class="line"><span class="comment">        String s= bookname.getAttributes().getNamedItem("color").getNodeValue();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DOM操作 </category>
          
          <category> XML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jaxp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.了解java</title>
      <link href="/2017/02/05/20170205001_%E4%BA%86%E8%A7%A3java/"/>
      <url>/2017/02/05/20170205001_%E4%BA%86%E8%A7%A3java/</url>
      
        <content type="html"><![CDATA[<p>来自&lt;&lt;深入了解java虚拟机&gt;&gt;:</p><h2 id="Java不仅是一门编程语言-也是一个由一系列计算机软件和规范形成的技术体系"><a href="#Java不仅是一门编程语言-也是一个由一系列计算机软件和规范形成的技术体系" class="headerlink" title="Java不仅是一门编程语言, 也是一个由一系列计算机软件和规范形成的技术体系"></a>Java不仅是一门编程语言, 也是一个由一系列计算机软件和规范形成的技术体系</h2><hr><h5 id="java技术体系包括"><a href="#java技术体系包括" class="headerlink" title="java技术体系包括"></a><strong>java技术体系包括</strong></h5><h5 id="这是sun公司定义的"><a href="#这是sun公司定义的" class="headerlink" title="(这是sun公司定义的)"></a>(这是sun公司定义的)</h5><blockquote><ol><li>Java程序设计语言</li><li>各种硬件平台上的java虚拟机</li><li>Java API类库</li><li>Class文件</li><li>各种第三方Java类库</li></ol></blockquote><blockquote><p>其中前三部分共同统称——&gt;JDK   (Java Development Kit)  这是支持Java程序开发的最小环境<em><br>JavaAPI类库中的JavaSE API子集和Java虚拟机统称——&gt;JRE  (Java Runtime Environment) 这是支持Java程序运行的标准环境</em><br><img src="http://img.blog.csdn.net/20161214190258788?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYW55YW8xMTIyMzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p></blockquote><a id="more"></a><pre><code>*(这是原书上的附图)*</code></pre><hr><h2 id="java技术体系按照业务领域目前分为4个平台"><a href="#java技术体系按照业务领域目前分为4个平台" class="headerlink" title="*java技术体系按照业务领域目前分为4个平台**"></a>*java技术体系按照业务领域目前分为4个平台**</h2><blockquote><ol><li>Java Card ——&gt; 支持Java小程序(Applets) 运行在小内存设备(智能卡)上的平台</li><li>Java ME (Micro Edition) —–&gt; 支持Java程序运行在移动终端(手机, PDA)上的平台, 也称为J2ME</li><li>Java SE (Standard Edition) –&gt; 支持面向桌面的级应用(如windows下的应用程序)的Java平台 提供了完整的Java核心API, 也称为J2SE</li><li>Java EE (Enterprise Edition) –&gt; 支持使用多层架构的企业应用的Java平台, 提供了JavaSE API以及其它扩充,也称为J2EE .</li></ol></blockquote><hr><h4 id="Java发展史"><a href="#Java发展史" class="headerlink" title="*Java发展史**"></a>*Java发展史**</h4><p><img src="http://img.blog.csdn.net/20161214192716089?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYW55YW8xMTIyMzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>其他大事</strong></p><ul><li>1999年4月,HotSpot虚拟机发布 (其原虚拟机研发公司于1997年被sun公司收购),JDK1.3以后成为所有SunJDK的默认虚拟机</li><li>JDK1.5以前版本语法变化较小,发布的1.5的语法层面进行了巨大改进,包括自动装箱,泛型,动态注解,foreach等,并改进了java内存模型</li><li>JDK1.6以后就不叫J2ME,J2SE,J2EE而改名为Java ME6, Java SE6, Java EE6</li><li>2006年在JavaOne大会上 Sun公司将Java陆续开源</li><li>2009年Sun公司被Oracle收购 (但Java语言由JCP组织管理)</li><li></li></ul><hr><h3 id="Java虚拟机发展史-部分"><a href="#Java虚拟机发展史-部分" class="headerlink" title="*Java虚拟机发展史(部分)**"></a>*Java虚拟机发展史(部分)**</h3><p>虚拟机版本有</p><ol><li>Sun Classic VM –&gt;世界上第一个商用虚拟机 (JDK1.0的运行环境)</li><li>Sun HotSpot VM –&gt;目前使用范围最广的Java虚拟机 ,Sun JDK,Open JDK所带的虚拟机 :: (#当初设计               的目标是达到C语言50%以上的执行效率)</li><li>KVM (Sun公司) –&gt;简单,轻量,高度可移植,运行速度慢.广泛运用于Android,iOS等智能手机系统</li><li>JRockit VM (BEA公司) –&gt;专注服务器应用的虚拟机,所以可以不关注启动速度而运行速度快,其在垃圾回收器和MissionControl服务套件等部分的实现处于领先地位</li><li>IBM J9 VM (IBM公司) –&gt; 一款多用途虚拟机</li><li>Microsoft JVM(微软) –&gt; 这是可以说是最有意思的……当初微软也是Java技术的铁杆支持者,并且自行开发了只有win平台的java虚拟机,然而Sun公司起诉微软侵权,微软败诉于是被迫终止了Java虚拟机的研究,移除了WindowsXP中自家Java虚拟机．有趣的是当初怼人家时候说人侵权要阻止人家支持Java,真的成了之后Sun公司又到处登报纸希望Windows继续支持Java,因为那时候Sun真的是已经日薄西山了 (讽刺啊!!)</li></ol><hr><h4 id="OpenJDK源码仓库地址"><a href="#OpenJDK源码仓库地址" class="headerlink" title="OpenJDK源码仓库地址*"></a><strong>OpenJDK源码仓库地址*</strong></h4><p><a href="http://hg.openjdk.java.net/jdk7u/jdk7u-dev" target="_blank" rel="noopener">http://hg.openjdk.java.net/jdk7u/jdk7u-dev</a></p><h4 id="OpenJDK官方源码包"><a href="#OpenJDK官方源码包" class="headerlink" title="OpenJDK官方源码包"></a><strong>OpenJDK官方源码包</strong></h4><p><a href="http://jdk7.java.net/source.html" target="_blank" rel="noopener">http://jdk7.java.net/source.html</a></p><p><em>ps:尽量在linux或者mac上构建OpenJDK</em></p>]]></content>
      
      
      <categories>
          
          <category> java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入了解java虚拟机 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sax解析xml文档实现打印xml(遍历全部和指定位置)</title>
      <link href="/2017/02/05/2017_sax/"/>
      <url>/2017/02/05/2017_sax/</url>
      
        <content type="html"><![CDATA[<p><strong>这是示例被解析xml</strong></p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;书架&gt;    &lt;书&gt;        &lt;书名&gt;java实战&lt;/书名&gt;        &lt;作者&gt;张三&lt;/作者&gt;        &lt;售价&gt;121元&lt;/售价&gt;        &lt;售价&gt;12元&lt;/售价&gt;    &lt;/书&gt;    &lt;书&gt;        &lt;书名 color=&quot;yellow&quot; name=&quot;XXX&quot;&gt;c测试&lt;/书名&gt;        &lt;作者&gt;李四&lt;/作者&gt;        &lt;售价 color=&quot;rrr&quot;&gt;54元&lt;/售价&gt;        &lt;售价&gt;12元&lt;/售价&gt;&lt;/书&gt;&lt;/书架&gt;</code></pre><a id="more"></a><p><strong>遍历全部</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.sax;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.rowset.spi.XmlReader;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParser;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParserFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.Attributes;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.ContentHandler;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.Locator;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.XMLReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sax</span>解析<span class="title">xml</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> <span class="keyword">throws</span> ParserConfigurationException, SAXException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建解析工厂 抽象工厂</span></span><br><span class="line">        SAXParserFactory factory = SAXParserFactory.newInstance();</span><br><span class="line">        <span class="comment">//2.得到解析器</span></span><br><span class="line">        SAXParser parser = factory.newSAXParser();</span><br><span class="line">        <span class="comment">//3.得到读取器</span></span><br><span class="line">        XMLReader reader = parser.getXMLReader();</span><br><span class="line">        <span class="comment">//4.设置内容处理器</span></span><br><span class="line">        reader.setContentHandler(<span class="keyword">new</span> ListHandler());</span><br><span class="line">        <span class="comment">//5.读取文档内容 解析xml文档 解析一点就调用处理器处理 所以要先设置内容处理器</span></span><br><span class="line">        reader.parse(<span class="string">"src/book.xml"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内容处理器 得到xml文档所有内容</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListHandler</span> <span class="keyword">implements</span> <span class="title">ContentHandler</span></span>&#123;</span><br><span class="line">    <span class="comment">//实现接口中的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName,</span></span></span><br><span class="line"><span class="function"><span class="params">            Attributes atts)</span> <span class="keyword">throws</span> SAXException </span>&#123;<span class="comment">//当得到开始标签时 调用这个方法</span></span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.print(<span class="string">"&lt;"</span> + qName );<span class="comment">//打印</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取属性 还要判断属性有没有(是否为null)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; atts != <span class="keyword">null</span> &amp;&amp; i &lt; atts.getLength(); i++) &#123;</span><br><span class="line">            String att_Name = atts.getQName(i);</span><br><span class="line">            String att_Vlaue = atts.getValue(i);</span><br><span class="line">            System.out.print(att_Name + <span class="string">"="</span> + att_Vlaue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println( <span class="string">"&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">characters</span><span class="params">(<span class="keyword">char</span>[] ch, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> SAXException </span>&#123;                       <span class="comment">//当解析到标签中内容时就调用这个方法</span></span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(ch, start, length));<span class="comment">//String解码(要解码的字符集,要解码的第一个byte位置,解码的长度)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String qName)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> SAXException </span>&#123;                       <span class="comment">//当解析到结束标签时 调用这个方法</span></span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"&lt;/"</span>+ qName +<span class="string">"&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDocumentLocator</span><span class="params">(Locator locator)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startPrefixMapping</span><span class="params">(String prefix, String uri)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endPrefixMapping</span><span class="params">(String prefix)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ignorableWhitespace</span><span class="params">(<span class="keyword">char</span>[] ch, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processingInstruction</span><span class="params">(String target, String data)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">skippedEntity</span><span class="params">(String name)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>遍历指定标签</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//打印指定标签的值(这里指定第二个作者的值)</span></span><br><span class="line"><span class="keyword">package</span> cn.sax;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParser;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParserFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.Attributes;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.XMLReader;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.helpers.DefaultHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sax</span>解析获得指定标签的值</span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> <span class="keyword">throws</span> ParserConfigurationException, SAXException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建解析工厂 抽象工厂</span></span><br><span class="line">        SAXParserFactory factory = SAXParserFactory.newInstance();</span><br><span class="line">        <span class="comment">//2.得到解析器</span></span><br><span class="line">        SAXParser parser = factory.newSAXParser();</span><br><span class="line">        <span class="comment">//3.得到读取器</span></span><br><span class="line">        XMLReader reader = parser.getXMLReader();</span><br><span class="line">        <span class="comment">//4.设置内容处理器</span></span><br><span class="line">        reader.setContentHandler(<span class="keyword">new</span> TagValueHandler());</span><br><span class="line">        <span class="comment">//5.读取文档内容 解析xml文档</span></span><br><span class="line">        reader.parse(<span class="string">"src/book.xml"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取指定标签的值</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagValueHandler</span> <span class="keyword">extends</span> <span class="title">DefaultHandler</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String currentTag;<span class="comment">//用来记住当前解析到的是什么标签</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> needNumber = <span class="number">2</span>;     <span class="comment">//需要的标签是第几个标签</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentNumber; <span class="comment">//当前解析到的是第几个标签</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName,</span></span></span><br><span class="line"><span class="function"><span class="params">            Attributes attributes)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">super</span>.startElement(uri, localName, qName, attributes);<span class="comment">//可以不写</span></span><br><span class="line"></span><br><span class="line">        currentTag = qName;</span><br><span class="line">        <span class="keyword">if</span>(currentTag.equals(<span class="string">"作者"</span>))&#123;</span><br><span class="line">            currentNumber++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String qName)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">super</span>.endElement(uri, localName, qName);</span><br><span class="line"></span><br><span class="line">        currentTag = <span class="keyword">null</span>;<span class="comment">//置空</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">characters</span><span class="params">(<span class="keyword">char</span>[] ch, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">super</span>.characters(ch, start, length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"作者"</span>.equals(currentTag) &amp;&amp; currentNumber==needNumber)&#123; </span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(ch, start, length));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DOM操作 </category>
          
          <category> XML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.Java运行时数据区</title>
      <link href="/2017/02/05/20170205002_Java%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/"/>
      <url>/2017/02/05/20170205002_Java%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述 :"></a><em>概述</em> :</h2><h4 id="Java将new的对象的管理权交由Java虚拟机-so对于Java程序员-不需要写配套的delete-free代码-不容易出现内存溢出或泄露-但是一旦出现了-就需要了解虚拟机如何使用内存来排除bug"><a href="#Java将new的对象的管理权交由Java虚拟机-so对于Java程序员-不需要写配套的delete-free代码-不容易出现内存溢出或泄露-但是一旦出现了-就需要了解虚拟机如何使用内存来排除bug" class="headerlink" title="Java将new的对象的管理权交由Java虚拟机,so对于Java程序员,不需要写配套的delete/free代码,不容易出现内存溢出或泄露,但是一旦出现了,就需要了解虚拟机如何使用内存来排除bug"></a>Java将new的对象的管理权交由Java虚拟机,so对于Java程序员,不需要写配套的delete/free代码,不容易出现内存溢出或泄露,但是一旦出现了,就需要了解虚拟机如何使用内存来排除bug</h4><hr><h4 id="Java虚拟机在执行程序时会把管理的内存划分为多个不同的数据区域"><a href="#Java虚拟机在执行程序时会把管理的内存划分为多个不同的数据区域" class="headerlink" title="Java虚拟机在执行程序时会把管理的内存划分为多个不同的数据区域,"></a>Java虚拟机在执行程序时会把管理的内存划分为多个不同的数据区域,</h4><img src="/2017/02/05/20170205002_Java运行时数据区/20161215182730152.png" title="图片标题"><hr><h3 id="1-程序计数器—-gt-线程私有的区域"><a href="#1-程序计数器—-gt-线程私有的区域" class="headerlink" title="1.程序计数器—&gt;线程私有的区域"></a><strong>1.程序计数器</strong>—&gt;<em>线程私有的区域</em></h3><h4 id="占用内存较小-作用是作为当前线程执行的字节码的行号指示器。"><a href="#占用内存较小-作用是作为当前线程执行的字节码的行号指示器。" class="headerlink" title="占用内存较小,作用是作为当前线程执行的字节码的行号指示器。"></a>占用内存较小,作用是<strong>作为当前线程执行的字节码的行号指示器</strong>。</h4><h4 id="在概念模型里-字节码解释器工作时通过改变程序计数器的值来选取下一条需要执行的字节码指令。分支，循环，跳转，异常处理，线程恢复等基础功能都需要此计数器完成。"><a href="#在概念模型里-字节码解释器工作时通过改变程序计数器的值来选取下一条需要执行的字节码指令。分支，循环，跳转，异常处理，线程恢复等基础功能都需要此计数器完成。" class="headerlink" title="在概念模型里,字节码解释器工作时通过改变程序计数器的值来选取下一条需要执行的字节码指令。分支，循环，跳转，异常处理，线程恢复等基础功能都需要此计数器完成。"></a>在概念模型里,字节码解释器工作时通过改变程序计数器的值来选取下一条需要执行的字节码指令。分支，循环，跳转，异常处理，线程恢复等基础功能都需要此计数器完成。</h4><h4 id="Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式实现的，so每次处理器只执行一个线程。-so-每个线程都拥有一个独立的程序计数器，各线程计数器互不影响，独立储存。"><a href="#Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式实现的，so每次处理器只执行一个线程。-so-每个线程都拥有一个独立的程序计数器，各线程计数器互不影响，独立储存。" class="headerlink" title="Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式实现的，so每次处理器只执行一个线程。 so 每个线程都拥有一个独立的程序计数器，各线程计数器互不影响，独立储存。"></a>Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式实现的，so每次处理器只执行一个线程。 so <strong>每个线程都拥有一个独立的程序计数器</strong>，各线程计数器互不影响，独立储存。</h4><h4 id="若执行的是Native方法，则程序计数器值为空（Undefined）-lt-——唯一"><a href="#若执行的是Native方法，则程序计数器值为空（Undefined）-lt-——唯一" class="headerlink" title="若执行的是Native方法，则程序计数器值为空（Undefined） &lt;——唯一"></a>若执行的是Native方法，则程序计数器值为空（Undefined） &lt;——唯一</h4><a id="more"></a><hr><h3 id="2-Java虚拟机栈—-gt-线程私有的区域"><a href="#2-Java虚拟机栈—-gt-线程私有的区域" class="headerlink" title="2.Java虚拟机栈—&gt;线程私有的区域"></a><strong>2.Java虚拟机栈</strong>—&gt;<em>线程私有的区域</em></h3><h4 id="描述了Java方法执行的内存模式，每个方法在执行同时会创建一个栈帧，用来存储"><a href="#描述了Java方法执行的内存模式，每个方法在执行同时会创建一个栈帧，用来存储" class="headerlink" title="描述了Java方法执行的内存模式，每个方法在执行同时会创建一个栈帧，用来存储"></a>描述了Java方法执行的内存模式，每个方法在执行同时会创建一个栈帧，用来存储</h4><ol><li><strong>局部变量表</strong> （编译时即确定内存大小，方法执行时不会改变其大小）<br>1.1. 存放编译期各种可知的基本数据类型  (64位长度的long，double占两个局部变量空间，其他占一个)<br>1.2. 对象引用  (指向对象其实地址的指针或是指向代表对象的句柄或其他与此对象相关的位置)<br>1.3. returnAddress类型  (指向一个字节码指令的地址)</li><li><strong>操作数栈</strong></li><li><strong>动态链接</strong></li><li><strong>方法出口</strong></li></ol><h4 id="方法的执行就是栈帧在虚拟机栈中的入栈到出栈的过程。"><a href="#方法的执行就是栈帧在虚拟机栈中的入栈到出栈的过程。" class="headerlink" title="方法的执行就是栈帧在虚拟机栈中的入栈到出栈的过程。"></a><strong>方法的执行就是栈帧在虚拟机栈中的入栈到出栈的过程</strong>。</h4><h4 id="人们常说的Java内存分配的堆内存-Heap-，栈内存-Stack-中-后者就是这里的虚拟机栈。"><a href="#人们常说的Java内存分配的堆内存-Heap-，栈内存-Stack-中-后者就是这里的虚拟机栈。" class="headerlink" title="人们常说的Java内存分配的堆内存(Heap)，栈内存(Stack) 中 后者就是这里的虚拟机栈。"></a>人们常说的Java内存分配的堆内存(Heap)，栈内存(Stack) 中 后者就是这里的虚拟机栈。</h4><h4 id="当线程请求的栈深度大于虚拟机所允许的深度-———-StackOverflowError（当然，目前虚拟机栈都是可以动态扩展的）"><a href="#当线程请求的栈深度大于虚拟机所允许的深度-———-StackOverflowError（当然，目前虚拟机栈都是可以动态扩展的）" class="headerlink" title="当线程请求的栈深度大于虚拟机所允许的深度 ——— StackOverflowError（当然，目前虚拟机栈都是可以动态扩展的）"></a>当线程请求的栈深度大于虚拟机所允许的深度 ——— <em>StackOverflowError</em>（当然，目前虚拟机栈都是可以动态扩展的）</h4><h4 id="当无法申请到足够的内存-——————–OutOfMemoryError"><a href="#当无法申请到足够的内存-——————–OutOfMemoryError" class="headerlink" title="当无法申请到足够的内存 ——————–OutOfMemoryError"></a>当无法申请到足够的内存 ——————–<em>OutOfMemoryError</em></h4><hr><h3 id="3-本地方法栈（Native-Method-Stack）"><a href="#3-本地方法栈（Native-Method-Stack）" class="headerlink" title="3.本地方法栈（Native Method Stack）"></a><strong>3.本地方法栈</strong>（Native Method Stack）</h3><h4 id="功能与虚拟机栈相似"><a href="#功能与虚拟机栈相似" class="headerlink" title="功能与虚拟机栈相似"></a>功能与虚拟机栈相似</h4><ul><li>虚拟机栈：为虚拟机执行Java方法（字节码）服务</li><li>本地方法栈：为虚拟机使用的Native方法服务 </li></ul><hr><h3 id="4-Java堆—-gt-所有线程共享"><a href="#4-Java堆—-gt-所有线程共享" class="headerlink" title="4.Java堆—&gt;所有线程共享"></a><strong>4.Java堆</strong>—&gt;<em>所有线程共享</em></h3><h4 id="内存最大，虚拟机启动时创建，-Java垃圾收集器主要管理区域（也叫GC堆）"><a href="#内存最大，虚拟机启动时创建，-Java垃圾收集器主要管理区域（也叫GC堆）" class="headerlink" title="内存最大，虚拟机启动时创建， Java垃圾收集器主要管理区域（也叫GC堆）"></a>内存最大，虚拟机启动时创建， Java垃圾收集器主要管理区域（也叫<strong>GC堆</strong>）</h4><h4 id="作用：存放对象实例（和数组）-即为对象实例分配内存"><a href="#作用：存放对象实例（和数组）-即为对象实例分配内存" class="headerlink" title="作用：存放对象实例（和数组） 即为对象实例分配内存"></a>作用：<strong>存放对象实例（和数组）</strong> 即为对象实例分配内存</h4><h4 id="可以进行进一步划分多个线程私有的分配缓冲区"><a href="#可以进行进一步划分多个线程私有的分配缓冲区" class="headerlink" title="可以进行进一步划分多个线程私有的分配缓冲区"></a>可以进行进一步划分多个线程私有的分配缓冲区</h4><h4 id="可以处于物理不连续的内存空间，但逻辑连续；可以实现成扩展，也可以固定（可通过-Xmx-Xms控制）"><a href="#可以处于物理不连续的内存空间，但逻辑连续；可以实现成扩展，也可以固定（可通过-Xmx-Xms控制）" class="headerlink" title="可以处于物理不连续的内存空间，但逻辑连续；可以实现成扩展，也可以固定（可通过-Xmx -Xms控制）"></a>可以处于物理不连续的内存空间，但逻辑连续；可以实现成扩展，也可以固定（可通过-Xmx -Xms控制）</h4><hr><h3 id="5-方法区—-gt-所有线程共享"><a href="#5-方法区—-gt-所有线程共享" class="headerlink" title="5.方法区—&gt;所有线程共享"></a><strong>5.方法区</strong>—&gt;<em>所有线程共享</em></h3><h4 id="用于存储已被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等"><a href="#用于存储已被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等" class="headerlink" title="用于存储已被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等"></a>用于<strong>存储已被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等</strong></h4><h4 id="别名-Non-Heap"><a href="#别名-Non-Heap" class="headerlink" title="别名 Non-Heap"></a>别名 Non-Heap</h4><h4 id="可以物理内存不连续，-可以固定或可扩展，-可选择不实现垃圾收集（需要对常量池回收和对类型进行卸载，否则-易出现内存泄漏）"><a href="#可以物理内存不连续，-可以固定或可扩展，-可选择不实现垃圾收集（需要对常量池回收和对类型进行卸载，否则-易出现内存泄漏）" class="headerlink" title="可以物理内存不连续， 可以固定或可扩展， 可选择不实现垃圾收集（需要对常量池回收和对类型进行卸载，否则 易出现内存泄漏）"></a>可以物理内存不连续， 可以固定或可扩展， 可选择不实现垃圾收集（需要对常量池回收和对类型进行卸载，否则 易出现内存泄漏）</h4><hr><h3 id="6-运行时常量池（Runtime-Constant-Pool）"><a href="#6-运行时常量池（Runtime-Constant-Pool）" class="headerlink" title="6.运行时常量池（Runtime Constant Pool）"></a><strong>6.运行时常量池（Runtime Constant Pool）</strong></h3><h4 id="方法区的一部分，用于存储编译期生成的各种字面符号引用-一般也存储翻译出来的直接引用"><a href="#方法区的一部分，用于存储编译期生成的各种字面符号引用-一般也存储翻译出来的直接引用" class="headerlink" title="方法区的一部分，用于存储编译期生成的各种字面符号引用(一般也存储翻译出来的直接引用)"></a>方法区的一部分，用于<strong>存储编译期生成的各种字面符号引用(一般也存储翻译出来的直接引用)</strong></h4><h4 id="Java对Class文件每部分（类版本，字段，方法，接口，常量池等）格式有严格规定，符合规定才能被虚拟机认可，装载，执行。but对运行时常量池，无规定。"><a href="#Java对Class文件每部分（类版本，字段，方法，接口，常量池等）格式有严格规定，符合规定才能被虚拟机认可，装载，执行。but对运行时常量池，无规定。" class="headerlink" title="Java对Class文件每部分（类版本，字段，方法，接口，常量池等）格式有严格规定，符合规定才能被虚拟机认可，装载，执行。but对运行时常量池，无规定。"></a>Java对Class文件每部分（类版本，字段，方法，接口，常量池等）格式有严格规定，符合规定才能被虚拟机认可，装载，执行。but对运行时常量池，无规定。</h4><h4 id="具有动态性（Class文件常量池无动态性）"><a href="#具有动态性（Class文件常量池无动态性）" class="headerlink" title="具有动态性（Class文件常量池无动态性）"></a>具有<strong>动态性</strong>（Class文件常量池无动态性）</h4><hr><h3 id="7-直接内存（堆外内存）"><a href="#7-直接内存（堆外内存）" class="headerlink" title="7.直接内存（堆外内存）"></a><strong>7.直接内存（堆外内存）</strong></h3><h4 id="不是虚拟机运行时数据区的一部分，不归虚拟机管理"><a href="#不是虚拟机运行时数据区的一部分，不归虚拟机管理" class="headerlink" title="不是虚拟机运行时数据区的一部分，不归虚拟机管理"></a>不是虚拟机运行时数据区的一部分，不归虚拟机管理</h4><h4 id="减少了垃圾回收的工作（垃圾回收会暂停其他的工作）"><a href="#减少了垃圾回收的工作（垃圾回收会暂停其他的工作）" class="headerlink" title="减少了垃圾回收的工作（垃圾回收会暂停其他的工作）"></a>减少了垃圾回收的工作（垃圾回收会暂停其他的工作）</h4><h4 id="加快了复制的速度。因为堆内在flush到远程时，会先复制到直接内存（非堆内存），然后在发送；而堆外内存相当于省略掉了这个工作。"><a href="#加快了复制的速度。因为堆内在flush到远程时，会先复制到直接内存（非堆内存），然后在发送；而堆外内存相当于省略掉了这个工作。" class="headerlink" title="加快了复制的速度。因为堆内在flush到远程时，会先复制到直接内存（非堆内存），然后在发送；而堆外内存相当于省略掉了这个工作。"></a>加快了复制的速度。因为堆内在flush到远程时，会先复制到直接内存（非堆内存），然后在发送；而堆外内存相当于省略掉了这个工作。</h4><h4 id="堆外内存难以控制，如果内存泄漏，那么很难排查"><a href="#堆外内存难以控制，如果内存泄漏，那么很难排查" class="headerlink" title="堆外内存难以控制，如果内存泄漏，那么很难排查"></a>堆外内存难以控制，如果内存泄漏，那么很难排查</h4><h4 id="堆外内存相对来说，不适合存储很复杂的对象。一般简单的对象或者扁平化的比较适合。"><a href="#堆外内存相对来说，不适合存储很复杂的对象。一般简单的对象或者扁平化的比较适合。" class="headerlink" title="堆外内存相对来说，不适合存储很复杂的对象。一般简单的对象或者扁平化的比较适合。"></a>堆外内存相对来说，不适合存储很复杂的对象。一般简单的对象或者扁平化的比较适合。</h4><p>此处来源：<a href="http://blog.csdn.net/qq_17612199/article/details/52316719" target="_blank" rel="noopener">http://blog.csdn.net/qq_17612199/article/details/52316719</a></p>]]></content>
      
      
      <categories>
          
          <category> java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入了解java虚拟机 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sax解析xml文档(用javabean封装xml文档)</title>
      <link href="/2017/02/05/2017_sax2/"/>
      <url>/2017/02/05/2017_sax2/</url>
      
        <content type="html"><![CDATA[<p><strong>被解析的xml示例</strong></p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;书架&gt;    &lt;书&gt;        &lt;书名&gt;java实战&lt;/书名&gt;        &lt;作者&gt;张三&lt;/作者&gt;        &lt;售价&gt;121元&lt;/售价&gt;        &lt;售价&gt;12元&lt;/售价&gt;    &lt;/书&gt;    &lt;书&gt;        &lt;书名 color=&quot;yellow&quot; name=&quot;XXX&quot;&gt;c测试&lt;/书名&gt;        &lt;作者&gt;李四&lt;/作者&gt;        &lt;售价 color=&quot;rrr&quot;&gt;54元&lt;/售价&gt;        &lt;售价&gt;12元&lt;/售价&gt;&lt;/书&gt;&lt;/书架&gt;</code></pre><a id="more"></a><p><strong>封装用的javabean</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sax;</span><br><span class="line"><span class="comment">//这是封装用的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> String price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(String price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">**解析**</span><br><span class="line"><span class="keyword">package</span> cn.sax;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.print.Book;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParser;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParserFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.Attributes;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.XMLReader;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.helpers.DefaultHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sax</span>解析<span class="title">xml_javabean</span>封装<span class="title">xml</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> <span class="keyword">throws</span> ParserConfigurationException, SAXException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建解析工厂 抽象工厂</span></span><br><span class="line">        SAXParserFactory factory = SAXParserFactory.newInstance();</span><br><span class="line">        <span class="comment">//2.得到解析器</span></span><br><span class="line">        SAXParser parser = factory.newSAXParser();</span><br><span class="line">        <span class="comment">//3.得到读取器</span></span><br><span class="line">        XMLReader reader = parser.getXMLReader();</span><br><span class="line">        <span class="comment">//4.设置内容处理器 读取使xml内容放在list中的book对象中</span></span><br><span class="line">        BeanListHandler hand = <span class="keyword">new</span> BeanListHandler();</span><br><span class="line">        reader.setContentHandler(hand);</span><br><span class="line">        <span class="comment">//5.读取文档内容 解析xml文档</span></span><br><span class="line">        reader.parse(<span class="string">"src/book.xml"</span>);</span><br><span class="line">        List list = hand.getBooks();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把xml文档中的每一本书封装到每个book对象中 并把多个book对象放在List集合中返回</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeanListHandler</span> <span class="keyword">extends</span> <span class="title">DefaultHandler</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">private</span> String currentTag;<span class="comment">//解析到的当前的标签名称(所有)</span></span><br><span class="line">    <span class="keyword">private</span> BookObject book;<span class="comment">//book对象封装得到的book标签</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName,</span></span></span><br><span class="line"><span class="function"><span class="params">            Attributes attributes)</span> <span class="keyword">throws</span> SAXException </span>&#123;<span class="comment">//开始标签</span></span><br><span class="line">        currentTag = qName;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"书"</span>.equals(currentTag))&#123;</span><br><span class="line">            <span class="comment">//如果是书 就要用一个book对象来封装这个书</span></span><br><span class="line">            book = <span class="keyword">new</span> BookObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">characters</span><span class="params">(<span class="keyword">char</span>[] ch, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SAXException </span>&#123;                   <span class="comment">//内容</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"书名"</span>.equals(currentTag))&#123;<span class="comment">//如果标签是 书名 则创造字符串对象放标签的内容</span></span><br><span class="line">            String name = <span class="keyword">new</span> String(ch, start, length);</span><br><span class="line">            book.setName(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"作者"</span>.equals(currentTag))&#123;</span><br><span class="line">            String author = <span class="keyword">new</span> String(ch, start, length);</span><br><span class="line">            book.setAuthor(author);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"售价"</span>.equals(currentTag))&#123;</span><br><span class="line">            String price = <span class="keyword">new</span> String(ch, start, length);</span><br><span class="line">            book.setPrice(price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String qName)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SAXException </span>&#123;                   <span class="comment">//结束标签</span></span><br><span class="line">        currentTag = <span class="keyword">null</span>;<span class="comment">//currentTag不能不清空 以为解析xml文档会读取到空格和换行 干扰 空指针异常</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"书"</span>.equals(qName)) &#123;</span><br><span class="line">            list.add(book);<span class="comment">//把book对象加入到list中</span></span><br><span class="line">            book = <span class="keyword">null</span>;<span class="comment">//book对象置空</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于list对象是私有的 所以需要这个 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getBooks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> DOM操作 </category>
          
          <category> XML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos下用yum安装mysql5.6</title>
      <link href="/2017/02/05/2017_centos/"/>
      <url>/2017/02/05/2017_centos/</url>
      
        <content type="html"><![CDATA[<pre><code>1. 输入命令 查看当前安装的mysql:  rpm -qa | grep mysql2. 如果有 卸载:    rpm -e mysql　　// 普通删除模式                  rpm -e --nodeps mysql　　// 强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件，则用该命令可以对其进行强力删除3. 查看yum上提供的mysql版本信息 : yum list | grep mysql4.安装 :    yum install -y mysql-server mysql mysql-devel    在CentOS7下安装mysql 可能会提示“No package mysql-server available.”    解决办法: rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm            然后再安装 mysql-server5.查看安装好的mysql信息: rpm -qi mysql-server6.启动:  service mysqld start7. 设置密码: mysql -u root 进入mysql界面            SET PASSWORD FOR &apos;root&apos;@&apos;localhost&apos; = PASSWORD(&apos;newpass&apos;);8. 新建新用户,用于远程连接(也可以修改root用户访问权限)            CREATE USER &apos;username&apos;@&apos;host&apos; IDENTIFIED BY &apos;password&apos;;             * username - 你将创建的用户名,             * host - 指定该用户在哪个主机上可以登陆,如果是本地用户可用localhost, 如果想让该用户可以从任意远程主机登陆,可以使用通配符%.             * password - 该用户的登陆密码,密码可以为空,如果为空则该用户可以不需要密码登陆服务器9. 为用户授权: GRANT privileges ON databasename.tablename TO &apos;username&apos;@&apos;host&apos;             * privileges - 用户的操作权限,如SELECT , INSERT , UPDATE 等(详细列表见该文最后面).如果要授予所的权限则使用ALL.;            * databasename - 数据库名,            * tablename-表名,如果要授予该用户对所有数据库和表的相应操作权限则可用*表示, 如*.*. 10.设置密码: SET PASSWORD FOR &apos;username&apos;@&apos;host&apos; = PASSWORD(&apos;newpassword&apos;);</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XPath解析xml文档</title>
      <link href="/2017/02/05/2017_XPath/"/>
      <url>/2017/02/05/2017_XPath/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>这是被解析的xml文档示例</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">用户</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">"1"</span>  <span class="attr">username</span>=<span class="string">"aaa"</span> <span class="attr">password</span>=<span class="string">"123"</span>  <span class="attr">email</span>=<span class="string">"abc.com"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">"2"</span>  <span class="attr">username</span>=<span class="string">"bbb"</span>  <span class="attr">password</span>=<span class="string">"123"</span>  <span class="attr">email</span>=<span class="string">"abc.com"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">书架</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">书</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">书名</span>&gt;</span>java实战<span class="tag">&lt;/<span class="name">书名</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">作者</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">作者</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">售价</span>&gt;</span>121元<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">售价</span>&gt;</span>12元<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">书</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">书</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">书名</span> <span class="attr">color</span>=<span class="string">"yellow"</span> <span class="attr">name</span>=<span class="string">"XXX"</span>&gt;</span>c测试<span class="tag">&lt;/<span class="name">书名</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">作者</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">作者</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">售价</span> <span class="attr">color</span>=<span class="string">"rrr"</span>&gt;</span>54元<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">售价</span>&gt;</span>12元<span class="tag">&lt;/<span class="name">售价</span>&gt;</span><span class="tag">&lt;/<span class="name">书</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">书架</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">用户</span>&gt;</span></span><br></pre></td></tr></table></figure></p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Node;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用XPath提取xml文档数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Xpath</span></span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">        SAXReader reader = <span class="keyword">new</span> SAXReader();<span class="comment">//解析器</span></span><br><span class="line">        Document document = reader.read(<span class="keyword">new</span> File(<span class="string">"src/book.xml"</span>));<span class="comment">//解析</span></span><br><span class="line"></span><br><span class="line">        String s = document.selectSingleNode(<span class="string">"//作者"</span>).getText();<span class="comment">//得到第一个作者的内容</span></span><br><span class="line">        <span class="comment">//selectSingleNode是取第一个"作者"节点 要取所有则用selectNodes</span></span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException </span>&#123;<span class="comment">//检测xml文档中有没有相匹配的用户账号密码</span></span><br><span class="line">        String username = <span class="string">"aaa"</span>;</span><br><span class="line">        String password = <span class="string">"123"</span>;</span><br><span class="line"></span><br><span class="line">        SAXReader reader = <span class="keyword">new</span> SAXReader();<span class="comment">//解析器</span></span><br><span class="line">        Document document = reader.read(<span class="keyword">new</span> File(<span class="string">"src/book.xml"</span>));<span class="comment">//解析</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//选择含有属性username且其值为'aa'的user元素( 这里注意空格有无是不同的)</span></span><br><span class="line">        Node node = document.selectSingleNode(<span class="string">"//user[@username= '"</span> + username + <span class="string">"'  and @password= '"</span> + password + <span class="string">"'  ]"</span>);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"用户名/密码错误"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"登陆成功"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DOM操作 </category>
          
          <category> XML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XPath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运用存储过程批量更新数据库中某个字段</title>
      <link href="/2017/02/05/2017_Procedure/"/>
      <url>/2017/02/05/2017_Procedure/</url>
      
        <content type="html"><![CDATA[<p><strong>这是目标表 </strong><br><img src="/2017/02/05/2017_Procedure/1.png" title="图片标题"><br><strong>这是来源表 </strong><br><img src="/2017/02/05/2017_Procedure/2.png" title="图片标题"><br>**目的:要把exam_add表中的memo字段根据idCard字段对应更新到w_secondary_score表的memo</p><p>**</p><a id="more"></a><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> pidCard <span class="built_in">varchar</span>(<span class="number">20</span>); <span class="comment">/*存放idCard*/</span></span><br><span class="line"><span class="keyword">DECLARE</span> pmemo <span class="built_in">varchar</span>(<span class="number">255</span>);  <span class="comment">/*存放memo*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">declare</span> done <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">-1</span>; </span><br><span class="line">    <span class="keyword">DECLARE</span> cur <span class="keyword">CURSOR</span> <span class="keyword">FOR</span>(<span class="keyword">SELECT</span> idCard, memo <span class="keyword">from</span> exam_end); <span class="comment">/*定义一个游标*/</span></span><br><span class="line">    <span class="keyword">DECLARE</span> continue <span class="keyword">handler</span> <span class="keyword">for</span> <span class="keyword">not</span> <span class="keyword">found</span> <span class="keyword">set</span> done=<span class="number">1</span>;  </span><br><span class="line"></span><br><span class="line">    OPEN cur;</span><br><span class="line">    myLoop: LOOP  </span><br><span class="line">        FETCH cur INTO pidCard,pmemo; <span class="comment">/*把游标内数据赋值给变量*/</span></span><br><span class="line"></span><br><span class="line">        if done = 1 then   </span><br><span class="line">            leave myLoop;  </span><br><span class="line">          <span class="keyword">end</span> <span class="keyword">if</span>;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">UPDATE</span> w_secondary_score <span class="keyword">set</span> memo = pmemo <span class="keyword">where</span> idCard = pidCard; <span class="comment">/*循环更新*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">loop</span> myLoop; </span><br><span class="line">    CLOSE cur;</span><br></pre></td></tr></table></figure><p><strong>更新成功!!!!!!</strong><br><strong>ps:在导入excel表到数据库的时候(通过navicat软件),出现中文乱码, 解决方案: </strong></p><p><strong>方法1.</strong>把excel表格编码修改为与数据库相同的编码(我的是utf-8),像这样<br><img src="/2017/02/05/2017_Procedure/3.png" title="图片标题"><br>(百度说可以, 然而我试了依然乱码) </p><p><strong>方法2</strong>:我看到navicat可以导入.txt文件 那么可以把excel先转为.txt文件设置编码为utf-8,然后再导入—–&gt;成功!<br><br><img src="/2017/02/05/2017_Procedure/5.png" title="图片标题"><br></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 存储过程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dom4j解析xml文档实现增删改查</title>
      <link href="/2017/02/05/2017_Dom4j/"/>
      <url>/2017/02/05/2017_Dom4j/</url>
      
        <content type="html"><![CDATA[<p><strong>这是被解析的xml文档示例</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">书架</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">书</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">书名</span>&gt;</span>java实战<span class="tag">&lt;/<span class="name">书名</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">作者</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">作者</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">售价</span>&gt;</span>121元<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">售价</span>&gt;</span>12元<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">书</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">书</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">书名</span> <span class="attr">color</span>=<span class="string">"yellow"</span> <span class="attr">name</span>=<span class="string">"XXX"</span>&gt;</span>c测试<span class="tag">&lt;/<span class="name">书名</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">作者</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">作者</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">售价</span> <span class="attr">color</span>=<span class="string">"rrr"</span>&gt;</span>54元<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">售价</span>&gt;</span>12元<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">书</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">书架</span>&gt;</span></span><br></pre></td></tr></table></figure></p><hr><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentHelper;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.OutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.XMLWriter;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dom4j</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException</span>&#123;<span class="comment">//读</span></span><br><span class="line">        SAXReader reader = <span class="keyword">new</span> SAXReader();<span class="comment">//解析器</span></span><br><span class="line">        Document document = reader.read(<span class="keyword">new</span> File(<span class="string">"src/book.xml"</span>));<span class="comment">//解析</span></span><br><span class="line"></span><br><span class="line">        Element root = document.getRootElement();<span class="comment">//得到根节点 "书架"</span></span><br><span class="line">        Element book = (Element) root.elements(<span class="string">"书"</span>).get(<span class="number">1</span>);<span class="comment">//得到"书"节点中第二个"书"节点</span></span><br><span class="line">        String value = book.element(<span class="string">"书名"</span>).getText();<span class="comment">//得到售"书名"节点的内容</span></span><br><span class="line">        String attribute = book.element(<span class="string">"书名"</span>).attribute(<span class="string">"color"</span>).getValue();<span class="comment">//得到属性值</span></span><br><span class="line">        String attribute1 = book.element(<span class="string">"书名"</span>).attributeValue(<span class="string">"color"</span>);<span class="comment">//得到的同上</span></span><br><span class="line"></span><br><span class="line">        System.out.println(value);</span><br><span class="line">        System.out.println(attribute);</span><br><span class="line">        System.out.println(attribute1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException, IOException</span>&#123;<span class="comment">//增</span></span><br><span class="line">        SAXReader reader = <span class="keyword">new</span> SAXReader();<span class="comment">//解析器</span></span><br><span class="line">        Document document = reader.read(<span class="keyword">new</span> File(<span class="string">"src/book.xml"</span>));<span class="comment">//解析</span></span><br><span class="line"></span><br><span class="line">        Element book = document.getRootElement().element(<span class="string">"书"</span>);<span class="comment">//得到第一本书</span></span><br><span class="line">        book.addElement(<span class="string">"售价"</span>).setText(<span class="string">"45元"</span>);<span class="comment">//在书上添加售价节点 同时添加节点内容</span></span><br><span class="line"></span><br><span class="line">        OutputFormat format = <span class="keyword">new</span> OutputFormat().createPrettyPrint();<span class="comment">//格式化输出器</span></span><br><span class="line">        format.setEncoding(<span class="string">"UTF-8"</span>);<span class="comment">//设置格式化输出器的编码为UTF-8编码 使document按照utf-8格式输出</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//把修改写入文件 document是UTF-8编码的</span></span><br><span class="line">        <span class="comment">//XMLWriter writer = new XMLWriter(new FileWriter("src/book.xml"));//可能出现乱码</span></span><br><span class="line">        <span class="comment">//OutputStreamWriter可以指点采用什么字符集编码</span></span><br><span class="line">        XMLWriter writer = <span class="keyword">new</span> XMLWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/book.xml"</span>), format);</span><br><span class="line">        writer.write(document);<span class="comment">//把document对象写入</span></span><br><span class="line">        writer.close();<span class="comment">//关闭流</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add2</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException, IOException</span>&#123;<span class="comment">//在指定位置添加(通过更改保存所有孩子的List集合顺序)</span></span><br><span class="line">        SAXReader reader = <span class="keyword">new</span> SAXReader();<span class="comment">//解析器</span></span><br><span class="line">        Document document = reader.read(<span class="keyword">new</span> File(<span class="string">"src/book.xml"</span>));<span class="comment">//解析</span></span><br><span class="line"></span><br><span class="line">        Element book = document.getRootElement().element(<span class="string">"书"</span>);<span class="comment">//得到第一本书</span></span><br><span class="line">        List list = book.elements();<span class="comment">//得到所有的孩子 [书名, 孩子, 售价]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建要加入的标签 以及内容</span></span><br><span class="line">        Element helper = DocumentHelper.createElement(<span class="string">"其他"</span>);</span><br><span class="line">        helper.setText(<span class="string">"内容"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加入list集合 需要把加入位置的元素移动到下一位 然后把其加入到位置(自动)</span></span><br><span class="line">        list.add(<span class="number">2</span>, helper);<span class="comment">//添加到第三个位置</span></span><br><span class="line"></span><br><span class="line">        OutputFormat format = <span class="keyword">new</span> OutputFormat().createPrettyPrint();<span class="comment">//格式化输出器</span></span><br><span class="line">        format.setEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        XMLWriter writer = <span class="keyword">new</span> XMLWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/book.xml"</span>), format);</span><br><span class="line">        writer.write(document);<span class="comment">//把document对象写入</span></span><br><span class="line">        writer.close();<span class="comment">//关闭流</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException, IOException</span>&#123;<span class="comment">//删除</span></span><br><span class="line">        SAXReader reader = <span class="keyword">new</span> SAXReader();<span class="comment">//解析器</span></span><br><span class="line">        Document document = reader.read(<span class="keyword">new</span> File(<span class="string">"src/book.xml"</span>));<span class="comment">//解析</span></span><br><span class="line"></span><br><span class="line">        Element price = document.getRootElement().element(<span class="string">"书"</span>).element(<span class="string">"售价"</span>);<span class="comment">//得到售价节点</span></span><br><span class="line">        price.getParent().remove(price);<span class="comment">//用父母删孩子</span></span><br><span class="line"></span><br><span class="line">        OutputFormat format = <span class="keyword">new</span> OutputFormat().createPrettyPrint();<span class="comment">//格式化输出器</span></span><br><span class="line">        format.setEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        XMLWriter writer = <span class="keyword">new</span> XMLWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/book.xml"</span>), format);</span><br><span class="line">        writer.write(document);<span class="comment">//把document对象写入</span></span><br><span class="line">        writer.close();<span class="comment">//关闭流</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;<span class="comment">//更新</span></span><br><span class="line">        SAXReader reader = <span class="keyword">new</span> SAXReader();<span class="comment">//解析器</span></span><br><span class="line">        Document document = reader.read(<span class="keyword">new</span> File(<span class="string">"src/book.xml"</span>));<span class="comment">//解析</span></span><br><span class="line"></span><br><span class="line">        Element book = (Element)document.getRootElement().elements(<span class="string">"书"</span>).get(<span class="number">1</span>);</span><br><span class="line">        book.element(<span class="string">"书名"</span>).setText(<span class="string">"初日"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        OutputFormat format = <span class="keyword">new</span> OutputFormat().createPrettyPrint();<span class="comment">//格式化输出器</span></span><br><span class="line">        format.setEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        XMLWriter writer = <span class="keyword">new</span> XMLWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/book.xml"</span>), format);</span><br><span class="line">        writer.write(document);<span class="comment">//把document对象写入</span></span><br><span class="line">        writer.close();<span class="comment">//关闭流</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DOM操作 </category>
          
          <category> XML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dom4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.HotSpot虚拟机 对象创建</title>
      <link href="/2017/02/05/20170205003_%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA/"/>
      <url>/2017/02/05/20170205003_%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a><strong>对象创建</strong></h2><ol><li>new指令 （new一个对象）</li><li>检查这个指令的参数是否能在常量池中定位到一个类符号引用</li><li>检查此符号引用代表的类是否被加载，解析，初始化过</li><li>否：执行相应的类加载</li><li><p>是（类被加载过后），虚拟机为新生的对象分配内存（大小在类加载时确定），把某大小的堆内存划分给此对象</p><p>5.1. 如果堆内存整齐划分：分配内存实质是把指向空闲内存的指针移动该对象大小相等的位置，这种分配方式叫<strong>指针碰壁</strong></p><p>5.2 如果堆内存空闲内存与非空闲随机：则虚拟机会维护一个内存列表，每次分配都划分相应的内存给对象，这种分配方式叫<strong>空闲列表</strong></p></li><li><p>分配方式决定于Java堆是否规整，Java堆是否规整决定于采用的垃圾回收器是否有压缩整理功能。</p><p>6.1 并发情况下，对于修改指针指向位置，有两种方案</p><pre><code>1.对分配内存空间进行同步处理--实际上，虚拟机采用CAS配上失败重试的方法保证更新操作的原子性2.把内存的分配的动作按照线程划分在不同的空间进行，即每个线程在Java堆中预先分配一小块内存（称为本地线程分配缓冲TLAB），哪个线程需要分配内存，就在哪个线程的TLAB上分配，当TLAB用完需要分配新的TLAB时才同步锁定 ----- 可以通过-XX:+/-UseTLAB参数设定</code></pre></li><li>内存分配完毕，虚拟机把分配的内存初始化为零值（不包括对象头），使用TLAB则此可以在TLAB前执行。此步骤保证了对象的实例字段在代码中不赋初值即可使用，程序可访问到这些字段的数据类型所对应的默认初始值</li><li>虚拟机对对象进行必要的设置（指明类，找到类的元数据信息，对象的哈希码等）这些存放在对象的对象头（Object Header）中。 </li><li><strong>对于虚拟机，新的对象已经产生。对于程序，才刚刚开始</strong></li><li>执行&lt; init &gt;方法，把对象按照程序员意愿进行初始化。可以用的对象新建成功</li></ol>]]></content>
      
      
      <categories>
          
          <category> java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入了解java虚拟机 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jaxp解析XML</title>
      <link href="/2017/02/05/2017_jaxp2/"/>
      <url>/2017/02/05/2017_jaxp2/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.utils;</span><br><span class="line"><span class="comment">//包名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.crypto.dsig.Transform;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Transformer;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.dom.DOMSource;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.stream.StreamResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工具类 执行那些重复的代码块 默认为静态</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String filename = <span class="string">"src/exam.xml"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到解析器并解析xml文档</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Document <span class="title">getDocument</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//1.创建工厂(得到DOM解析器的工厂实例)   ---这个工厂类是抽象类,so用其newInstance方法得到DOM的新实例</span></span><br><span class="line">        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">        <span class="comment">//2.从DOM工厂获得DOM解析器 有了这个实例才可以解析</span></span><br><span class="line">        DocumentBuilder builder =  factory.newDocumentBuilder();</span><br><span class="line">        <span class="comment">//3.将给定URI的内容解析为一个XML文档，并且返回一个新的DOM Document对象</span></span><br><span class="line">        Document document = builder.parse(<span class="string">"src/cn/xml/book.xml"</span>);</span><br><span class="line">        <span class="comment">//4.以后的处理都是对Document对象进行的</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> document;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把得到的数据写入xml文档</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write2Xml</span><span class="params">(Document document)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        TransformerFactory factory = TransformerFactory.newInstance();<span class="comment">//产生转化器</span></span><br><span class="line">        Transformer tf = factory.newTransformer();</span><br><span class="line">        tf.transform(<span class="keyword">new</span> DOMSource(document), <span class="keyword">new</span> StreamResult(<span class="keyword">new</span>  FileOutputStream(filename)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//原理</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                //创建工厂实例</span></span><br><span class="line"><span class="comment">                TransformerFactory tf = TransformerFactory.newInstance();</span></span><br><span class="line"><span class="comment">                //通过工厂实例得到Transformer对象(transform方法可以转化来源到目的地)</span></span><br><span class="line"><span class="comment">                Transformer tr = tf.newTransformer();</span></span><br><span class="line"><span class="comment">                //DOMSource是Source的实现类 把Document类型封装为Source类型</span></span><br><span class="line"><span class="comment">                Source s = new DOMSource(document);</span></span><br><span class="line"><span class="comment">                //声明输出流对象 指向硬盘中的XML文件</span></span><br><span class="line"><span class="comment">                OutputStream f= new FileOutputStream("src/cn/xml/book.xml");</span></span><br><span class="line"><span class="comment">                //把输出流对象通过流方法转化为Result对象 Result对象指向硬盘中的XML文件</span></span><br><span class="line"><span class="comment">                Result r = new StreamResult(f);</span></span><br><span class="line"><span class="comment">                //transform方法(来源, 目的地) 把s写入r</span></span><br><span class="line"><span class="comment">                tr.transform(s, r);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DOM操作 </category>
          
          <category> XML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jaxp </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
